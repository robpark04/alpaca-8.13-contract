{
  "address": "0xe023C16A18079Dea963918D7a3e70fC4023373B1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_BadActionSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_BadReinvestPath",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_ExceedCredit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_IncorrectNativeAmountDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requiredAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "DeltaNeutralVault_InsufficientShareReceived",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requiredAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "DeltaNeutralVault_InsufficientTokenReceived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_InvalidInitializedAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_InvalidLpToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        }
      ],
      "name": "DeltaNeutralVault_InvalidPositions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_InvalidShareAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_PositionValueExceedLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_PositionsAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_PositionsIsHealthy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_PositionsNotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_UnTrustedPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        }
      ],
      "name": "DeltaNeutralVault_Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_UnsafeDebtRatio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_UnsafeDebtValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountBefore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAfter",
          "type": "uint256"
        }
      ],
      "name": "DeltaNeutralVault_UnsafeOutstanding",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_UnsafePositionEquity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeltaNeutralVault_UnsafePositionValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "DeltaNeutralVault_UnsupportedDecimals",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareValue",
          "type": "uint256"
        }
      ],
      "name": "DeltaNeutralVault_WithdrawValueExceedShareValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_shareReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stableTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "LogDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stableVaultPosId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetVaultPosId",
          "type": "uint256"
        }
      ],
      "name": "LogInitializePositions",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_equityBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_equityAfter",
          "type": "uint256"
        }
      ],
      "name": "LogRebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_equityBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_equityAfter",
          "type": "uint256"
        }
      ],
      "name": "LogReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "LogSetDeltaNeutralOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "LogSetDeltaNeutralVaultConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_shareOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minStableTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minAssetTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "LogWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "alpacaToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetTo18ConversionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetVaultPosId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetVaultWorker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IDeltaNeutralVaultConfig02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stableTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_shareReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minShareReceive",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stableTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minShareReceive",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initPositions",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stableVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableVaultWorker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetVaultWorker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_alpacaToken",
          "type": "address"
        },
        {
          "internalType": "contract IDeltaNeutralOracle",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "contract IDeltaNeutralVaultConfig02",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFeeCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingManagementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stablePositionEquity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stablePositionDebtValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableLpAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetPositionEquity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetPositionDebtValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetLpAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct DeltaNeutralVault02.PositionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IDeltaNeutralOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_actions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_datas",
          "type": "bytes[]"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_actions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_datas",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "_minTokenReceive",
          "type": "uint256"
        }
      ],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDeltaNeutralOracle",
          "name": "_newPriceOracle",
          "type": "address"
        }
      ],
      "name": "setDeltaNeutralOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDeltaNeutralVaultConfig02",
          "name": "_newVaultConfig",
          "type": "address"
        }
      ],
      "name": "setDeltaNeutralVaultConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shareAmount",
          "type": "uint256"
        }
      ],
      "name": "shareToValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableTo18ConversionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableVaultPosId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableVaultWorker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEquityValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "valueToShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shareAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minStableTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAssetTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf44087b6b1cb014bf1c81c0db60ae84548c3c66fcddbaa53fb0b49319604c69c",
  "receipt": {
    "to": null,
    "from": "0x3A54802752fEFDc1aF2CD0b6DFA4F24694bDEE33",
    "contractAddress": "0xe023C16A18079Dea963918D7a3e70fC4023373B1",
    "transactionIndex": 12,
    "gasUsed": "5335909",
    "logsBloom": "0x
    "blockHash": "0x40af9b3c7b0cd0ebd0ef2500fbc216c6ce70da663e04c8b369b5bf672a4215e8",
    "transactionHash": "0xf44087b6b1cb014bf1c81c0db60ae84548c3c66fcddbaa53fb0b49319604c69c",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10773270,
        "transactionHash": "0xf44087b6b1cb014bf1c81c0db60ae84548c3c66fcddbaa53fb0b49319604c69c",
        "address": "0xe023C16A18079Dea963918D7a3e70fC4023373B1",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 15,
        "blockHash": "0x40af9b3c7b0cd0ebd0ef2500fbc216c6ce70da663e04c8b369b5bf672a4215e8"
      }
    ],
    "blockNumber": 10773270,
    "cumulativeGasUsed": "7002740",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "80c1d8b85362075366e47aa320ad0d03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_BadActionSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_BadReinvestPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_ExceedCredit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_IncorrectNativeAmountDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_receivedAmount\",\"type\":\"uint256\"}],\"name\":\"DeltaNeutralVault_InsufficientShareReceived\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_receivedAmount\",\"type\":\"uint256\"}],\"name\":\"DeltaNeutralVault_InsufficientTokenReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_InvalidInitializedAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_InvalidLpToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"name\":\"DeltaNeutralVault_InvalidPositions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_InvalidShareAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_PositionValueExceedLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_PositionsAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_PositionsIsHealthy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_PositionsNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_UnTrustedPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"DeltaNeutralVault_Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_UnsafeDebtRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_UnsafeDebtValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAfter\",\"type\":\"uint256\"}],\"name\":\"DeltaNeutralVault_UnsafeOutstanding\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_UnsafePositionEquity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaNeutralVault_UnsafePositionValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"DeltaNeutralVault_UnsupportedDecimals\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareValue\",\"type\":\"uint256\"}],\"name\":\"DeltaNeutralVault_WithdrawValueExceedShareValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_shareReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stableTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stableVaultPosId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetVaultPosId\",\"type\":\"uint256\"}],\"name\":\"LogInitializePositions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_equityBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_equityAfter\",\"type\":\"uint256\"}],\"name\":\"LogRebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_equityBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_equityAfter\",\"type\":\"uint256\"}],\"name\":\"LogReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"LogSetDeltaNeutralOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"LogSetDeltaNeutralVaultConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_shareOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minStableTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minAssetTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alpacaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetTo18ConversionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetVaultPosId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetVaultWorker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IDeltaNeutralVaultConfig02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_shareReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minShareReceive\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minShareReceive\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initPositions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stableVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableVaultWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetVaultWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alpacaToken\",\"type\":\"address\"},{\"internalType\":\"contract IDeltaNeutralOracle\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IDeltaNeutralVaultConfig02\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablePositionEquity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablePositionDebtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableLpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetPositionEquity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetPositionDebtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetLpAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DeltaNeutralVault02.PositionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IDeltaNeutralOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenReceive\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDeltaNeutralOracle\",\"name\":\"_newPriceOracle\",\"type\":\"address\"}],\"name\":\"setDeltaNeutralOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDeltaNeutralVaultConfig02\",\"name\":\"_newVaultConfig\",\"type\":\"address\"}],\"name\":\"setDeltaNeutralVaultConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"name\":\"shareToValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableTo18ConversionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableVaultPosId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableVaultWorker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEquityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"valueToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStableTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAssetTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,uint256,address,uint256,bytes)\":{\"params\":{\"_assetTokenAmount\":\"Amount of asset token transfer to vault.\",\"_data\":\"The calldata to pass along to the proxy action for more working context.\",\"_minShareReceive\":\"Minimum share that _shareReceiver must receive.\",\"_shareReceiver\":\"Addresses to be receive share.\",\"_stableTokenAmount\":\"Amount of stable token transfer to vault.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initPositions(uint256,uint256,uint256,bytes)\":{\"params\":{\"_assetTokenAmount\":\"Amount of asset token transfer to vault.\",\"_data\":\"The calldata to pass along to the proxy action for more working context.\",\"_minShareReceive\":\"Minimum share that _shareReceiver must receive.\",\"_stableTokenAmount\":\"Amount of stable token transfer to vault.\"}},\"initialize(string,string,address,address,address,address,address,address,address,address)\":{\"params\":{\"_alpacaToken\":\"Alpaca token address.\",\"_assetVault\":\"Address of asset vault.\",\"_config\":\"The address of delta neutral vault config.\",\"_lpToken\":\"Address stable and asset token pair.\",\"_name\":\"Name.\",\"_priceOracle\":\"DeltaNeutralOracle address.\",\"_stableVault\":\"Address of stable vault.\",\"_stableVaultWorker\":\"Address of asset worker.\",\"_symbol\":\"Symbol.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rebalance(uint8[],uint256[],bytes[])\":{\"params\":{\"_actions\":\"List of actions to execute.\",\"_datas\":\"The calldata to pass along for more working context.\",\"_values\":\"Native token amount.\"}},\"reinvest(uint8[],uint256[],bytes[],uint256)\":{\"params\":{\"_actions\":\"List of actions to execute.\",\"_datas\":\"The calldata to pass along for more working context.\",\"_minTokenReceive\":\"Minimum token received when swap reward.\",\"_values\":\"Native token amount.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDeltaNeutralOracle(address)\":{\"params\":{\"_newPriceOracle\":\"New deltaNeutralOracle address.\"}},\"setDeltaNeutralVaultConfig(address)\":{\"params\":{\"_newVaultConfig\":\"New deltaNeutralOracle address.\"}},\"shareToValue(uint256)\":{\"params\":{\"_shareAmount\":\"Amount of share.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"valueToShare(uint256)\":{\"params\":{\"_value\":\"value in usd.\"}},\"withdraw(uint256,uint256,uint256,bytes)\":{\"params\":{\"_data\":\"The calldata to pass along to the proxy action for more working context.\",\"_minAssetTokenAmount\":\"Minimum asset token shareOwner expect to receive.\",\"_minStableTokenAmount\":\"Minimum stable token shareOwner expect to receive.\",\"_shareAmount\":\"Amount of share to withdraw from vault.\"}}},\"title\":\"DeltaNeutralVault02 is designed to take a long and short position in an asset at the same time to cancel out the effect on the out-standing portfolio when the asset\\u2019s price moves. Moreover, DeltaNeutralVault02 support credit-dependent limit access\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256,address,uint256,bytes)\":{\"notice\":\"Deposit to delta neutral vault.\"},\"initPositions(uint256,uint256,uint256,bytes)\":{\"notice\":\"initialize delta neutral vault positions.\"},\"initialize(string,string,address,address,address,address,address,address,address,address)\":{\"notice\":\"Initialize Delta Neutral vault.\"},\"pendingManagementFee()\":{\"notice\":\"Return amount of share pending for minting as a form of management fee\"},\"positionInfo()\":{\"notice\":\"Return equity and debt value in usd of stable and asset positions.\"},\"rebalance(uint8[],uint256[],bytes[])\":{\"notice\":\"Rebalance stable and asset positions.\"},\"reinvest(uint8[],uint256[],bytes[],uint256)\":{\"notice\":\"Reinvest fund to stable and asset positions.\"},\"setDeltaNeutralOracle(address)\":{\"notice\":\"Set new DeltaNeutralOracle.\"},\"setDeltaNeutralVaultConfig(address)\":{\"notice\":\"Set new DeltaNeutralVaultConfig.\"},\"shareToValue(uint256)\":{\"notice\":\"Return the value of share from the given share amount.\"},\"totalEquityValue()\":{\"notice\":\"Return equity value of delta neutral position.\"},\"valueToShare(uint256)\":{\"notice\":\"Return the amount of share from the given value.\"},\"withdraw(uint256,uint256,uint256,bytes)\":{\"notice\":\"Withdraw from delta neutral vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DeltaNeutralVault02.sol\":\"DeltaNeutralVault02\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/DeltaNeutralVault02.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IDeltaNeutralOracle.sol\\\";\\r\\nimport \\\"./interfaces/IVault.sol\\\";\\r\\nimport \\\"./interfaces/IWorker02.sol\\\";\\r\\nimport \\\"./interfaces/IWETH.sol\\\";\\r\\nimport \\\"./interfaces/IWNativeRelayer.sol\\\";\\r\\nimport \\\"./interfaces/IDeltaNeutralVaultConfig02.sol\\\";\\r\\nimport \\\"./interfaces/IFairLaunch.sol\\\";\\r\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"./interfaces/IController.sol\\\";\\r\\n\\r\\nimport \\\"./utils/SafeToken.sol\\\";\\r\\nimport \\\"./utils/FixedPointMathLib.sol\\\";\\r\\nimport \\\"./utils/Math.sol\\\";\\r\\nimport \\\"./utils/FullMath.sol\\\";\\r\\n\\r\\n/// @title DeltaNeutralVault02 is designed to take a long and short position in an asset at the same time\\r\\n/// to cancel out the effect on the out-standing portfolio when the asset\\u2019s price moves.\\r\\n/// Moreover, DeltaNeutralVault02 support credit-dependent limit access\\r\\n// solhint-disable max-states-count\\r\\ncontract DeltaNeutralVault02 is ERC20Upgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\\r\\n  // --- Libraries ---\\r\\n  using FixedPointMathLib for uint256;\\r\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n  // --- Events ---\\r\\n  event LogInitializePositions(address indexed _from, uint256 _stableVaultPosId, uint256 _assetVaultPosId);\\r\\n  event LogDeposit(\\r\\n    address indexed _from,\\r\\n    address indexed _shareReceiver,\\r\\n    uint256 _shares,\\r\\n    uint256 _stableTokenAmount,\\r\\n    uint256 _assetTokenAmount\\r\\n  );\\r\\n  event LogWithdraw(address indexed _shareOwner, uint256 _minStableTokenAmount, uint256 _minAssetTokenAmount);\\r\\n  event LogRebalance(uint256 _equityBefore, uint256 _equityAfter);\\r\\n  event LogReinvest(uint256 _equityBefore, uint256 _equityAfter);\\r\\n  event LogSetDeltaNeutralOracle(address indexed _caller, address _priceOracle);\\r\\n  event LogSetDeltaNeutralVaultConfig(address indexed _caller, address _config);\\r\\n\\r\\n  // --- Errors ---\\r\\n  error DeltaNeutralVault_BadReinvestPath();\\r\\n  error DeltaNeutralVault_BadActionSize();\\r\\n  error DeltaNeutralVault_Unauthorized(address _caller);\\r\\n  error DeltaNeutralVault_PositionsAlreadyInitialized();\\r\\n  error DeltaNeutralVault_PositionsNotInitialized();\\r\\n  error DeltaNeutralVault_InvalidPositions(address _vault, uint256 _positionId);\\r\\n  error DeltaNeutralVault_UnsafePositionEquity();\\r\\n  error DeltaNeutralVault_UnsafePositionValue();\\r\\n  error DeltaNeutralVault_UnsafeDebtValue();\\r\\n  error DeltaNeutralVault_UnsafeDebtRatio();\\r\\n  error DeltaNeutralVault_UnsafeOutstanding(address _token, uint256 _amountBefore, uint256 _amountAfter);\\r\\n  error DeltaNeutralVault_PositionsIsHealthy();\\r\\n  error DeltaNeutralVault_InsufficientTokenReceived(address _token, uint256 _requiredAmount, uint256 _receivedAmount);\\r\\n  error DeltaNeutralVault_InsufficientShareReceived(uint256 _requiredAmount, uint256 _receivedAmount);\\r\\n  error DeltaNeutralVault_UnTrustedPrice();\\r\\n  error DeltaNeutralVault_PositionValueExceedLimit();\\r\\n  error DeltaNeutralVault_WithdrawValueExceedShareValue(uint256 _withdrawValue, uint256 _shareValue);\\r\\n  error DeltaNeutralVault_IncorrectNativeAmountDeposit();\\r\\n  error DeltaNeutralVault_InvalidLpToken();\\r\\n  error DeltaNeutralVault_InvalidInitializedAddress();\\r\\n  error DeltaNeutralVault_UnsupportedDecimals(uint256 _decimals);\\r\\n  error DeltaNeutralVault_InvalidShareAmount();\\r\\n  error DeltaNeutralVault_ExceedCredit();\\r\\n\\r\\n  struct Outstanding {\\r\\n    uint256 stableAmount;\\r\\n    uint256 assetAmount;\\r\\n    uint256 nativeAmount;\\r\\n  }\\r\\n\\r\\n  struct PositionInfo {\\r\\n    uint256 stablePositionEquity;\\r\\n    uint256 stablePositionDebtValue;\\r\\n    uint256 stableLpAmount;\\r\\n    uint256 assetPositionEquity;\\r\\n    uint256 assetPositionDebtValue;\\r\\n    uint256 assetLpAmount;\\r\\n  }\\r\\n\\r\\n  // --- Constants ---\\r\\n  uint64 private constant MAX_BPS = 10000;\\r\\n\\r\\n  uint8 private constant ACTION_WORK = 1;\\r\\n  uint8 private constant ACTION_WRAP = 2;\\r\\n\\r\\n  // --- States ---\\r\\n\\r\\n  uint256 public stableTo18ConversionFactor;\\r\\n  uint256 public assetTo18ConversionFactor;\\r\\n\\r\\n  address private lpToken;\\r\\n  address public stableVault;\\r\\n  address public assetVault;\\r\\n\\r\\n  address public stableVaultWorker;\\r\\n  address public assetVaultWorker;\\r\\n\\r\\n  address public stableToken;\\r\\n  address public assetToken;\\r\\n  address public alpacaToken;\\r\\n\\r\\n  uint256 public stableVaultPosId;\\r\\n  uint256 public assetVaultPosId;\\r\\n\\r\\n  uint256 public lastFeeCollected;\\r\\n\\r\\n  IDeltaNeutralOracle public priceOracle;\\r\\n\\r\\n  IDeltaNeutralVaultConfig02 public config;\\r\\n\\r\\n  // --- Mutable ---\\r\\n  uint8 private OPENING;\\r\\n\\r\\n  /// @dev Require that the caller must be an EOA account if not whitelisted.\\r\\n  modifier onlyEOAorWhitelisted() {\\r\\n    if (msg.sender != tx.origin && !config.whitelistedCallers(msg.sender)) {\\r\\n      revert DeltaNeutralVault_Unauthorized(msg.sender);\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @dev Require that the caller must be a rebalancer account.\\r\\n  modifier onlyRebalancers() {\\r\\n    if (!config.whitelistedRebalancers(msg.sender)) revert DeltaNeutralVault_Unauthorized(msg.sender);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @dev Require that the caller must be a reinvestor account.\\r\\n  modifier onlyReinvestors() {\\r\\n    if (!config.whitelistedReinvestors(msg.sender)) revert DeltaNeutralVault_Unauthorized(msg.sender);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @dev Collect management fee before interactions\\r\\n  modifier collectFee() {\\r\\n    _mintFee();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor() initializer {}\\r\\n\\r\\n  /// @notice Initialize Delta Neutral vault.\\r\\n  /// @param _name Name.\\r\\n  /// @param _symbol Symbol.\\r\\n  /// @param _stableVault Address of stable vault.\\r\\n  /// @param _assetVault Address of asset vault.\\r\\n  /// @param _stableVaultWorker Address of stable worker.\\r\\n  /// @param _stableVaultWorker Address of asset worker.\\r\\n  /// @param _lpToken Address stable and asset token pair.\\r\\n  /// @param _alpacaToken Alpaca token address.\\r\\n  /// @param _priceOracle DeltaNeutralOracle address.\\r\\n  /// @param _config The address of delta neutral vault config.\\r\\n  function initialize(\\r\\n    string calldata _name,\\r\\n    string calldata _symbol,\\r\\n    address _stableVault,\\r\\n    address _assetVault,\\r\\n    address _stableVaultWorker,\\r\\n    address _assetVaultWorker,\\r\\n    address _lpToken,\\r\\n    address _alpacaToken,\\r\\n    IDeltaNeutralOracle _priceOracle,\\r\\n    IDeltaNeutralVaultConfig02 _config\\r\\n  ) external initializer {\\r\\n    OwnableUpgradeable.__Ownable_init();\\r\\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\r\\n    ERC20Upgradeable.__ERC20_init(_name, _symbol);\\r\\n\\r\\n    stableVault = _stableVault;\\r\\n    assetVault = _assetVault;\\r\\n\\r\\n    stableToken = IVault(_stableVault).token();\\r\\n    assetToken = IVault(_assetVault).token();\\r\\n    alpacaToken = _alpacaToken;\\r\\n\\r\\n    stableVaultWorker = _stableVaultWorker;\\r\\n    assetVaultWorker = _assetVaultWorker;\\r\\n\\r\\n    lpToken = _lpToken;\\r\\n\\r\\n    priceOracle = _priceOracle;\\r\\n    config = _config;\\r\\n\\r\\n    stableTo18ConversionFactor = _to18ConversionFactor(stableToken);\\r\\n    assetTo18ConversionFactor = _to18ConversionFactor(assetToken);\\r\\n\\r\\n    // check if parameters config properly\\r\\n    if (\\r\\n      lpToken != address(IWorker(assetVaultWorker).lpToken()) ||\\r\\n      lpToken != address(IWorker(stableVaultWorker).lpToken())\\r\\n    ) {\\r\\n      revert DeltaNeutralVault_InvalidLpToken();\\r\\n    }\\r\\n    if (address(alpacaToken) == address(0)) revert DeltaNeutralVault_InvalidInitializedAddress();\\r\\n    if (address(priceOracle) == address(0)) revert DeltaNeutralVault_InvalidInitializedAddress();\\r\\n    if (address(config) == address(0)) revert DeltaNeutralVault_InvalidInitializedAddress();\\r\\n  }\\r\\n\\r\\n  /// @notice initialize delta neutral vault positions.\\r\\n  /// @param _stableTokenAmount Amount of stable token transfer to vault.\\r\\n  /// @param _assetTokenAmount Amount of asset token transfer to vault.\\r\\n  /// @param _minShareReceive Minimum share that _shareReceiver must receive.\\r\\n  /// @param _data The calldata to pass along to the proxy action for more working context.\\r\\n  function initPositions(\\r\\n    uint256 _stableTokenAmount,\\r\\n    uint256 _assetTokenAmount,\\r\\n    uint256 _minShareReceive,\\r\\n    bytes calldata _data\\r\\n  ) external payable onlyOwner {\\r\\n    if (stableVaultPosId != 0 || assetVaultPosId != 0) {\\r\\n      revert DeltaNeutralVault_PositionsAlreadyInitialized();\\r\\n    }\\r\\n\\r\\n    OPENING = 1;\\r\\n    stableVaultPosId = IVault(stableVault).nextPositionID();\\r\\n    assetVaultPosId = IVault(assetVault).nextPositionID();\\r\\n    deposit(_stableTokenAmount, _assetTokenAmount, msg.sender, _minShareReceive, _data);\\r\\n\\r\\n    OPENING = 0;\\r\\n\\r\\n    emit LogInitializePositions(msg.sender, stableVaultPosId, assetVaultPosId);\\r\\n  }\\r\\n\\r\\n  /// @notice Get token from msg.sender.\\r\\n  /// @param _token token to transfer.\\r\\n  /// @param _amount amount to transfer.\\r\\n  function _transferTokenToVault(address _token, uint256 _amount) internal {\\r\\n    if (_token == config.getWrappedNativeAddr()) {\\r\\n      if (msg.value != _amount) {\\r\\n        revert DeltaNeutralVault_IncorrectNativeAmountDeposit();\\r\\n      }\\r\\n      IWETH(_token).deposit{ value: _amount }();\\r\\n    } else {\\r\\n      IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice return token to share owenr.\\r\\n  /// @param _to receiver address.\\r\\n  /// @param _token token to transfer.\\r\\n  /// @param _amount amount to transfer.\\r\\n  function _transferTokenToShareOwner(\\r\\n    address _to,\\r\\n    address _token,\\r\\n    uint256 _amount\\r\\n  ) internal {\\r\\n    if (_token == config.getWrappedNativeAddr()) {\\r\\n      SafeToken.safeTransferETH(_to, _amount);\\r\\n    } else {\\r\\n      IERC20Upgradeable(_token).safeTransfer(_to, _amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice minting shares as a form of management fee to teasury account\\r\\n  function _mintFee() internal {\\r\\n    _mint(config.managementFeeTreasury(), pendingManagementFee());\\r\\n    lastFeeCollected = block.timestamp;\\r\\n  }\\r\\n\\r\\n  /// @notice Return amount of share pending for minting as a form of management fee\\r\\n  function pendingManagementFee() public view returns (uint256) {\\r\\n    uint256 _secondsFromLastCollection = block.timestamp - lastFeeCollected;\\r\\n    return (totalSupply() * config.managementFeePerSec() * _secondsFromLastCollection) / 1e18;\\r\\n  }\\r\\n\\r\\n  /// @notice Deposit to delta neutral vault.\\r\\n  /// @param _stableTokenAmount Amount of stable token transfer to vault.\\r\\n  /// @param _assetTokenAmount Amount of asset token transfer to vault.\\r\\n  /// @param _shareReceiver Addresses to be receive share.\\r\\n  /// @param _minShareReceive Minimum share that _shareReceiver must receive.\\r\\n  /// @param _data The calldata to pass along to the proxy action for more working context.\\r\\n  function deposit(\\r\\n    uint256 _stableTokenAmount,\\r\\n    uint256 _assetTokenAmount,\\r\\n    address _shareReceiver,\\r\\n    uint256 _minShareReceive,\\r\\n    bytes calldata _data\\r\\n  ) public payable onlyEOAorWhitelisted collectFee nonReentrant returns (uint256) {\\r\\n    PositionInfo memory _positionInfoBefore = positionInfo();\\r\\n    Outstanding memory _outstandingBefore = _outstanding();\\r\\n    _outstandingBefore.nativeAmount = _outstandingBefore.nativeAmount - msg.value;\\r\\n    // 1. transfer tokens from user to vault\\r\\n    _transferTokenToVault(stableToken, _stableTokenAmount);\\r\\n    _transferTokenToVault(assetToken, _assetTokenAmount);\\r\\n    {\\r\\n      // 2. call execute to do more work.\\r\\n      // Perform the actual work, using a new scope to avoid stack-too-deep errors.\\r\\n      (uint8[] memory _actions, uint256[] memory _values, bytes[] memory _datas) = abi.decode(\\r\\n        _data,\\r\\n        (uint8[], uint256[], bytes[])\\r\\n      );\\r\\n      _execute(_actions, _values, _datas);\\r\\n    }\\r\\n    return\\r\\n      _checkAndMint(\\r\\n        _stableTokenAmount,\\r\\n        _assetTokenAmount,\\r\\n        _shareReceiver,\\r\\n        _minShareReceive,\\r\\n        _positionInfoBefore,\\r\\n        _outstandingBefore\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _checkAndMint(\\r\\n    uint256 _stableTokenAmount,\\r\\n    uint256 _assetTokenAmount,\\r\\n    address _shareReceiver,\\r\\n    uint256 _minShareReceive,\\r\\n    PositionInfo memory _positionInfoBefore,\\r\\n    Outstanding memory _outstandingBefore\\r\\n  ) internal returns (uint256) {\\r\\n    // continued from deposit as we're getting stack too deep\\r\\n    // 3. mint share for shareReceiver\\r\\n    PositionInfo memory _positionInfoAfter = positionInfo();\\r\\n    uint256 _depositValue = _calculateEquityChange(_positionInfoAfter, _positionInfoBefore);\\r\\n\\r\\n    // For private vault, deposit value should not exeed credit\\r\\n    // Check availableCredit from msg.sender since user interact with contract directly\\r\\n    IController _controller = IController(config.controller());\\r\\n    if (address(_controller) != address(0) && _depositValue > _controller.availableCredit(msg.sender)) {\\r\\n      revert DeltaNeutralVault_ExceedCredit();\\r\\n    }\\r\\n\\r\\n    // Calculate share from the value gain against the total equity before execution of actions\\r\\n    uint256 _sharesToUser = _valueToShare(\\r\\n      _depositValue,\\r\\n      _positionInfoBefore.stablePositionEquity + _positionInfoBefore.assetPositionEquity\\r\\n    );\\r\\n\\r\\n    if (_sharesToUser < _minShareReceive) {\\r\\n      revert DeltaNeutralVault_InsufficientShareReceived(_minShareReceive, _sharesToUser);\\r\\n    }\\r\\n    _mint(_shareReceiver, _sharesToUser);\\r\\n\\r\\n    // 4. sanity check\\r\\n    _depositHealthCheck(_depositValue, _positionInfoBefore, _positionInfoAfter);\\r\\n    _outstandingCheck(_outstandingBefore, _outstanding());\\r\\n\\r\\n    // Deduct credit from msg.sender regardless of the _shareReceiver.\\r\\n    if (address(_controller) != address(0)) _controller.onDeposit(msg.sender, _sharesToUser);\\r\\n\\r\\n    emit LogDeposit(msg.sender, _shareReceiver, _sharesToUser, _stableTokenAmount, _assetTokenAmount);\\r\\n    return _sharesToUser;\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraw from delta neutral vault.\\r\\n  /// @param _shareAmount Amount of share to withdraw from vault.\\r\\n  /// @param _minStableTokenAmount Minimum stable token shareOwner expect to receive.\\r\\n  /// @param _minAssetTokenAmount Minimum asset token shareOwner expect to receive.\\r\\n  /// @param _data The calldata to pass along to the proxy action for more working context.\\r\\n  function withdraw(\\r\\n    uint256 _shareAmount,\\r\\n    uint256 _minStableTokenAmount,\\r\\n    uint256 _minAssetTokenAmount,\\r\\n    bytes calldata _data\\r\\n  ) external onlyEOAorWhitelisted collectFee nonReentrant returns (uint256) {\\r\\n    if (_shareAmount == 0) revert DeltaNeutralVault_InvalidShareAmount();\\r\\n\\r\\n    PositionInfo memory _positionInfoBefore = positionInfo();\\r\\n    Outstanding memory _outstandingBefore = _outstanding();\\r\\n\\r\\n    uint256 _withdrawalFeeBps = config.feeExemptedCallers(msg.sender) ? 0 : config.withdrawalFeeBps();\\r\\n    uint256 _shareToWithdraw = ((MAX_BPS - _withdrawalFeeBps) * _shareAmount) / MAX_BPS;\\r\\n    uint256 _withdrawShareValue = shareToValue(_shareToWithdraw);\\r\\n\\r\\n    // burn shares from share owner\\r\\n    _burn(msg.sender, _shareAmount);\\r\\n\\r\\n    // mint shares equal to withdrawal fee to treasury.\\r\\n    _mint(config.withdrawalFeeTreasury(), _shareAmount - _shareToWithdraw);\\r\\n\\r\\n    {\\r\\n      (uint8[] memory actions, uint256[] memory values, bytes[] memory _datas) = abi.decode(\\r\\n        _data,\\r\\n        (uint8[], uint256[], bytes[])\\r\\n      );\\r\\n      _execute(actions, values, _datas);\\r\\n    }\\r\\n\\r\\n    return\\r\\n      _checkAndTransfer(\\r\\n        _shareAmount,\\r\\n        _minStableTokenAmount,\\r\\n        _minAssetTokenAmount,\\r\\n        _withdrawShareValue,\\r\\n        _positionInfoBefore,\\r\\n        _outstandingBefore\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _checkAndTransfer(\\r\\n    uint256 _shareAmount,\\r\\n    uint256 _minStableTokenAmount,\\r\\n    uint256 _minAssetTokenAmount,\\r\\n    uint256 _withdrawShareValue,\\r\\n    PositionInfo memory _positionInfoBefore,\\r\\n    Outstanding memory _outstandingBefore\\r\\n  ) internal returns (uint256) {\\r\\n    PositionInfo memory _positionInfoAfter = positionInfo();\\r\\n    Outstanding memory _outstandingAfter = _outstanding();\\r\\n\\r\\n    // transfer funds back to shareOwner\\r\\n    uint256 _stableTokenBack = stableToken == config.getWrappedNativeAddr()\\r\\n      ? _outstandingAfter.nativeAmount - _outstandingBefore.nativeAmount\\r\\n      : _outstandingAfter.stableAmount - _outstandingBefore.stableAmount;\\r\\n    uint256 _assetTokenBack = assetToken == config.getWrappedNativeAddr()\\r\\n      ? _outstandingAfter.nativeAmount - _outstandingBefore.nativeAmount\\r\\n      : _outstandingAfter.assetAmount - _outstandingBefore.assetAmount;\\r\\n\\r\\n    if (_stableTokenBack < _minStableTokenAmount) {\\r\\n      revert DeltaNeutralVault_InsufficientTokenReceived(stableToken, _minStableTokenAmount, _stableTokenBack);\\r\\n    }\\r\\n    if (_assetTokenBack < _minAssetTokenAmount) {\\r\\n      revert DeltaNeutralVault_InsufficientTokenReceived(assetToken, _minAssetTokenAmount, _assetTokenBack);\\r\\n    }\\r\\n\\r\\n    uint256 _withdrawValue = _calculateEquityChange(_positionInfoBefore, _positionInfoAfter);\\r\\n\\r\\n    if (_withdrawShareValue < _withdrawValue) {\\r\\n      revert DeltaNeutralVault_WithdrawValueExceedShareValue(_withdrawValue, _withdrawShareValue);\\r\\n    }\\r\\n\\r\\n    // sanity check\\r\\n    _withdrawHealthCheck(_withdrawShareValue, _positionInfoBefore, _positionInfoAfter);\\r\\n    _outstandingCheck(_outstandingBefore, _outstandingAfter);\\r\\n\\r\\n    _transferTokenToShareOwner(msg.sender, stableToken, _stableTokenBack);\\r\\n    _transferTokenToShareOwner(msg.sender, assetToken, _assetTokenBack);\\r\\n\\r\\n    // on withdraw increase credit to tx.origin since user can withdraw from DN Gateway -> DN Vault\\r\\n    IController _controller = IController(config.controller());\\r\\n    if (address(_controller) != address(0)) _controller.onWithdraw(tx.origin, _shareAmount);\\r\\n\\r\\n    emit LogWithdraw(msg.sender, _stableTokenBack, _assetTokenBack);\\r\\n\\r\\n    return _withdrawValue;\\r\\n  }\\r\\n\\r\\n  /// @notice Rebalance stable and asset positions.\\r\\n  /// @param _actions List of actions to execute.\\r\\n  /// @param _values Native token amount.\\r\\n  /// @param _datas The calldata to pass along for more working context.\\r\\n  function rebalance(\\r\\n    uint8[] memory _actions,\\r\\n    uint256[] memory _values,\\r\\n    bytes[] memory _datas\\r\\n  ) external onlyRebalancers collectFee {\\r\\n    PositionInfo memory _positionInfoBefore = positionInfo();\\r\\n    Outstanding memory _outstandingBefore = _outstanding();\\r\\n    uint256 _stablePositionValue = _positionInfoBefore.stablePositionEquity +\\r\\n      _positionInfoBefore.stablePositionDebtValue;\\r\\n    uint256 _assetPositionValue = _positionInfoBefore.assetPositionEquity + _positionInfoBefore.assetPositionDebtValue;\\r\\n    uint256 _equityBefore = _positionInfoBefore.stablePositionEquity + _positionInfoBefore.assetPositionEquity;\\r\\n    uint256 _rebalanceFactor = config.rebalanceFactor(); // bps\\r\\n\\r\\n    // 1. check if positions need rebalance\\r\\n    if (\\r\\n      _stablePositionValue * _rebalanceFactor >= _positionInfoBefore.stablePositionDebtValue * MAX_BPS &&\\r\\n      _assetPositionValue * _rebalanceFactor >= _positionInfoBefore.assetPositionDebtValue * MAX_BPS\\r\\n    ) {\\r\\n      revert DeltaNeutralVault_PositionsIsHealthy();\\r\\n    }\\r\\n\\r\\n    // 2. execute rebalance\\r\\n    {\\r\\n      _execute(_actions, _values, _datas);\\r\\n    }\\r\\n\\r\\n    // 3. sanity check\\r\\n    // check if position in a healthy state after rebalancing\\r\\n    uint256 _equityAfter = totalEquityValue();\\r\\n    if (!Math.almostEqual(_equityAfter, _equityBefore, config.positionValueTolerance())) {\\r\\n      revert DeltaNeutralVault_UnsafePositionValue();\\r\\n    }\\r\\n    _outstandingCheck(_outstandingBefore, _outstanding());\\r\\n\\r\\n    emit LogRebalance(_equityBefore, _equityAfter);\\r\\n  }\\r\\n\\r\\n  /// @notice Reinvest fund to stable and asset positions.\\r\\n  /// @param _actions List of actions to execute.\\r\\n  /// @param _values Native token amount.\\r\\n  /// @param _datas The calldata to pass along for more working context.\\r\\n  /// @param _minTokenReceive Minimum token received when swap reward.\\r\\n  function reinvest(\\r\\n    uint8[] memory _actions,\\r\\n    uint256[] memory _values,\\r\\n    bytes[] memory _datas,\\r\\n    uint256 _minTokenReceive\\r\\n  ) external onlyReinvestors {\\r\\n    address[] memory reinvestPath = config.getReinvestPath();\\r\\n    uint256 _alpacaBountyBps = config.alpacaBountyBps();\\r\\n    uint256 _alpacaBeneficiaryBps = config.alpacaBeneficiaryBps();\\r\\n\\r\\n    if (reinvestPath.length == 0) {\\r\\n      revert DeltaNeutralVault_BadReinvestPath();\\r\\n    }\\r\\n\\r\\n    // 1.  claim reward from fairlaunch\\r\\n    uint256 _equityBefore = totalEquityValue();\\r\\n\\r\\n    address _fairLaunchAddress = config.fairLaunchAddr();\\r\\n    IFairLaunch(_fairLaunchAddress).harvest(IVault(stableVault).fairLaunchPoolId());\\r\\n    IFairLaunch(_fairLaunchAddress).harvest(IVault(assetVault).fairLaunchPoolId());\\r\\n    uint256 _alpacaAmount = IERC20Upgradeable(alpacaToken).balanceOf(address(this));\\r\\n\\r\\n    // 2. collect alpaca bounty & distribute to ALPACA beneficiary\\r\\n    uint256 _bounty = (_alpacaBountyBps * _alpacaAmount) / MAX_BPS;\\r\\n    uint256 _beneficiaryShare = (_bounty * _alpacaBeneficiaryBps) / MAX_BPS;\\r\\n    if (_beneficiaryShare > 0)\\r\\n      IERC20Upgradeable(alpacaToken).safeTransfer(config.alpacaBeneficiary(), _beneficiaryShare);\\r\\n    IERC20Upgradeable(alpacaToken).safeTransfer(config.alpacaReinvestFeeTreasury(), _bounty - _beneficiaryShare);\\r\\n\\r\\n    // 3. swap alpaca\\r\\n    uint256 _rewardAmount = _alpacaAmount - _bounty;\\r\\n    ISwapRouter _router = ISwapRouter(config.getSwapRouter());\\r\\n    IERC20Upgradeable(alpacaToken).approve(address(_router), _rewardAmount);\\r\\n    _router.swapExactTokensForTokens(_rewardAmount, _minTokenReceive, reinvestPath, address(this), block.timestamp);\\r\\n\\r\\n    // 4. execute reinvest\\r\\n    {\\r\\n      _execute(_actions, _values, _datas);\\r\\n    }\\r\\n\\r\\n    // 5. sanity check\\r\\n    uint256 _equityAfter = totalEquityValue();\\r\\n    if (_equityAfter <= _equityBefore) {\\r\\n      revert DeltaNeutralVault_UnsafePositionEquity();\\r\\n    }\\r\\n\\r\\n    emit LogReinvest(_equityBefore, _equityAfter);\\r\\n  }\\r\\n\\r\\n  /// @notice check if position equity and debt are healthy after deposit. LEVERAGE_LEVEL must be >= 3\\r\\n  /// @param _depositValue deposit value in usd.\\r\\n  /// @param _positionInfoBefore position equity and debt before deposit.\\r\\n  /// @param _positionInfoAfter position equity and debt after deposit.\\r\\n  function _depositHealthCheck(\\r\\n    uint256 _depositValue,\\r\\n    PositionInfo memory _positionInfoBefore,\\r\\n    PositionInfo memory _positionInfoAfter\\r\\n  ) internal view {\\r\\n    uint256 _toleranceBps = config.positionValueTolerance();\\r\\n    uint8 _leverageLevel = config.leverageLevel();\\r\\n\\r\\n    uint256 _positionValueAfter = _positionInfoAfter.stablePositionEquity +\\r\\n      _positionInfoAfter.stablePositionDebtValue +\\r\\n      _positionInfoAfter.assetPositionEquity +\\r\\n      _positionInfoAfter.assetPositionDebtValue;\\r\\n\\r\\n    // 1. check if vault accept new total position value\\r\\n    if (!config.isVaultSizeAcceptable(_positionValueAfter)) {\\r\\n      revert DeltaNeutralVault_PositionValueExceedLimit();\\r\\n    }\\r\\n\\r\\n    // 2. check position value\\r\\n    // The equity allocation of long side should be equal to _depositValue * (_leverageLevel - 2) / ((2*_leverageLevel) - 2)\\r\\n    uint256 _expectedStableEqChange = (_depositValue * (_leverageLevel - 2)) / ((2 * _leverageLevel) - 2);\\r\\n    // The equity allocation of short side should be equal to _depositValue * _leverageLevel / ((2*_leverageLevel) - 2)\\r\\n    uint256 _expectedAssetEqChange = (_depositValue * _leverageLevel) / ((2 * _leverageLevel) - 2);\\r\\n\\r\\n    uint256 _actualStableDebtChange = _positionInfoAfter.stablePositionDebtValue -\\r\\n      _positionInfoBefore.stablePositionDebtValue;\\r\\n    uint256 _actualAssetDebtChange = _positionInfoAfter.assetPositionDebtValue -\\r\\n      _positionInfoBefore.assetPositionDebtValue;\\r\\n\\r\\n    uint256 _actualStableEqChange = _lpToValue(_positionInfoAfter.stableLpAmount - _positionInfoBefore.stableLpAmount) -\\r\\n      _actualStableDebtChange;\\r\\n    uint256 _actualAssetEqChange = _lpToValue(_positionInfoAfter.assetLpAmount - _positionInfoBefore.assetLpAmount) -\\r\\n      _actualAssetDebtChange;\\r\\n\\r\\n    if (\\r\\n      !Math.almostEqual(_actualStableEqChange, _expectedStableEqChange, _toleranceBps) ||\\r\\n      !Math.almostEqual(_actualAssetEqChange, _expectedAssetEqChange, _toleranceBps)\\r\\n    ) {\\r\\n      revert DeltaNeutralVault_UnsafePositionEquity();\\r\\n    }\\r\\n\\r\\n    // 3. check Debt value\\r\\n    // The debt allocation of long side should be equal to _expectedStableEqChange * (_leverageLevel - 1)\\r\\n    uint256 _expectedStableDebtChange = (_expectedStableEqChange * (_leverageLevel - 1));\\r\\n    // The debt allocation of short side should be equal to _expectedAssetEqChange * (_leverageLevel - 1)\\r\\n    uint256 _expectedAssetDebtChange = (_expectedAssetEqChange * (_leverageLevel - 1));\\r\\n\\r\\n    if (\\r\\n      !Math.almostEqual(_actualStableDebtChange, _expectedStableDebtChange, _toleranceBps) ||\\r\\n      !Math.almostEqual(_actualAssetDebtChange, _expectedAssetDebtChange, _toleranceBps)\\r\\n    ) {\\r\\n      revert DeltaNeutralVault_UnsafeDebtValue();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Check if position equity and debt ratio are healthy after withdraw.\\r\\n  /// @param _withdrawValue Withdraw value in usd.\\r\\n  /// @param _positionInfoBefore Position equity and debt before deposit.\\r\\n  /// @param _positionInfoAfter Position equity and debt after deposit.\\r\\n  function _withdrawHealthCheck(\\r\\n    uint256 _withdrawValue,\\r\\n    PositionInfo memory _positionInfoBefore,\\r\\n    PositionInfo memory _positionInfoAfter\\r\\n  ) internal view {\\r\\n    uint256 _positionValueTolerance = config.positionValueTolerance();\\r\\n    uint256 _debtRationTolerance = config.debtRatioTolerance();\\r\\n\\r\\n    uint256 _totalEquityBefore = _positionInfoBefore.stablePositionEquity + _positionInfoBefore.assetPositionEquity;\\r\\n    uint256 _stableLpWithdrawValue = _lpToValue(_positionInfoBefore.stableLpAmount - _positionInfoAfter.stableLpAmount);\\r\\n\\r\\n    // This will force the equity loss in stable vault stay within the expectation\\r\\n    // Given that the expectation is equity loss in stable vault will not alter the stable equity to total equity ratio\\r\\n    // _stableExpectedWithdrawValue = _withdrawValue * _positionInfoBefore.stablePositionEquity / _totalEquityBefore\\r\\n    // _stableActualWithdrawValue should be almost equal to _stableExpectedWithdrawValue\\r\\n    if (\\r\\n      !Math.almostEqual(\\r\\n        (_stableLpWithdrawValue -\\r\\n          (_positionInfoBefore.stablePositionDebtValue - _positionInfoAfter.stablePositionDebtValue)) *\\r\\n          _totalEquityBefore,\\r\\n        _withdrawValue * _positionInfoBefore.stablePositionEquity,\\r\\n        _positionValueTolerance\\r\\n      )\\r\\n    ) {\\r\\n      revert DeltaNeutralVault_UnsafePositionValue();\\r\\n    }\\r\\n\\r\\n    uint256 _assetLpWithdrawValue = _lpToValue(_positionInfoBefore.assetLpAmount - _positionInfoAfter.assetLpAmount);\\r\\n\\r\\n    // This will force the equity loss in asset vault stay within the expectation\\r\\n    // Given that the expectation is equity loss in asset vault will not alter the asset equity to total equity ratio\\r\\n    // _assetExpectedWithdrawValue = _withdrawValue * _positionInfoBefore.assetPositionEquity / _totalEquityBefore\\r\\n    // _assetActualWithdrawValue should be almost equal to _assetExpectedWithdrawValue\\r\\n    if (\\r\\n      !Math.almostEqual(\\r\\n        (_assetLpWithdrawValue -\\r\\n          (_positionInfoBefore.assetPositionDebtValue - _positionInfoAfter.assetPositionDebtValue)) *\\r\\n          _totalEquityBefore,\\r\\n        _withdrawValue * _positionInfoBefore.assetPositionEquity,\\r\\n        _positionValueTolerance\\r\\n      )\\r\\n    ) {\\r\\n      revert DeltaNeutralVault_UnsafePositionValue();\\r\\n    }\\r\\n\\r\\n    // // debt ratio check to prevent closing all out the debt but the equity stay healthy\\r\\n    uint256 _totalStablePositionBefore = _positionInfoBefore.stablePositionEquity +\\r\\n      _positionInfoBefore.stablePositionDebtValue;\\r\\n    uint256 _totalStablePositionAfter = _positionInfoAfter.stablePositionEquity +\\r\\n      _positionInfoAfter.stablePositionDebtValue;\\r\\n    // debt ratio = debt / position\\r\\n    // debt after / position after ~= debt b4 / position b4\\r\\n    // position b4 * debt after = position after * debt b4\\r\\n    if (\\r\\n      !Math.almostEqual(\\r\\n        _totalStablePositionBefore * _positionInfoAfter.stablePositionDebtValue,\\r\\n        _totalStablePositionAfter * _positionInfoBefore.stablePositionDebtValue,\\r\\n        _debtRationTolerance\\r\\n      )\\r\\n    ) {\\r\\n      revert DeltaNeutralVault_UnsafeDebtRatio();\\r\\n    }\\r\\n\\r\\n    uint256 _totalassetPositionBefore = _positionInfoBefore.assetPositionEquity +\\r\\n      _positionInfoBefore.assetPositionDebtValue;\\r\\n    uint256 _totalassetPositionAfter = _positionInfoAfter.assetPositionEquity +\\r\\n      _positionInfoAfter.assetPositionDebtValue;\\r\\n\\r\\n    if (\\r\\n      !Math.almostEqual(\\r\\n        _totalassetPositionBefore * _positionInfoAfter.assetPositionDebtValue,\\r\\n        _totalassetPositionAfter * _positionInfoBefore.assetPositionDebtValue,\\r\\n        _debtRationTolerance\\r\\n      )\\r\\n    ) {\\r\\n      revert DeltaNeutralVault_UnsafeDebtRatio();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Compare Delta neutral vault tokens' balance before and afrer.\\r\\n  /// @param _outstandingBefore Tokens' balance before.\\r\\n  /// @param _outstandingAfter Tokens' balance after.\\r\\n  function _outstandingCheck(Outstanding memory _outstandingBefore, Outstanding memory _outstandingAfter)\\r\\n    internal\\r\\n    view\\r\\n  {\\r\\n    if (_outstandingAfter.stableAmount < _outstandingBefore.stableAmount) {\\r\\n      revert DeltaNeutralVault_UnsafeOutstanding(\\r\\n        stableToken,\\r\\n        _outstandingBefore.stableAmount,\\r\\n        _outstandingAfter.stableAmount\\r\\n      );\\r\\n    }\\r\\n    if (_outstandingAfter.assetAmount < _outstandingBefore.assetAmount) {\\r\\n      revert DeltaNeutralVault_UnsafeOutstanding(\\r\\n        assetToken,\\r\\n        _outstandingBefore.assetAmount,\\r\\n        _outstandingAfter.assetAmount\\r\\n      );\\r\\n    }\\r\\n    if (_outstandingAfter.nativeAmount < _outstandingBefore.nativeAmount) {\\r\\n      revert DeltaNeutralVault_UnsafeOutstanding(\\r\\n        address(0),\\r\\n        _outstandingBefore.nativeAmount,\\r\\n        _outstandingAfter.nativeAmount\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return stable token, asset token and native token balance.\\r\\n  function _outstanding() internal view returns (Outstanding memory) {\\r\\n    return\\r\\n      Outstanding({\\r\\n        stableAmount: IERC20Upgradeable(stableToken).balanceOf(address(this)),\\r\\n        assetAmount: IERC20Upgradeable(assetToken).balanceOf(address(this)),\\r\\n        nativeAmount: address(this).balance\\r\\n      });\\r\\n  }\\r\\n\\r\\n  /// @notice Return equity and debt value in usd of stable and asset positions.\\r\\n  function positionInfo() public view returns (PositionInfo memory) {\\r\\n    uint256 _stableLpAmount = IWorker02(stableVaultWorker).totalLpBalance();\\r\\n    uint256 _assetLpAmount = IWorker02(assetVaultWorker).totalLpBalance();\\r\\n    uint256 _stablePositionValue = _lpToValue(_stableLpAmount);\\r\\n    uint256 _assetPositionValue = _lpToValue(_assetLpAmount);\\r\\n    uint256 _stableDebtValue = _positionDebtValue(stableVault, stableVaultPosId, stableTo18ConversionFactor);\\r\\n    uint256 _assetDebtValue = _positionDebtValue(assetVault, assetVaultPosId, assetTo18ConversionFactor);\\r\\n\\r\\n    return\\r\\n      PositionInfo({\\r\\n        stablePositionEquity: _stablePositionValue > _stableDebtValue ? _stablePositionValue - _stableDebtValue : 0,\\r\\n        stablePositionDebtValue: _stableDebtValue,\\r\\n        stableLpAmount: _stableLpAmount,\\r\\n        assetPositionEquity: _assetPositionValue > _assetDebtValue ? _assetPositionValue - _assetDebtValue : 0,\\r\\n        assetPositionDebtValue: _assetDebtValue,\\r\\n        assetLpAmount: _assetLpAmount\\r\\n      });\\r\\n  }\\r\\n\\r\\n  /// @notice Return the value of share from the given share amount.\\r\\n  /// @param _shareAmount Amount of share.\\r\\n  function shareToValue(uint256 _shareAmount) public view returns (uint256) {\\r\\n    // From internal call + pendingManagementFee should be 0 as it was collected\\r\\n    // at the beginning of the external contract call\\r\\n    // For external call, to calculate shareToValue, pending fee shall be accounted\\r\\n    uint256 _shareSupply = totalSupply() + pendingManagementFee();\\r\\n    if (_shareSupply == 0) return _shareAmount;\\r\\n    return FullMath.mulDiv(_shareAmount, totalEquityValue(), _shareSupply);\\r\\n  }\\r\\n\\r\\n  /// @notice Return the amount of share from the given value.\\r\\n  /// @param _value value in usd.\\r\\n  function valueToShare(uint256 _value) external view returns (uint256) {\\r\\n    return _valueToShare(_value, totalEquityValue());\\r\\n  }\\r\\n\\r\\n  /// @notice Return equity value of delta neutral position.\\r\\n  function totalEquityValue() public view returns (uint256) {\\r\\n    uint256 _totalPositionValue = _lpToValue(\\r\\n      IWorker02(stableVaultWorker).totalLpBalance() + IWorker02(assetVaultWorker).totalLpBalance()\\r\\n    );\\r\\n    uint256 _totalDebtValue = _positionDebtValue(stableVault, stableVaultPosId, stableTo18ConversionFactor) +\\r\\n      _positionDebtValue(assetVault, assetVaultPosId, assetTo18ConversionFactor);\\r\\n    if (_totalPositionValue < _totalDebtValue) {\\r\\n      return 0;\\r\\n    }\\r\\n    return _totalPositionValue - _totalDebtValue;\\r\\n  }\\r\\n\\r\\n  /// @notice Set new DeltaNeutralOracle.\\r\\n  /// @param _newPriceOracle New deltaNeutralOracle address.\\r\\n  function setDeltaNeutralOracle(IDeltaNeutralOracle _newPriceOracle) external onlyOwner {\\r\\n    // sanity call\\r\\n    _newPriceOracle.getTokenPrice(stableToken);\\r\\n    _newPriceOracle.lpToDollar(1e18, lpToken);\\r\\n\\r\\n    priceOracle = _newPriceOracle;\\r\\n    emit LogSetDeltaNeutralOracle(msg.sender, address(_newPriceOracle));\\r\\n  }\\r\\n\\r\\n  /// @notice Set new DeltaNeutralVaultConfig.\\r\\n  /// @param _newVaultConfig New deltaNeutralOracle address.\\r\\n  function setDeltaNeutralVaultConfig(IDeltaNeutralVaultConfig02 _newVaultConfig) external onlyOwner {\\r\\n    // sanity call\\r\\n    _newVaultConfig.positionValueTolerance();\\r\\n\\r\\n    config = _newVaultConfig;\\r\\n    emit LogSetDeltaNeutralVaultConfig(msg.sender, address(_newVaultConfig));\\r\\n  }\\r\\n\\r\\n  /// @notice Return position debt + pending interest value.\\r\\n  /// @param _vault Vault addrss.\\r\\n  /// @param _posId Position id.\\r\\n  function _positionDebtValue(\\r\\n    address _vault,\\r\\n    uint256 _posId,\\r\\n    uint256 _18ConversionFactor\\r\\n  ) internal view returns (uint256) {\\r\\n    (, , uint256 _positionDebtShare) = IVault(_vault).positions(_posId);\\r\\n    address _token = IVault(_vault).token();\\r\\n    uint256 _vaultDebtShare = IVault(_vault).vaultDebtShare();\\r\\n    if (_vaultDebtShare == 0) {\\r\\n      return (_positionDebtShare * _18ConversionFactor).mulWadDown(_getTokenPrice(_token));\\r\\n    }\\r\\n    uint256 _vaultDebtValue = IVault(_vault).vaultDebtVal() + IVault(_vault).pendingInterest(0);\\r\\n    uint256 _debtAmount = FullMath.mulDiv(_positionDebtShare, _vaultDebtValue, _vaultDebtShare);\\r\\n    return (_debtAmount * _18ConversionFactor).mulWadDown(_getTokenPrice(_token));\\r\\n  }\\r\\n\\r\\n  /// @notice Return value of given lp amount.\\r\\n  /// @param _lpAmount Amount of lp.\\r\\n  function _lpToValue(uint256 _lpAmount) internal view returns (uint256) {\\r\\n    (uint256 _lpValue, uint256 _lastUpdated) = priceOracle.lpToDollar(_lpAmount, lpToken);\\r\\n    if (block.timestamp - _lastUpdated > 86400) revert DeltaNeutralVault_UnTrustedPrice();\\r\\n    return _lpValue;\\r\\n  }\\r\\n\\r\\n  /// @notice Return equity change between two position\\r\\n  /// @param _greaterPosition Position information that's expected to have higer value\\r\\n  /// @param _lesserPosition Position information that's expected to have lower value\\r\\n  function _calculateEquityChange(PositionInfo memory _greaterPosition, PositionInfo memory _lesserPosition)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 _lpChange = (_greaterPosition.stableLpAmount + _greaterPosition.assetLpAmount) -\\r\\n      (_lesserPosition.stableLpAmount + _lesserPosition.assetLpAmount);\\r\\n\\r\\n    uint256 _debtChange = (_greaterPosition.stablePositionDebtValue + _greaterPosition.assetPositionDebtValue) -\\r\\n      (_lesserPosition.stablePositionDebtValue + _lesserPosition.assetPositionDebtValue);\\r\\n\\r\\n    return _lpToValue(_lpChange) - _debtChange;\\r\\n  }\\r\\n\\r\\n  /// @notice Proxy function for calling internal action.\\r\\n  /// @param _actions List of actions to execute.\\r\\n  /// @param _values Native token amount.\\r\\n  /// @param _datas The calldata to pass along for more working context.\\r\\n  function _execute(\\r\\n    uint8[] memory _actions,\\r\\n    uint256[] memory _values,\\r\\n    bytes[] memory _datas\\r\\n  ) internal {\\r\\n    if (_actions.length != _values.length || _actions.length != _datas.length) revert DeltaNeutralVault_BadActionSize();\\r\\n\\r\\n    for (uint256 i = 0; i < _actions.length; i++) {\\r\\n      uint8 _action = _actions[i];\\r\\n      if (_action == ACTION_WORK) {\\r\\n        _doWork(_datas[i]);\\r\\n      }\\r\\n      if (_action == ACTION_WRAP) {\\r\\n        IWETH(config.getWrappedNativeAddr()).deposit{ value: _values[i] }();\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice interact with delta neutral position.\\r\\n  /// @param _data The calldata to pass along to the vault for more working context.\\r\\n  function _doWork(bytes memory _data) internal {\\r\\n    if (stableVaultPosId == 0 || assetVaultPosId == 0) {\\r\\n      revert DeltaNeutralVault_PositionsNotInitialized();\\r\\n    }\\r\\n\\r\\n    // 1. Decode data\\r\\n    (\\r\\n      address payable _vault,\\r\\n      uint256 _posId,\\r\\n      address _worker,\\r\\n      uint256 _principalAmount,\\r\\n      uint256 _borrowAmount,\\r\\n      uint256 _maxReturn,\\r\\n      bytes memory _workData\\r\\n    ) = abi.decode(_data, (address, uint256, address, uint256, uint256, uint256, bytes));\\r\\n\\r\\n    // OPENING for initializing positions\\r\\n    if (\\r\\n      OPENING != 1 &&\\r\\n      !((_vault == stableVault && _posId == stableVaultPosId) || (_vault == assetVault && _posId == assetVaultPosId))\\r\\n    ) {\\r\\n      revert DeltaNeutralVault_InvalidPositions({ _vault: _vault, _positionId: _posId });\\r\\n    }\\r\\n\\r\\n    // 2. approve vault\\r\\n    IERC20Upgradeable(stableToken).safeApprove(_vault, type(uint256).max);\\r\\n    IERC20Upgradeable(assetToken).safeApprove(_vault, type(uint256).max);\\r\\n\\r\\n    // 3. Call work to altering Vault position\\r\\n    IVault(_vault).work(_posId, _worker, _principalAmount, _borrowAmount, _maxReturn, _workData);\\r\\n\\r\\n    // 4. Reset approve to 0\\r\\n    IERC20Upgradeable(stableToken).safeApprove(_vault, 0);\\r\\n    IERC20Upgradeable(assetToken).safeApprove(_vault, 0);\\r\\n  }\\r\\n\\r\\n  /// @dev _getTokenPrice with validate last price updated\\r\\n  function _getTokenPrice(address _token) internal view returns (uint256) {\\r\\n    (uint256 _price, uint256 _lastUpdated) = priceOracle.getTokenPrice(_token);\\r\\n    // _lastUpdated > 1 day revert\\r\\n    if (block.timestamp - _lastUpdated > 86400) revert DeltaNeutralVault_UnTrustedPrice();\\r\\n    return _price;\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate share from value and total equity\\r\\n  /// @param _value Value to convert\\r\\n  /// @param _totalEquity Total equity at the time of calculation\\r\\n  function _valueToShare(uint256 _value, uint256 _totalEquity) internal view returns (uint256) {\\r\\n    uint256 _shareSupply = totalSupply() + pendingManagementFee();\\r\\n    if (_shareSupply == 0) return _value;\\r\\n    return FullMath.mulDiv(_value, _shareSupply, _totalEquity);\\r\\n  }\\r\\n\\r\\n  /// @dev Return a conversion factor to 18 decimals.\\r\\n  /// @param _token token to convert.\\r\\n  function _to18ConversionFactor(address _token) internal view returns (uint256) {\\r\\n    uint256 _decimals = ERC20Upgradeable(_token).decimals();\\r\\n    if (_decimals > 18) revert DeltaNeutralVault_UnsupportedDecimals(_decimals);\\r\\n    if (_decimals == 18) return 1;\\r\\n    uint256 _conversionFactor = 10**(18 - _decimals);\\r\\n    return _conversionFactor;\\r\\n  }\\r\\n\\r\\n  /// @dev Fallback function to accept BNB.\\r\\n  receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x123fb9907d6cca7495ef9acffff22084db6943bc5b103c5d19a03147e033c131\",\"license\":\"BUSL\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IController {\\r\\n  function totalCredit(address _user) external view returns (uint256);\\r\\n\\r\\n  function usedCredit(address _user) external view returns (uint256);\\r\\n\\r\\n  function availableCredit(address _user) external view returns (uint256);\\r\\n\\r\\n  function onDeposit(address _user, uint256 _shareAmount) external;\\r\\n\\r\\n  function onWithdraw(address _user, uint256 _shareAmount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdcd8f39506df604368de782ed7ecad1fcadd8523f76c2e8cca58b1dd21eabd5f\",\"license\":\"BUSL\"},\"contracts/interfaces/IDeltaNeutralOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IDeltaNeutralOracle {\\r\\n  /// @dev Return value in USD for the given lpAmount.\\r\\n  function lpToDollar(uint256 _lpAmount, address _pancakeLPToken) external view returns (uint256, uint256);\\r\\n\\r\\n  /// @dev Return amount of LP for the given USD.\\r\\n  function dollarToLp(uint256 _dollarAmount, address _lpToken) external view returns (uint256, uint256);\\r\\n\\r\\n  /// @dev Return value of given token in USD.\\r\\n  function getTokenPrice(address _token) external view returns (uint256, uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xd99e51c833f7e1c963e65c036ac7a13d4cf75ef1b66960b6efd7e0d66c9c5350\",\"license\":\"BUSL\"},\"contracts/interfaces/IDeltaNeutralVaultConfig02.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IDeltaNeutralVaultConfig02 {\\r\\n  function getWrappedNativeAddr() external view returns (address);\\r\\n\\r\\n  function getWNativeRelayer() external view returns (address);\\r\\n\\r\\n  function rebalanceFactor() external view returns (uint256);\\r\\n\\r\\n  function positionValueTolerance() external view returns (uint256);\\r\\n\\r\\n  function debtRatioTolerance() external view returns (uint256);\\r\\n\\r\\n  /// @dev Return if the caller is whitelisted.\\r\\n  function whitelistedCallers(address _caller) external view returns (bool);\\r\\n\\r\\n  /// @dev Return if the caller is whitelisted.\\r\\n  function whitelistedRebalancers(address _caller) external view returns (bool);\\r\\n\\r\\n  /// @dev Return if the caller is exempted from fee.\\r\\n  function feeExemptedCallers(address _caller) external returns (bool);\\r\\n\\r\\n  /// @dev Get fairlaunch address.\\r\\n  function fairLaunchAddr() external view returns (address);\\r\\n\\r\\n  /// @dev Return the deposit fee treasury.\\r\\n  function depositFeeTreasury() external view returns (address);\\r\\n\\r\\n  /// @dev Get deposit fee.\\r\\n  function depositFeeBps() external view returns (uint256);\\r\\n\\r\\n  /// @dev Return the withdrawl fee treasury.\\r\\n  function withdrawalFeeTreasury() external view returns (address);\\r\\n\\r\\n  /// @dev Get withdrawal fee.\\r\\n  function withdrawalFeeBps() external returns (uint256);\\r\\n\\r\\n  /// @dev Return management fee treasury\\r\\n  function managementFeeTreasury() external view returns (address);\\r\\n\\r\\n  /// @dev Return management fee per sec.\\r\\n  function managementFeePerSec() external view returns (uint256);\\r\\n\\r\\n  /// @dev Get leverage level.\\r\\n  function leverageLevel() external view returns (uint8);\\r\\n\\r\\n  /// @dev Return if the caller is whitelisted.\\r\\n  function whitelistedReinvestors(address _caller) external view returns (bool);\\r\\n\\r\\n  /// @dev Return ALPACA reinvest fee treasury.\\r\\n  function alpacaReinvestFeeTreasury() external view returns (address);\\r\\n\\r\\n  /// @dev Return alpaca bounty bps.\\r\\n  function alpacaBountyBps() external view returns (uint256);\\r\\n\\r\\n  /// @dev Return ALPACA beneficiary address.\\r\\n  function alpacaBeneficiary() external view returns (address);\\r\\n\\r\\n  /// @dev Return ALPACA beneficiary bps.\\r\\n  function alpacaBeneficiaryBps() external view returns (uint256);\\r\\n\\r\\n  /// @dev Return if delta neutral vault position value acceptable.\\r\\n  function isVaultSizeAcceptable(uint256 _totalPositionValue) external view returns (bool);\\r\\n\\r\\n  /// @dev Return swap router\\r\\n  function getSwapRouter() external view returns (address);\\r\\n\\r\\n  /// @dev Return reinvest path\\r\\n  function getReinvestPath() external view returns (address[] memory);\\r\\n\\r\\n  /// @dev Return controller address\\r\\n  function controller() external view returns (address);\\r\\n\\r\\n  /// @dev Set a new controller\\r\\n  function setController(address _controller) external;\\r\\n\\r\\n  /// @dev Return deposit executor\\r\\n  function depositExecutor() external view returns (address);\\r\\n\\r\\n  /// @dev Return withdraw executor\\r\\n  function withdrawExecutor() external view returns (address);\\r\\n\\r\\n  /// @dev Return rebalance executor\\r\\n  function rebalanceExecutor() external view returns (address);\\r\\n\\r\\n  /// @dev Return reinvest executor\\r\\n  function reinvestExecutor() external view returns (address);\\r\\n\\r\\n  /// @dev Return if caller is executor.\\r\\n  function isExecutor(address _caller) external view returns (bool);\\r\\n\\r\\n  /// @dev Return Partial close minimize strategy address\\r\\n  function partialCloseMinimizeStrategy() external view returns (address);\\r\\n\\r\\n  /// @dev Return Stable add two side strategy address\\r\\n  function stableAddTwoSideStrategy() external view returns (address);\\r\\n\\r\\n  /// @dev Return Asset add two side strategy address\\r\\n  function assetAddTwoSideStrategy() external view returns (address);\\r\\n\\r\\n  /// @dev Return swap fee\\r\\n  function swapFee() external view returns (uint256);\\r\\n\\r\\n  /// @dev Return swap fee denom\\r\\n  function swapFeeDenom() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x14fc39a7a0d75c584d2a6f50ae5a084dd84d30b988b5c288c6b99a543a444638\",\"license\":\"BUSL\"},\"contracts/interfaces/IFairLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IFairLaunch {\\r\\n  function poolLength() external view returns (uint256);\\r\\n\\r\\n  function addPool(\\r\\n    uint256 _allocPoint,\\r\\n    address _stakeToken,\\r\\n    bool _withUpdate\\r\\n  ) external;\\r\\n\\r\\n  function setPool(\\r\\n    uint256 _pid,\\r\\n    uint256 _allocPoint,\\r\\n    bool _withUpdate\\r\\n  ) external;\\r\\n\\r\\n  function pendingAlpaca(uint256 _pid, address _user) external view returns (uint256);\\r\\n\\r\\n  function updatePool(uint256 _pid) external;\\r\\n\\r\\n  function deposit(\\r\\n    address _for,\\r\\n    uint256 _pid,\\r\\n    uint256 _amount\\r\\n  ) external;\\r\\n\\r\\n  function withdraw(\\r\\n    address _for,\\r\\n    uint256 _pid,\\r\\n    uint256 _amount\\r\\n  ) external;\\r\\n\\r\\n  function withdrawAll(address _for, uint256 _pid) external;\\r\\n\\r\\n  function harvest(uint256 _pid) external;\\r\\n\\r\\n  function getFairLaunchPoolId() external returns (uint256);\\r\\n\\r\\n  function poolInfo(uint256 _pid)\\r\\n    external\\r\\n    returns (\\r\\n      address,\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xc85e95f6601056e7186114dff4841986a59427157dd66b4c144a2f6ba9e966e4\",\"license\":\"BUSL\"},\"contracts/interfaces/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IPancakePair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n\\r\\n  function symbol() external pure returns (string memory);\\r\\n\\r\\n  function decimals() external pure returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n  event Swap(\\r\\n    address indexed sender,\\r\\n    uint256 amount0In,\\r\\n    uint256 amount1In,\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function getReserves()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint112 reserve0,\\r\\n      uint112 reserve1,\\r\\n      uint32 blockTimestampLast\\r\\n    );\\r\\n\\r\\n  function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n  function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n  function kLast() external view returns (uint256);\\r\\n\\r\\n  function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  function swap(\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address to,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n\\r\\n  function skim(address to) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc58a6c837d5464a30639690b3ccb55ba9ccaf2749d3cea3941a4c73de4b4019f\",\"license\":\"BUSL\"},\"contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface ISwapRouter {\\r\\n  function WETH() external pure returns (address);\\r\\n\\r\\n  function swapExactTokensForETH(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactETHForTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function getAmountsIn(uint256 amountOut, address[] memory path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n  function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x06bd4616d31048a62a78bb94820171c626638ecadb7d431cc3bcf5992ea4f61a\",\"license\":\"BUSL\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nabstract contract IVault {\\r\\n  struct Position {\\r\\n    address worker;\\r\\n    address owner;\\r\\n    uint256 debtShare;\\r\\n  }\\r\\n\\r\\n  mapping(uint256 => Position) public positions;\\r\\n\\r\\n  //@dev Return address of the token to be deposited in vault\\r\\n  function token() external view virtual returns (address);\\r\\n\\r\\n  uint256 public vaultDebtShare;\\r\\n\\r\\n  uint256 public vaultDebtVal;\\r\\n\\r\\n  //@dev Return next position id of vault\\r\\n  function nextPositionID() external view virtual returns (uint256);\\r\\n\\r\\n  //@dev Return the pending interest that will be accrued in the next call.\\r\\n  function pendingInterest(uint256 value) external view virtual returns (uint256);\\r\\n\\r\\n  function fairLaunchPoolId() external view virtual returns (uint256);\\r\\n\\r\\n  /// @dev a function for interacting with position\\r\\n  function work(\\r\\n    uint256 id,\\r\\n    address worker,\\r\\n    uint256 principalAmount,\\r\\n    uint256 borrowAmount,\\r\\n    uint256 maxReturn,\\r\\n    bytes calldata data\\r\\n  ) external payable virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x63a3b5b6a300eb68e2504824e5eaa91cadcc90c04471210d97a9974b9da16ae9\",\"license\":\"BUSL\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IWETH {\\r\\n  function deposit() external payable;\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf6f0d773353ad019e9cade93019a57b75479ef50d1c2bec7f86e9c5b311f4157\",\"license\":\"BUSL\"},\"contracts/interfaces/IWNativeRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IWNativeRelayer {\\r\\n  function withdraw(uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd2af9619fd21804ca6fae2492472a758517074be5298992cc398ac709a95b5c0\",\"license\":\"BUSL\"},\"contracts/interfaces/IWorker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\n\\r\\ninterface IWorker {\\r\\n  /// @dev Work on a (potentially new) position. Optionally send token back to Vault.\\r\\n  function work(\\r\\n    uint256 id,\\r\\n    address user,\\r\\n    uint256 debt,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n\\r\\n  /// @dev Re-invest whatever the worker is working on.\\r\\n  function reinvest() external;\\r\\n\\r\\n  /// @dev Return the amount of wei to get back if we are to liquidate the position.\\r\\n  function health(uint256 id) external view returns (uint256);\\r\\n\\r\\n  /// @dev Liquidate the given position to token. Send all token back to its Vault.\\r\\n  function liquidate(uint256 id) external;\\r\\n\\r\\n  /// @dev SetStretegy that be able to executed by the worker.\\r\\n  function setStrategyOk(address[] calldata strats, bool isOk) external;\\r\\n\\r\\n  /// @dev Set address that can be reinvest\\r\\n  function setReinvestorOk(address[] calldata reinvestor, bool isOk) external;\\r\\n\\r\\n  /// @dev LP token holds by worker\\r\\n  function lpToken() external view returns (address);\\r\\n\\r\\n  /// @dev Base Token that worker is working on\\r\\n  function baseToken() external view returns (address);\\r\\n\\r\\n  /// @dev Farming Token that worker is working on\\r\\n  function farmingToken() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xb95da733a39f717e7ab533f26d599927d3199f1df4508efbbe98e121d2390fda\",\"license\":\"BUSL\"},\"contracts/interfaces/IWorker02.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"./IWorker.sol\\\";\\r\\n\\r\\ninterface IWorker02 is IWorker {\\r\\n  /// @dev Return the trading path that worker is using for convert BTOKEN->...->FTOKEN\\r\\n  function getPath() external view returns (address[] memory);\\r\\n\\r\\n  /// @dev Return the inverse of the path that worker is using for convert BTOKEN->...->FTOKEN\\r\\n  function getReversedPath() external view returns (address[] memory);\\r\\n\\r\\n  /// @dev Return the trading path that the worker is using to convert reward token to beneficial vault token\\r\\n  function getRewardPath() external view returns (address[] memory);\\r\\n\\r\\n  /// @dev Return the amount of lp that worker has\\r\\n  function totalLpBalance() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x46d3f50f51cceaa7e1905d8066c3c0f0f738ad155c6bb52a974c1c4884902ea3\",\"license\":\"BUSL\"},\"contracts/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\r\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\r\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\r\\nlibrary FixedPointMathLib {\\r\\n  /*///////////////////////////////////////////////////////////////\\r\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n  uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\r\\n\\r\\n  function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n    return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\r\\n  }\\r\\n\\r\\n  function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n    return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\r\\n  }\\r\\n\\r\\n  function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n    return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\r\\n  }\\r\\n\\r\\n  function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n    return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\r\\n  }\\r\\n\\r\\n  /*///////////////////////////////////////////////////////////////\\r\\n                    LOW LEVEL FIXED POINT OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n  function mulDivDown(\\r\\n    uint256 x,\\r\\n    uint256 y,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      // Store x * y in z for now.\\r\\n      z := mul(x, y)\\r\\n\\r\\n      // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\r\\n      if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      // Divide z by the denominator.\\r\\n      z := div(z, denominator)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function mulDivUp(\\r\\n    uint256 x,\\r\\n    uint256 y,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      // Store x * y in z for now.\\r\\n      z := mul(x, y)\\r\\n\\r\\n      // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\r\\n      if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\r\\n        revert(0, 0)\\r\\n      }\\r\\n\\r\\n      // First, divide z - 1 by the denominator and add 1.\\r\\n      // Then multiply it by 0 if z is zero, or 1 otherwise.\\r\\n      z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function rpow(\\r\\n    uint256 x,\\r\\n    uint256 n,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      switch x\\r\\n      case 0 {\\r\\n        switch n\\r\\n        case 0 {\\r\\n          // 0 ** 0 = 1\\r\\n          z := denominator\\r\\n        }\\r\\n        default {\\r\\n          // 0 ** n = 0\\r\\n          z := 0\\r\\n        }\\r\\n      }\\r\\n      default {\\r\\n        switch mod(n, 2)\\r\\n        case 0 {\\r\\n          // If n is even, store denominator in z for now.\\r\\n          z := denominator\\r\\n        }\\r\\n        default {\\r\\n          // If n is odd, store x in z for now.\\r\\n          z := x\\r\\n        }\\r\\n\\r\\n        // Shifting right by 1 is like dividing by 2.\\r\\n        let half := shr(1, denominator)\\r\\n\\r\\n        for {\\r\\n          // Shift n right by 1 before looping to halve it.\\r\\n          n := shr(1, n)\\r\\n        } n {\\r\\n          // Shift n right by 1 each iteration to halve it.\\r\\n          n := shr(1, n)\\r\\n        } {\\r\\n          // Revert immediately if x ** 2 would overflow.\\r\\n          // Equivalent to iszero(eq(div(xx, x), x)) here.\\r\\n          if shr(128, x) {\\r\\n            revert(0, 0)\\r\\n          }\\r\\n\\r\\n          // Store x squared.\\r\\n          let xx := mul(x, x)\\r\\n\\r\\n          // Round to the nearest number.\\r\\n          let xxRound := add(xx, half)\\r\\n\\r\\n          // Revert if xx + half overflowed.\\r\\n          if lt(xxRound, xx) {\\r\\n            revert(0, 0)\\r\\n          }\\r\\n\\r\\n          // Set x to scaled xxRound.\\r\\n          x := div(xxRound, denominator)\\r\\n\\r\\n          // If n is even:\\r\\n          if mod(n, 2) {\\r\\n            // Compute z * x.\\r\\n            let zx := mul(z, x)\\r\\n\\r\\n            // If z * x overflowed:\\r\\n            if iszero(eq(div(zx, x), z)) {\\r\\n              // Revert if x is non-zero.\\r\\n              if iszero(iszero(x)) {\\r\\n                revert(0, 0)\\r\\n              }\\r\\n            }\\r\\n\\r\\n            // Round to the nearest number.\\r\\n            let zxRound := add(zx, half)\\r\\n\\r\\n            // Revert if zx + half overflowed.\\r\\n            if lt(zxRound, zx) {\\r\\n              revert(0, 0)\\r\\n            }\\r\\n\\r\\n            // Return properly scaled zxRound.\\r\\n            z := div(zxRound, denominator)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /*///////////////////////////////////////////////////////////////\\r\\n                        GENERAL NUMBER UTILITIES\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n  function sqrt(uint256 x) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      // Start off with z at 1.\\r\\n      z := 1\\r\\n\\r\\n      // Used below to help find a nearby power of 2.\\r\\n      let y := x\\r\\n\\r\\n      // Find the lowest power of 2 that is at least sqrt(x).\\r\\n      if iszero(lt(y, 0x100000000000000000000000000000000)) {\\r\\n        y := shr(128, y) // Like dividing by 2 ** 128.\\r\\n        z := shl(64, z)\\r\\n      }\\r\\n      if iszero(lt(y, 0x10000000000000000)) {\\r\\n        y := shr(64, y) // Like dividing by 2 ** 64.\\r\\n        z := shl(32, z)\\r\\n      }\\r\\n      if iszero(lt(y, 0x100000000)) {\\r\\n        y := shr(32, y) // Like dividing by 2 ** 32.\\r\\n        z := shl(16, z)\\r\\n      }\\r\\n      if iszero(lt(y, 0x10000)) {\\r\\n        y := shr(16, y) // Like dividing by 2 ** 16.\\r\\n        z := shl(8, z)\\r\\n      }\\r\\n      if iszero(lt(y, 0x100)) {\\r\\n        y := shr(8, y) // Like dividing by 2 ** 8.\\r\\n        z := shl(4, z)\\r\\n      }\\r\\n      if iszero(lt(y, 0x10)) {\\r\\n        y := shr(4, y) // Like dividing by 2 ** 4.\\r\\n        z := shl(2, z)\\r\\n      }\\r\\n      if iszero(lt(y, 0x8)) {\\r\\n        // Equivalent to 2 ** z.\\r\\n        z := shl(1, z)\\r\\n      }\\r\\n\\r\\n      // Shifting right by 1 is like dividing by 2.\\r\\n      z := shr(1, add(z, div(x, z)))\\r\\n      z := shr(1, add(z, div(x, z)))\\r\\n      z := shr(1, add(z, div(x, z)))\\r\\n      z := shr(1, add(z, div(x, z)))\\r\\n      z := shr(1, add(z, div(x, z)))\\r\\n      z := shr(1, add(z, div(x, z)))\\r\\n      z := shr(1, add(z, div(x, z)))\\r\\n\\r\\n      // Compute a rounded down version of z.\\r\\n      let zRoundDown := div(x, z)\\r\\n\\r\\n      // If zRoundDown is smaller, use it.\\r\\n      if lt(zRoundDown, z) {\\r\\n        z := zRoundDown\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x3ccfb8231b91a7d5e2eecd7178c75ab464b8deea14d786cf51435e33849541e7\",\"license\":\"AGPL-3.0-only\"},\"contracts/utils/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n  /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      // 512-bit multiply [prod1 prod0] = a * b\\r\\n      // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n      // then use the Chinese Remainder Theorem to reconstruct\\r\\n      // the 512 bit result. The result is stored in two 256\\r\\n      // variables such that product = prod1 * 2**256 + prod0\\r\\n      uint256 prod0; // Least significant 256 bits of the product\\r\\n      uint256 prod1; // Most significant 256 bits of the product\\r\\n      assembly {\\r\\n        let mm := mulmod(a, b, not(0))\\r\\n        prod0 := mul(a, b)\\r\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n      }\\r\\n\\r\\n      // Handle non-overflow cases, 256 by 256 division\\r\\n      if (prod1 == 0) {\\r\\n        require(denominator > 0);\\r\\n        assembly {\\r\\n          result := div(prod0, denominator)\\r\\n        }\\r\\n        return result;\\r\\n      }\\r\\n\\r\\n      // Make sure the result is less than 2**256.\\r\\n      // Also prevents denominator == 0\\r\\n      require(denominator > prod1);\\r\\n\\r\\n      ///////////////////////////////////////////////\\r\\n      // 512 by 256 division.\\r\\n      ///////////////////////////////////////////////\\r\\n\\r\\n      // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n      // Compute remainder using mulmod\\r\\n      uint256 remainder;\\r\\n      assembly {\\r\\n        remainder := mulmod(a, b, denominator)\\r\\n      }\\r\\n      // Subtract 256 bit number from 512 bit number\\r\\n      assembly {\\r\\n        prod1 := sub(prod1, gt(remainder, prod0))\\r\\n        prod0 := sub(prod0, remainder)\\r\\n      }\\r\\n\\r\\n      // Factor powers of two out of denominator\\r\\n      // Compute largest power of two divisor of denominator.\\r\\n      // Always >= 1.\\r\\n      uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\r\\n      // Divide denominator by power of two\\r\\n      assembly {\\r\\n        denominator := div(denominator, twos)\\r\\n      }\\r\\n\\r\\n      // Divide [prod1 prod0] by the factors of two\\r\\n      assembly {\\r\\n        prod0 := div(prod0, twos)\\r\\n      }\\r\\n      // Shift in bits from prod1 into prod0. For this we need\\r\\n      // to flip `twos` such that it is 2**256 / twos.\\r\\n      // If twos is zero, then it becomes one\\r\\n      assembly {\\r\\n        twos := add(div(sub(0, twos), twos), 1)\\r\\n      }\\r\\n      prod0 |= prod1 * twos;\\r\\n\\r\\n      // Invert denominator mod 2**256\\r\\n      // Now that denominator is an odd number, it has an inverse\\r\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n      // Compute the inverse by starting with a seed that is correct\\r\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n      uint256 inv = (3 * denominator) ^ 2;\\r\\n      // Now use Newton-Raphson iteration to improve the precision.\\r\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n      // arithmetic, doubling the correct bits in each step.\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n      // Because the division is now exact we can divide by multiplying\\r\\n      // with the modular inverse of denominator. This will give us the\\r\\n      // correct result modulo 2**256. Since the precoditions guarantee\\r\\n      // that the outcome is less than 2**256, this is the final result.\\r\\n      // We don't need to compute the high bits of the result and prod1\\r\\n      // is no longer required.\\r\\n      result = prod0 * inv;\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  function mulDivRoundingUp(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    result = mulDiv(a, b, denominator);\\r\\n    unchecked {\\r\\n      if (mulmod(a, b, denominator) > 0) {\\r\\n        require(result < type(uint256).max);\\r\\n        result++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x659cb906ac3a8986324ba78c7f2c4c3810c96473023d4c4144431c0a1f68df77\",\"license\":\"MIT\"},\"contracts/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nlibrary Math {\\r\\n  /**\\r\\n   * @dev Check if two values are almost equal within toleranceBps.\\r\\n   */\\r\\n  function almostEqual(\\r\\n    uint256 value0,\\r\\n    uint256 value1,\\r\\n    uint256 toleranceBps\\r\\n  ) internal pure returns (bool) {\\r\\n    uint256 maxValue = max(value0, value1);\\r\\n    return ((maxValue - min(value0, value1)) * 10000) <= toleranceBps * maxValue;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the largest of two numbers.\\r\\n   */\\r\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a >= b ? a : b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the smallest of two numbers.\\r\\n   */\\r\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the rounded number.\\r\\n   */\\r\\n  function e36round(uint256 a) internal pure returns (uint256) {\\r\\n    return (a + 5e17) / 1e18;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xa3f197ce3de1ef0be10271721d383c8eaa1a12f246c268ad5324d7c569dffa89\",\"license\":\"BUSL\"},\"contracts/utils/SafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL\\r\\n/**\\r\\n  \\u2229~~~~\\u2229 \\r\\n  \\u03be \\uff65\\u00d7\\uff65 \\u03be \\r\\n  \\u03be\\u3000~\\u3000\\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u03be \\r\\n  \\u03be\\u3000\\u3000 \\u201c~\\uff5e~\\uff5e\\u3007 \\r\\n  \\u03be\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000 \\u03be \\r\\n  \\u03be \\u03be \\u03be~\\uff5e~\\u03be \\u03be \\u03be \\r\\n\\u3000 \\u03be_\\u03be\\u03be_\\u03be\\u3000\\u03be_\\u03be\\u03be_\\u03be\\r\\nAlpaca Fin Corporation\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface ERC20Interface {\\r\\n  function balanceOf(address user) external view returns (uint256);\\r\\n}\\r\\n\\r\\nlibrary SafeToken {\\r\\n  function myBalance(address token) internal view returns (uint256) {\\r\\n    return ERC20Interface(token).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  function safeTransfer(\\r\\n    address token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n    // solhint-disable-next-line avoid-low-level-calls\\r\\n    require(token.code.length > 0, \\\"!contract\\\");\\r\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"!safeTransfer\\\");\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    address token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n    // solhint-disable-next-line avoid-low-level-calls\\r\\n    require(token.code.length > 0, \\\"!not contract\\\");\\r\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"!safeTransferFrom\\\");\\r\\n  }\\r\\n\\r\\n  function safeApprove(\\r\\n    address token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n    require(token.code.length > 0, \\\"!not contract\\\");\\r\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"!safeApprove\\\");\\r\\n  }\\r\\n\\r\\n  function safeTransferETH(address to, uint256 value) internal {\\r\\n    // solhint-disable-next-line no-call-value\\r\\n    (bool success, ) = to.call{ value: value }(new bytes(0));\\r\\n    require(success, \\\"!safeTransferETH\\\");\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x9fcc528b620bf1812a1fcaabff42e8f0a7713c01a2e1c9cec4e19706b5f40fce\",\"license\":\"BUSL\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102ca5760003560e01c80637a5948cf11610179578063a9d75b2b116100d6578063f2fde38b1161008a578063f97b718611610064578063f97b7186146107d6578063f9e7e7a9146107f6578063fe55892d1461080957600080fd5b8063f2fde38b14610776578063f61ebc3614610796578063f76bdceb146107b657600080fd5b8063d3890ee6116100bb578063d3890ee6146106fa578063dd62ed3e1461071a578063eea7929f1461076057600080fd5b8063a9d75b2b146106ba578063bed65bae146106da57600080fd5b806395d89b411161012d5780639adca65c116101125780639adca65c14610665578063a457c2d71461067a578063a9059cbb1461069a57600080fd5b806395d89b41146106305780639a9a5b521461064557600080fd5b8063818d81491161015e578063818d8149146105dd57806388bf176e146105f25780638da5cb5b1461061257600080fd5b80637a5948cf146105665780637b05fe621461057c57600080fd5b806334cf3b21116102275780636f42f9c7116101db578063715018a6116101c0578063715018a61461051b578063750290da1461053057806379502c551461054657600080fd5b80636f42f9c7146104c557806370a08231146104e557600080fd5b8063441130d51161020c578063441130d51461046f5780634aa187be1461048f5780634b64fcd1146104a557600080fd5b806334cf3b211461043c578063395093511461044f57600080fd5b806318160ddd1161027e5780632630c12f116102635780632630c12f146103ea5780632dcdbd041461040a578063313ce5671461042057600080fd5b806318160ddd146103ab57806323b872dd146103ca57600080fd5b806308660289116102af5780630866028914610323578063095ea7b31461035b5780631083f7611461038b57600080fd5b8063039181a4146102d657806306fdde03146102f857600080fd5b366102d157005b600080fd5b3480156102e257600080fd5b506102f66102f13660046154be565b610829565b005b34801561030457600080fd5b5061030d611030565b60405161031a91906155a6565b60405180910390f35b34801561032f57600080fd5b5060ce54610343906001600160a01b031681565b6040516001600160a01b03909116815260200161031a565b34801561036757600080fd5b5061037b6103763660046155d9565b6110c2565b604051901515815260200161031a565b34801561039757600080fd5b5060d154610343906001600160a01b031681565b3480156103b757600080fd5b506035545b60405190815260200161031a565b3480156103d657600080fd5b5061037b6103e5366004615605565b6110dc565b3480156103f657600080fd5b5060d654610343906001600160a01b031681565b34801561041657600080fd5b506103bc60d35481565b34801561042c57600080fd5b506040516012815260200161031a565b6103bc61044a36600461568f565b611102565b34801561045b57600080fd5b5061037b61046a3660046155d9565b6112b2565b34801561047b57600080fd5b506103bc61048a366004615702565b6112f1565b34801561049b57600080fd5b506103bc60c95481565b3480156104b157600080fd5b506103bc6104c0366004615702565b61132c565b3480156104d157600080fd5b5060cc54610343906001600160a01b031681565b3480156104f157600080fd5b506103bc61050036600461571b565b6001600160a01b031660009081526033602052604090205490565b34801561052757600080fd5b506102f661133f565b34801561053c57600080fd5b506103bc60d55481565b34801561055257600080fd5b5060d754610343906001600160a01b031681565b34801561057257600080fd5b506103bc60ca5481565b34801561058857600080fd5b506105916113a5565b60405161031a9190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b3480156105e957600080fd5b506103bc61158f565b3480156105fe57600080fd5b506102f661060d36600461571b565b61164a565b34801561061e57600080fd5b506097546001600160a01b0316610343565b34801561063c57600080fd5b5061030d61175e565b34801561065157600080fd5b506102f6610660366004615738565b61176d565b34801561067157600080fd5b506103bc611bc8565b34801561068657600080fd5b5061037b6106953660046155d9565b611d39565b3480156106a657600080fd5b5061037b6106b53660046155d9565b611dee565b3480156106c657600080fd5b5060d054610343906001600160a01b031681565b3480156106e657600080fd5b5060d254610343906001600160a01b031681565b34801561070657600080fd5b5060cf54610343906001600160a01b031681565b34801561072657600080fd5b506103bc610735366004615833565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b34801561076c57600080fd5b506103bc60d45481565b34801561078257600080fd5b506102f661079136600461571b565b611dfc565b3480156107a257600080fd5b5060cd54610343906001600160a01b031681565b3480156107c257600080fd5b506102f66107d136600461571b565b611ede565b3480156107e257600080fd5b506102f66107f136600461586c565b612074565b6102f66108043660046158f4565b612350565b34801561081557600080fd5b506103bc6108243660046158f4565b612549565b60d7546040516312440ccb60e01b81523360048201526001600160a01b03909116906312440ccb90602401602060405180830381865afa158015610871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108959190615955565b6108b957604051639522ebb960e01b81523360048201526024015b60405180910390fd5b60d7546040805163f679eda160e01b815290516000926001600160a01b03169163f679eda191600480830192869291908290030181865afa158015610902573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092a9190810190615977565b9050600060d760009054906101000a90046001600160a01b03166001600160a01b031663956c9da06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190615a06565b9050600060d760009054906101000a90046001600160a01b03166001600160a01b031663f52c67646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190615a06565b90508251600003610a4457604051630311631360e41b815260040160405180910390fd5b6000610a4e611bc8565b9050600060d760009054906101000a90046001600160a01b03166001600160a01b0316635c23aed66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac99190615a1f565b9050806001600160a01b031663ddc6326260cc60009054906101000a90046001600160a01b03166001600160a01b03166381a47ba96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b519190615a06565b6040518263ffffffff1660e01b8152600401610b6f91815260200190565b600060405180830381600087803b158015610b8957600080fd5b505af1158015610b9d573d6000803e3d6000fd5b50505050806001600160a01b031663ddc6326260cd60009054906101000a90046001600160a01b03166001600160a01b03166381a47ba96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c279190615a06565b6040518263ffffffff1660e01b8152600401610c4591815260200190565b600060405180830381600087803b158015610c5f57600080fd5b505af1158015610c73573d6000803e3d6000fd5b505060d2546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce69190615a06565b90506000612710610cf78388615a52565b610d019190615a71565b90506000612710610d128784615a52565b610d1c9190615a71565b90508015610da65760d754604080516328d87d0160e21b81529051610da6926001600160a01b03169163a361f4049160048083019260209291908290030181865afa158015610d6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d939190615a1f565b60d2546001600160a01b0316908361289f565b60d75460408051632caea76760e11b81529051610e32926001600160a01b03169163595d4ece9160048083019260209291908290030181865afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e159190615a1f565b610e1f8385615a93565b60d2546001600160a01b0316919061289f565b6000610e3e8385615a93565b9050600060d760009054906101000a90046001600160a01b03166001600160a01b031663725c9c496040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb99190615a1f565b60d25460405163095ea7b360e01b81526001600160a01b0380841660048301526024820186905292935091169063095ea7b3906044016020604051808303816000875af1158015610f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f329190615955565b506040516338ed173960e01b81526001600160a01b038216906338ed173990610f679085908f908f9030904290600401615aaa565b6000604051808303816000875af1158015610f86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fae9190810190615b1b565b50610fba8e8e8e612934565b6000610fc4611bc8565b9050878111610fe65760405163bfe2242360e01b815260040160405180910390fd5b60408051898152602081018390527fe6bb7c24aa843f59d79d6b94019e6ecc020b0f84209c95cfbda2bc22d629db91910160405180910390a1505050505050505050505050505050565b60606036805461103f90615ba1565b80601f016020809104026020016040519081016040528092919081815260200182805461106b90615ba1565b80156110b85780601f1061108d576101008083540402835291602001916110b8565b820191906000526020600020905b81548152906001019060200180831161109b57829003601f168201915b5050505050905090565b6000336110d0818585612ac8565b60019150505b92915050565b6000336110ea858285612bec565b6110f5858585612c78565b60019150505b9392505050565b6000333214801590611196575060d7546040517fffc97ce90000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039091169063ffc97ce990602401602060405180830381865afa158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190615955565b155b156111b657604051639522ebb960e01b81523360048201526024016108b0565b6111be612e75565b6002606554036112105760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108b0565b6002606555600061121f6113a5565b9050600061122b612ef1565b905034816040015161123d9190615a93565b604082015260d054611258906001600160a01b03168a61300d565b60d15461126e906001600160a01b03168961300d565b6000808061127e8789018961586c565b92509250925061128f838383612934565b5050506112a089898989868661312d565b60016065559998505050505050505050565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906110d090829086906112ec908790615bdb565b612ac8565b6000806112fc61158f565b6035546113099190615bdb565b90508060000361131a575090919050565b6110fb83611326611bc8565b83613393565b60006110d68261133a611bc8565b613441565b6097546001600160a01b031633146113995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b0565b6113a3600061347f565b565b6113de6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60ce5460408051636846c1ef60e01b815290516000926001600160a01b031691636846c1ef9160048083019260209291908290030181865afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190615a06565b9050600060cf60009054906101000a90046001600160a01b03166001600160a01b0316636846c1ef6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c79190615a06565b905060006114d4836134d1565b905060006114e1836134d1565b60cc5460d35460c954929350600092611504926001600160a01b03169190613588565b60cd5460d45460ca54929350600092611527926001600160a01b03169190613588565b90506040518060c0016040528083861161154257600061154c565b61154c8487615a93565b815260200183815260200187815260200182851161156b576000611575565b6115758386615a93565b815260200182815260200186815250965050505050505090565b60008060d554426115a09190615a93565b9050670de0b6b3a76400008160d760009054906101000a90046001600160a01b03166001600160a01b031663b192362a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116239190615a06565b6035546116309190615a52565b61163a9190615a52565b6116449190615a71565b91505090565b6097546001600160a01b031633146116a45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b0565b806001600160a01b031663f9bfd9076040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117069190615a06565b5060d780546001600160a01b0319166001600160a01b03831690811790915560405190815233907f4c4e26f7e535fa16e67156cd4fd4745854600b1d1a79a7cdf63f771cbc24a933906020015b60405180910390a250565b60606037805461103f90615ba1565b60006117796001613800565b90508015611791576000805461ff0019166101001790555b61179961391b565b6117a161398e565b6118258d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613a0192505050565b60cc80546001600160a01b03808c166001600160a01b0319928316811790935560cd8054918c169190921617905560408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa15801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b29190615a1f565b60d060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550876001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193a9190615a1f565b60d180546001600160a01b03199081166001600160a01b039384161790915560d28054821687841617905560ce805482168a841617905560cf8054821689841617905560cb8054821688841617905560d68054821686841617905560d7805490911684831617905560d0546119af9116613a76565b60c95560d1546119c7906001600160a01b0316613a76565b60ca5560cf5460408051635fcbd28560e01b815290516001600160a01b0390921691635fcbd285916004808201926020929091908290030181865afa158015611a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a389190615a1f565b60cb546001600160a01b039081169116141580611ada575060ce60009054906101000a90046001600160a01b03166001600160a01b0316635fcbd2856040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac79190615a1f565b60cb546001600160a01b03908116911614155b15611af857604051631d56588360e01b815260040160405180910390fd5b60d2546001600160a01b0316611b2157604051633112618760e21b815260040160405180910390fd5b60d6546001600160a01b0316611b4a57604051633112618760e21b815260040160405180910390fd5b60d7546001600160a01b0316611b7357604051633112618760e21b815260040160405180910390fd5b8015611bb9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b600080611ccb60cf60009054906101000a90046001600160a01b03166001600160a01b0316636846c1ef6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c459190615a06565b60ce60009054906101000a90046001600160a01b03166001600160a01b0316636846c1ef6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbc9190615a06565b611cc69190615bdb565b6134d1565b60cd5460d45460ca54929350600092611cee926001600160a01b03169190613588565b60cc5460d35460c954611d0b926001600160a01b03169190613588565b611d159190615bdb565b905080821015611d285760009250505090565b611d328183615a93565b9250505090565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919083811015611dd65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016108b0565b611de38286868403612ac8565b506001949350505050565b6000336110d0818585612c78565b6097546001600160a01b03163314611e565760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b0565b6001600160a01b038116611ed25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108b0565b611edb8161347f565b50565b6097546001600160a01b03163314611f385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b0565b60d054604051630681320d60e51b81526001600160a01b0391821660048201529082169063d02641a0906024016040805180830381865afa158015611f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa59190615bf3565b505060cb5460405163125d417960e11b8152670de0b6b3a764000060048201526001600160a01b039182166024820152908216906324ba82f2906044016040805180830381865afa158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120229190615bf3565b505060d680546001600160a01b0319166001600160a01b03831690811790915560405190815233907f13027f79696db4396ef144413ce4dcfeb9a142e11b5035a756171cf0a87102cd90602001611753565b60d7546040516309e81c6d60e31b81523360048201526001600160a01b0390911690634f40e36890602401602060405180830381865afa1580156120bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e09190615955565b6120ff57604051639522ebb960e01b81523360048201526024016108b0565b612107612e75565b60006121116113a5565b9050600061211d612ef1565b90506000826020015183600001516121359190615bdb565b905060008360800151846060015161214d9190615bdb565b90506000846060015185600001516121659190615bdb565b9050600060d760009054906101000a90046001600160a01b03166001600160a01b031663629694676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e09190615a06565b60208701519091506121f59061271090615a52565b6121ff8286615a52565b101580156122275750608086015161221a9061271090615a52565b6122248285615a52565b10155b15612245576040516352a729d560e01b815260040160405180910390fd5b612250898989612934565b600061225a611bc8565b90506122dd818460d760009054906101000a90046001600160a01b03166001600160a01b031663f9bfd9076040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d89190615a06565b613b2e565b6122fa5760405163ed73742f60e01b815260040160405180910390fd5b61230b86612306612ef1565b613b72565b60408051848152602081018390527fedfa59b02a4232c93ca4d57fcbbd75be9747bfa821007cfcd8f36528365ec4ce910160405180910390a150505050505050505050565b6097546001600160a01b031633146123aa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108b0565b60d3541515806123bb575060d45415155b156123d957604051632a5911df60e01b815260040160405180910390fd5b60d7805460ff60a01b19167401000000000000000000000000000000000000000017905560cc5460408051631c82490560e01b815290516001600160a01b0390921691631c824905916004808201926020929091908290030181865afa158015612447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246b9190615a06565b60d35560cd5460408051631c82490560e01b815290516001600160a01b0390921691631c824905916004808201926020929091908290030181865afa1580156124b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dc9190615a06565b60d4556124ed858533868686611102565b5060d7805460ff60a01b1916905560d35460d45460405133927fe2d052c98bda8dadf8c77273d35910976d1eaac81fdbf05b38b5ee4cf8742b229261253a92918252602082015260400190565b60405180910390a25050505050565b60003332148015906125dd575060d7546040517fffc97ce90000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039091169063ffc97ce990602401602060405180830381865afa1580156125b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125db9190615955565b155b156125fd57604051639522ebb960e01b81523360048201526024016108b0565b612605612e75565b6002606554036126575760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108b0565b6002606555600086900361267e57604051630fd5e85760e11b815260040160405180910390fd5b60006126886113a5565b90506000612694612ef1565b60d754604051633924f23360e01b81523360048201529192506000916001600160a01b0390911690633924f233906024016020604051808303816000875af11580156126e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127089190615955565b61278a5760d760009054906101000a90046001600160a01b03166001600160a01b03166304336bb36040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127859190615a06565b61278d565b60005b905060006127108a61279f8483615a93565b6127a99190615a52565b6127b39190615a71565b905060006127c0826112f1565b90506127cc338c613c49565b60d7546040805163698d92cb60e01b8152905161284a926001600160a01b03169163698d92cb9160048083019260209291908290030181865afa158015612817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283b9190615a1f565b612845848e615a93565b613d97565b6000808061285a8a8c018c61586c565b92509250925061286b838383612934565b50505061287c8b8b8b848989613e76565b60016065559b9a5050505050505050505050565b6001600160a01b03163b151590565b6040516001600160a01b03831660248201526044810182905261292f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614228565b505050565b8151835114158061294757508051835114155b15612965576040516306e2a74f60e31b815260040160405180910390fd5b60005b8351811015612ac257600084828151811061298557612985615c17565b60200260200101519050600160ff168160ff16036129bf576129bf8383815181106129b2576129b2615c17565b602002602001015161430d565b60011960ff821601612aaf5760d760009054906101000a90046001600160a01b03166001600160a01b031663ef3bac5e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a429190615a1f565b6001600160a01b031663d0e30db0858481518110612a6257612a62615c17565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a9557600080fd5b505af1158015612aa9573d6000803e3d6000fd5b50505050505b5080612aba81615c2d565b915050612968565b50505050565b6001600160a01b038316612b2a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016108b0565b6001600160a01b038216612b8b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016108b0565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152603460209081526040808320938616835292905220546000198114612ac25781811015612c6b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016108b0565b612ac28484848403612ac8565b6001600160a01b038316612cf45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016108b0565b6001600160a01b038216612d565760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016108b0565b6001600160a01b03831660009081526033602052604090205481811015612de55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016108b0565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290612e1c908490615bdb565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612e6891815260200190565b60405180910390a3612ac2565b60d754604080516245b61b60e81b81529051612eeb926001600160a01b0316916345b61b009160048083019260209291908290030181865afa158015612ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee39190615a1f565b61284561158f565b4260d555565b612f1560405180606001604052806000815260200160008152602001600081525090565b60408051606081019182905260d0546370a0823160e01b9092523060648201529081906001600160a01b03166370a0823160848301602060405180830381865afa158015612f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8b9190615a06565b815260d1546040516370a0823160e01b81523060048201526020909201916001600160a01b03909116906370a0823190602401602060405180830381865afa158015612fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fff9190615a06565b815260200147815250905090565b60d760009054906101000a90046001600160a01b03166001600160a01b031663ef3bac5e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130849190615a1f565b6001600160a01b0316826001600160a01b031603613114578034146130bc57604051631741454360e31b815260040160405180910390fd5b816001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156130f757600080fd5b505af115801561310b573d6000803e3d6000fd5b50505050505050565b6131296001600160a01b0383163330846144ce565b5050565b6000806131386113a5565b905060006131468286614506565b9050600060d760009054906101000a90046001600160a01b03166001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa15801561319d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c19190615a1f565b90506001600160a01b038116158015906132415750604051635886216f60e01b81523360048201526001600160a01b03821690635886216f90602401602060405180830381865afa15801561321a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323e9190615a06565b82115b1561325f57604051637f84ae1560e01b815260040160405180910390fd5b6000613279838860600151896000015161133a9190615bdb565b9050878110156132a657604051630968dbbb60e31b815260048101899052602481018290526044016108b0565b6132b08982613d97565b6132bb838886614590565b6132c786612306612ef1565b6001600160a01b0382161561333757604051630afe546360e21b8152336004820152602481018290526001600160a01b03831690632bf9518c90604401600060405180830381600087803b15801561331e57600080fd5b505af1158015613332573d6000803e3d6000fd5b505050505b60408051828152602081018d90529081018b90526001600160a01b038a169033907fab14747d46633612ff5c029a3117f98ffb6506ebf31bab40972f911b7dd188919060600160405180910390a39a9950505050505050505050565b60008080600019858709858702925082811083820303915050806000036133cc57600084116133c157600080fd5b5082900490506110fb565b8084116133d857600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008061344c61158f565b6035546134599190615bdb565b90508060000361346c57839150506110d6565b613477848285613393565b949350505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60d65460cb5460405163125d417960e11b8152600481018490526001600160a01b039182166024820152600092839283929116906324ba82f2906044015b6040805180830381865afa15801561352b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354f9190615bf3565b9092509050620151806135628242615a93565b111561358157604051634efe81e560e01b815260040160405180910390fd5b5092915050565b60405163133f757160e31b81526004810183905260009081906001600160a01b038616906399fbab8890602401606060405180830381865afa1580156135d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f69190615c46565b925050506000856001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561363a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365e9190615a1f565b90506000866001600160a01b03166376c46b7b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c49190615a06565b9050806000036136f4576136ea6136da836148ed565b6136e48786615a52565b90614926565b93505050506110fb565b604051632fc11c0f60e01b8152600060048201819052906001600160a01b03891690632fc11c0f90602401602060405180830381865afa15801561373c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137609190615a06565b886001600160a01b0316630a355d7d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561379e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c29190615a06565b6137cc9190615bdb565b905060006137db858385613393565b90506137f36137e9856148ed565b6136e48984615a52565b9998505050505050505050565b60008054610100900460ff161561388e578160ff1660011480156138235750303b155b6138865760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108b0565b506000919050565b60005460ff8084169116106138fc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108b0565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166139865760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108b0565b6113a361493b565b600054610100900460ff166139f95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108b0565b6113a36149af565b600054610100900460ff16613a6c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108b0565b6131298282614a21565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613adb9190615c89565b60ff1690506012811115613b05576040516305a2eafd60e51b8152600481018290526024016108b0565b80601203613b165750600192915050565b6000613b23826012615a93565b61347790600a615d8a565b600080613b3b8585614ab3565b9050613b478184615a52565b613b518686614aca565b613b5b9083615a93565b613b6790612710615a52565b111595945050505050565b815181511015613bb55760d054825182516040516337258c1960e01b81526001600160a01b039093166004840152602483019190915260448201526064016108b0565b816020015181602001511015613c045760d154602083810151908301516040516337258c1960e01b81526001600160a01b039093166004840152602483019190915260448201526064016108b0565b816040015181604001511015613129576040808301518282015191516337258c1960e01b815260006004820152602481019190915260448101919091526064016108b0565b6001600160a01b038216613ca95760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016108b0565b6001600160a01b03821660009081526033602052604090205481811015613d1d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016108b0565b6001600160a01b0383166000908152603360205260408120838303905560358054849290613d4c908490615a93565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b038216613ded5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016108b0565b8060356000828254613dff9190615bdb565b90915550506001600160a01b03821660009081526033602052604081208054839290613e2c908490615bdb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600080613e816113a5565b90506000613e8d612ef1565b9050600060d760009054906101000a90046001600160a01b03166001600160a01b031663ef3bac5e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f089190615a1f565b60d0546001600160a01b03908116911614613f305784518251613f2b9190615a93565b613f44565b84604001518260400151613f449190615a93565b9050600060d760009054906101000a90046001600160a01b03166001600160a01b031663ef3bac5e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fbf9190615a1f565b60d1546001600160a01b03908116911614613fed5785602001518360200151613fe89190615a93565b614001565b856040015183604001516140019190615a93565b9050898210156140415760d054604051637e318ff960e11b81526001600160a01b039091166004820152602481018b9052604481018390526064016108b0565b8881101561407f5760d154604051637e318ff960e11b81526001600160a01b039091166004820152602481018a9052604481018290526064016108b0565b600061408b8886614506565b9050808910156140b8576040516389454dc160e01b815260048101829052602481018a90526044016108b0565b6140c3898987614ad9565b6140cd8785613b72565b60d0546140e59033906001600160a01b031685614dc0565b60d1546140fd9033906001600160a01b031684614dc0565b60d7546040805163f77c479160e01b815290516000926001600160a01b03169163f77c47919160048083019260209291908290030181865afa158015614147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061416b9190615a1f565b90506001600160a01b038116156141dd5760405163ccad973d60e01b8152326004820152602481018e90526001600160a01b0382169063ccad973d90604401600060405180830381600087803b1580156141c457600080fd5b505af11580156141d8573d6000803e3d6000fd5b505050505b604080518581526020810185905233917fda9a10d7b992511ddadbfc7ff712c1424ce2058bbcdac8c9876d6f8de590d43f910160405180910390a2509b9a5050505050505050505050565b600061427d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614e6d9092919063ffffffff16565b80519091501561292f578080602001905181019061429b9190615955565b61292f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108b0565b60d354158061431c575060d454155b1561433a57604051633f8ef80760e01b815260040160405180910390fd5b6000806000806000806000878060200190518101906143599190615d96565b965096509650965096509650965060d760149054906101000a900460ff1660ff166001141580156143c9575060cc546001600160a01b0388811691161480156143a3575060d35486145b806143c7575060cd546001600160a01b0388811691161480156143c7575060d45486145b155b156143f9576040516325c502df60e01b81526001600160a01b0388166004820152602481018790526044016108b0565b60d054614412906001600160a01b031688600019614e7c565b60d15461442b906001600160a01b031688600019614e7c565b60405163d72ef77160e01b81526001600160a01b0388169063d72ef7719061446190899089908990899089908990600401615e5e565b600060405180830381600087803b15801561447b57600080fd5b505af115801561448f573d6000803e3d6000fd5b505060d0546144ac92506001600160a01b03169050886000614e7c565b60d1546144c4906001600160a01b0316886000614e7c565b5050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612ac29085906323b872dd60e01b906084016128cb565b6000808260a00151836040015161451d9190615bdb565b8460a0015185604001516145319190615bdb565b61453b9190615a93565b90506000836080015184602001516145539190615bdb565b856080015186602001516145679190615bdb565b6145719190615a93565b90508061457d836134d1565b6145879190615a93565b95945050505050565b60d7546040805163f9bfd90760e01b815290516000926001600160a01b03169163f9bfd9079160048083019260209291908290030181865afa1580156145da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145fe9190615a06565b9050600060d760009054906101000a90046001600160a01b03166001600160a01b031663e592c5fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146799190615c89565b90506000836080015184606001518560200151866000015161469b9190615bdb565b6146a59190615bdb565b6146af9190615bdb565b60d754604051633582406160e01b8152600481018390529192506001600160a01b031690633582406190602401602060405180830381865afa1580156146f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061471d9190615955565b61473a576040516308b2d32960e11b815260040160405180910390fd5b600060026147488482615ea4565b6147529190615ec5565b60ff16614760600285615ec5565b61476d9060ff1689615a52565b6147779190615a71565b9050600060026147878582615ea4565b6147919190615ec5565b60ff168460ff16896147a39190615a52565b6147ad9190615a71565b90506000876020015187602001516147c59190615a93565b90506000886080015188608001516147dd9190615a93565b90506000826147f98b604001518b60400151611cc69190615a93565b6148039190615a93565b905060008261481f8c60a001518c60a00151611cc69190615a93565b6148299190615a93565b905061483682878b613b2e565b158061484a575061484881868b613b2e565b155b156148685760405163bfe2242360e01b815260040160405180910390fd5b600061487560018a615ec5565b6148829060ff1688615a52565b9050600061489160018b615ec5565b61489e9060ff1688615a52565b90506148ab86838d613b2e565b15806148bf57506148bd85828d613b2e565b155b156148dd57604051638cc3aa7d60e01b815260040160405180910390fd5b5050505050505050505050505050565b60d654604051630681320d60e51b81526001600160a01b038381166004830152600092839283929091169063d02641a09060240161350f565b60006110fb8383670de0b6b3a7640000614f98565b600054610100900460ff166149a65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108b0565b6113a33361347f565b600054610100900460ff16614a1a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108b0565b6001606555565b600054610100900460ff16614a8c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108b0565b8151614a9f9060369060208501906151f5565b50805161292f9060379060208401906151f5565b600081831015614ac357816110fb565b5090919050565b6000818310614ac357816110fb565b60d7546040805163f9bfd90760e01b815290516000926001600160a01b03169163f9bfd9079160048083019260209291908290030181865afa158015614b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b479190615a06565b9050600060d760009054906101000a90046001600160a01b03166001600160a01b03166364facdd56040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bc29190615a06565b9050600084606001518560000151614bda9190615bdb565b90506000614bf585604001518760400151611cc69190615a93565b9050614c358286602001518860200151614c0f9190615a93565b614c199084615a93565b614c239190615a52565b8751614c2f908a615a52565b86613b2e565b614c525760405163ed73742f60e01b815260040160405180910390fd5b6000614c6b8660a001518860a00151611cc69190615a93565b9050614cae8387608001518960800151614c859190615a93565b614c8f9084615a93565b614c999190615a52565b6060890151614ca8908b615a52565b87613b2e565b614ccb5760405163ed73742f60e01b815260040160405180910390fd5b60208701518751600091614cde91615bdb565b9050600087602001518860000151614cf69190615bdb565b9050614d20886020015183614d0b9190615a52565b60208b0151614d1a9084615a52565b88613b2e565b614d3d5760405163b025d75560e01b815260040160405180910390fd5b600089608001518a60600151614d539190615bdb565b9050600089608001518a60600151614d6b9190615bdb565b9050614d958a6080015183614d809190615a52565b60808d0151614d8f9084615a52565b8a613b2e565b614db25760405163b025d75560e01b815260040160405180910390fd5b505050505050505050505050565b60d760009054906101000a90046001600160a01b03166001600160a01b031663ef3bac5e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e379190615a1f565b6001600160a01b0316826001600160a01b031603614e595761292f8382614fb7565b61292f6001600160a01b038316848361289f565b60606134778484600085615074565b801580614ef65750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015614ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ef49190615a06565b155b614f685760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016108b0565b6040516001600160a01b03831660248201526044810182905261292f90849063095ea7b360e01b906064016128cb565b828202811515841585830485141716614fb057600080fd5b0492915050565b604080516000808252602082019092526001600160a01b038416908390604051614fe19190615ee8565b60006040518083038185875af1925050503d806000811461501e576040519150601f19603f3d011682016040523d82523d6000602084013e615023565b606091505b505090508061292f5760405162461bcd60e51b815260206004820152601060248201527f21736166655472616e736665724554480000000000000000000000000000000060448201526064016108b0565b6060824710156150ec5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016108b0565b6001600160a01b0385163b6151435760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108b0565b600080866001600160a01b0316858760405161515f9190615ee8565b60006040518083038185875af1925050503d806000811461519c576040519150601f19603f3d011682016040523d82523d6000602084013e6151a1565b606091505b50915091506151b18282866151bc565b979650505050505050565b606083156151cb5750816110fb565b8251156151db5782518084602001fd5b8160405162461bcd60e51b81526004016108b091906155a6565b82805461520190615ba1565b90600052602060002090601f0160209004810192826152235760008555615269565b82601f1061523c57805160ff1916838001178555615269565b82800160010185558215615269579182015b8281111561526957825182559160200191906001019061524e565b50615275929150615279565b5090565b5b80821115615275576000815560010161527a565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156152cd576152cd61528e565b604052919050565b600067ffffffffffffffff8211156152ef576152ef61528e565b5060051b60200190565b60ff81168114611edb57600080fd5b600082601f83011261531957600080fd5b8135602061532e615329836152d5565b6152a4565b82815260059290921b8401810191818101908684111561534d57600080fd5b8286015b84811015615371578035615364816152f9565b8352918301918301615351565b509695505050505050565b600082601f83011261538d57600080fd5b8135602061539d615329836152d5565b82815260059290921b840181019181810190868411156153bc57600080fd5b8286015b8481101561537157803583529183019183016153c0565b600067ffffffffffffffff8211156153f1576153f161528e565b50601f01601f191660200190565b600082601f83011261541057600080fd5b81356020615420615329836152d5565b82815260059290921b8401810191818101908684111561543f57600080fd5b8286015b8481101561537157803567ffffffffffffffff8111156154635760008081fd5b8701603f810189136154755760008081fd5b848101356040615487615329836153d7565b8281528b8284860101111561549c5760008081fd5b8282850189830137600092810188019290925250845250918301918301615443565b600080600080608085870312156154d457600080fd5b843567ffffffffffffffff808211156154ec57600080fd5b6154f888838901615308565b9550602087013591508082111561550e57600080fd5b61551a8883890161537c565b9450604087013591508082111561553057600080fd5b5061553d878288016153ff565b949793965093946060013593505050565b60005b83811015615569578181015183820152602001615551565b83811115612ac25750506000910152565b6000815180845261559281602086016020860161554e565b601f01601f19169290920160200192915050565b6020815260006110fb602083018461557a565b6001600160a01b0381168114611edb57600080fd5b8035613916816155b9565b600080604083850312156155ec57600080fd5b82356155f7816155b9565b946020939093013593505050565b60008060006060848603121561561a57600080fd5b8335615625816155b9565b92506020840135615635816155b9565b929592945050506040919091013590565b60008083601f84011261565857600080fd5b50813567ffffffffffffffff81111561567057600080fd5b60208301915083602082850101111561568857600080fd5b9250929050565b60008060008060008060a087890312156156a857600080fd5b863595506020870135945060408701356156c1816155b9565b935060608701359250608087013567ffffffffffffffff8111156156e457600080fd5b6156f089828a01615646565b979a9699509497509295939492505050565b60006020828403121561571457600080fd5b5035919050565b60006020828403121561572d57600080fd5b81356110fb816155b9565b6000806000806000806000806000806000806101408d8f03121561575b57600080fd5b67ffffffffffffffff8d35111561577157600080fd5b61577e8e8e358f01615646565b909c509a5067ffffffffffffffff60208e0135111561579c57600080fd5b6157ac8e60208f01358f01615646565b909a5098506157bd60408e016155ce565b97506157cb60608e016155ce565b96506157d960808e016155ce565b95506157e760a08e016155ce565b94506157f560c08e016155ce565b935061580360e08e016155ce565b92506158126101008e016155ce565b91506158216101208e016155ce565b90509295989b509295989b509295989b565b6000806040838503121561584657600080fd5b8235615851816155b9565b91506020830135615861816155b9565b809150509250929050565b60008060006060848603121561588157600080fd5b833567ffffffffffffffff8082111561589957600080fd5b6158a587838801615308565b945060208601359150808211156158bb57600080fd5b6158c78783880161537c565b935060408601359150808211156158dd57600080fd5b506158ea868287016153ff565b9150509250925092565b60008060008060006080868803121561590c57600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff81111561593857600080fd5b61594488828901615646565b969995985093965092949392505050565b60006020828403121561596757600080fd5b815180151581146110fb57600080fd5b6000602080838503121561598a57600080fd5b825167ffffffffffffffff8111156159a157600080fd5b8301601f810185136159b257600080fd5b80516159c0615329826152d5565b81815260059190911b820183019083810190878311156159df57600080fd5b928401925b828410156151b15783516159f7816155b9565b825292840192908401906159e4565b600060208284031215615a1857600080fd5b5051919050565b600060208284031215615a3157600080fd5b81516110fb816155b9565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615615a6c57615a6c615a3c565b500290565b600082615a8e57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015615aa557615aa5615a3c565b500390565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015615afa5784516001600160a01b031683529383019391830191600101615ad5565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215615b2e57600080fd5b825167ffffffffffffffff811115615b4557600080fd5b8301601f81018513615b5657600080fd5b8051615b64615329826152d5565b81815260059190911b82018301908381019087831115615b8357600080fd5b928401925b828410156151b157835182529284019290840190615b88565b600181811c90821680615bb557607f821691505b602082108103615bd557634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115615bee57615bee615a3c565b500190565b60008060408385031215615c0657600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b600060018201615c3f57615c3f615a3c565b5060010190565b600080600060608486031215615c5b57600080fd5b8351615c66816155b9565b6020850151909350615c77816155b9565b80925050604084015190509250925092565b600060208284031215615c9b57600080fd5b81516110fb816152f9565b600181815b80851115615ce1578160001904821115615cc757615cc7615a3c565b80851615615cd457918102915b93841c9390800290615cab565b509250929050565b600082615cf8575060016110d6565b81615d05575060006110d6565b8160018114615d1b5760028114615d2557615d41565b60019150506110d6565b60ff841115615d3657615d36615a3c565b50506001821b6110d6565b5060208310610133831016604e8410600b8410161715615d64575081810a6110d6565b615d6e8383615ca6565b8060001904821115615d8257615d82615a3c565b029392505050565b60006110fb8383615ce9565b600080600080600080600060e0888a031215615db157600080fd5b8751615dbc816155b9565b602089015160408a01519198509650615dd4816155b9565b80955050606088015193506080880151925060a0880151915060c088015167ffffffffffffffff811115615e0757600080fd5b8801601f81018a13615e1857600080fd5b8051615e26615329826153d7565b8181528b6020838501011115615e3b57600080fd5b615e4c82602083016020860161554e565b80935050505092959891949750929550565b8681526001600160a01b038616602082015284604082015283606082015282608082015260c060a08201526000615e9860c083018461557a565b98975050505050505050565b600060ff821660ff84168160ff0481118215151615615d8257615d82615a3c565b600060ff821660ff841680821015615edf57615edf615a3c565b90039392505050565b60008251615efa81846020870161554e565b919091019291505056fea164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,uint256,address,uint256,bytes)": {
        "params": {
          "_assetTokenAmount": "Amount of asset token transfer to vault.",
          "_data": "The calldata to pass along to the proxy action for more working context.",
          "_minShareReceive": "Minimum share that _shareReceiver must receive.",
          "_shareReceiver": "Addresses to be receive share.",
          "_stableTokenAmount": "Amount of stable token transfer to vault."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initPositions(uint256,uint256,uint256,bytes)": {
        "params": {
          "_assetTokenAmount": "Amount of asset token transfer to vault.",
          "_data": "The calldata to pass along to the proxy action for more working context.",
          "_minShareReceive": "Minimum share that _shareReceiver must receive.",
          "_stableTokenAmount": "Amount of stable token transfer to vault."
        }
      },
      "initialize(string,string,address,address,address,address,address,address,address,address)": {
        "params": {
          "_alpacaToken": "Alpaca token address.",
          "_assetVault": "Address of asset vault.",
          "_config": "The address of delta neutral vault config.",
          "_lpToken": "Address stable and asset token pair.",
          "_name": "Name.",
          "_priceOracle": "DeltaNeutralOracle address.",
          "_stableVault": "Address of stable vault.",
          "_stableVaultWorker": "Address of asset worker.",
          "_symbol": "Symbol."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rebalance(uint8[],uint256[],bytes[])": {
        "params": {
          "_actions": "List of actions to execute.",
          "_datas": "The calldata to pass along for more working context.",
          "_values": "Native token amount."
        }
      },
      "reinvest(uint8[],uint256[],bytes[],uint256)": {
        "params": {
          "_actions": "List of actions to execute.",
          "_datas": "The calldata to pass along for more working context.",
          "_minTokenReceive": "Minimum token received when swap reward.",
          "_values": "Native token amount."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDeltaNeutralOracle(address)": {
        "params": {
          "_newPriceOracle": "New deltaNeutralOracle address."
        }
      },
      "setDeltaNeutralVaultConfig(address)": {
        "params": {
          "_newVaultConfig": "New deltaNeutralOracle address."
        }
      },
      "shareToValue(uint256)": {
        "params": {
          "_shareAmount": "Amount of share."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "valueToShare(uint256)": {
        "params": {
          "_value": "value in usd."
        }
      },
      "withdraw(uint256,uint256,uint256,bytes)": {
        "params": {
          "_data": "The calldata to pass along to the proxy action for more working context.",
          "_minAssetTokenAmount": "Minimum asset token shareOwner expect to receive.",
          "_minStableTokenAmount": "Minimum stable token shareOwner expect to receive.",
          "_shareAmount": "Amount of share to withdraw from vault."
        }
      }
    },
    "title": "DeltaNeutralVault02 is designed to take a long and short position in an asset at the same time to cancel out the effect on the out-standing portfolio when the asset’s price moves. Moreover, DeltaNeutralVault02 support credit-dependent limit access",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,uint256,address,uint256,bytes)": {
        "notice": "Deposit to delta neutral vault."
      },
      "initPositions(uint256,uint256,uint256,bytes)": {
        "notice": "initialize delta neutral vault positions."
      },
      "initialize(string,string,address,address,address,address,address,address,address,address)": {
        "notice": "Initialize Delta Neutral vault."
      },
      "pendingManagementFee()": {
        "notice": "Return amount of share pending for minting as a form of management fee"
      },
      "positionInfo()": {
        "notice": "Return equity and debt value in usd of stable and asset positions."
      },
      "rebalance(uint8[],uint256[],bytes[])": {
        "notice": "Rebalance stable and asset positions."
      },
      "reinvest(uint8[],uint256[],bytes[],uint256)": {
        "notice": "Reinvest fund to stable and asset positions."
      },
      "setDeltaNeutralOracle(address)": {
        "notice": "Set new DeltaNeutralOracle."
      },
      "setDeltaNeutralVaultConfig(address)": {
        "notice": "Set new DeltaNeutralVaultConfig."
      },
      "shareToValue(uint256)": {
        "notice": "Return the value of share from the given share amount."
      },
      "totalEquityValue()": {
        "notice": "Return equity value of delta neutral position."
      },
      "valueToShare(uint256)": {
        "notice": "Return the amount of share from the given value."
      },
      "withdraw(uint256,uint256,uint256,bytes)": {
        "notice": "Withdraw from delta neutral vault."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1546,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 343,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 349,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 351,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 353,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 355,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 934,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 279,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 323,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2161,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "stableTo18ConversionFactor",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 2163,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "assetTo18ConversionFactor",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 2165,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "lpToken",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 2167,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "stableVault",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 2169,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "assetVault",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 2171,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "stableVaultWorker",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 2173,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "assetVaultWorker",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 2175,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "stableToken",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 2177,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "assetToken",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 2179,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "alpacaToken",
        "offset": 0,
        "slot": "210",
        "type": "t_address"
      },
      {
        "astId": 2181,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "stableVaultPosId",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 2183,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "assetVaultPosId",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 2185,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "lastFeeCollected",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 2188,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "priceOracle",
        "offset": 0,
        "slot": "214",
        "type": "t_contract(IDeltaNeutralOracle)5736"
      },
      {
        "astId": 2191,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "config",
        "offset": 0,
        "slot": "215",
        "type": "t_contract(IDeltaNeutralVaultConfig02)5973"
      },
      {
        "astId": 2193,
        "contract": "contracts/DeltaNeutralVault02.sol:DeltaNeutralVault02",
        "label": "OPENING",
        "offset": 20,
        "slot": "215",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDeltaNeutralOracle)5736": {
        "encoding": "inplace",
        "label": "contract IDeltaNeutralOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IDeltaNeutralVaultConfig02)5973": {
        "encoding": "inplace",
        "label": "contract IDeltaNeutralVaultConfig02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}