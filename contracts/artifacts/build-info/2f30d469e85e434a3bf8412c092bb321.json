{
	"id": "2f30d469e85e434a3bf8412c092bb321",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/xALPACAPriceSetter.sol": {
				"content": "// SPDX-License-Identifier: BUSL\r\n/**\r\n  ∩~~~~∩ \r\n  ξ ･×･ ξ \r\n  ξ　~　ξ \r\n  ξ　　 ξ \r\n  ξ　　 “~～~～〇 \r\n  ξ　　　　　　 ξ \r\n  ξ ξ ξ~～~ξ ξ ξ \r\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\r\nAlpaca Fin Corporation\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nimport { IxALPACACreditor } from \"./interfaces/IxALPACACreditor.sol\";\r\nimport { ITWAPOracle } from \"./interfaces/ITWAPOracle.sol\";\r\n\r\n/// @title xALPACAPriceSetter - Being setter of xALPACACreditor\r\ncontract xALPACAPriceSetter is OwnableUpgradeable {\r\n  // --- Events ---\r\n  event LogSetValueFromTWAP(address indexed _caller, uint256 _xALPACAValue);\r\n  event LogSetPriceSetter(address indexed _caller, address indexed _priceSetter);\r\n\r\n  // --- Errors ---\r\n  error xALPACAPriceSetter_Unauthorize();\r\n\r\n  // --- States ---\r\n  IxALPACACreditor public xALPACACreditor;\r\n  ITWAPOracle public TWAPOracle;\r\n  address public alpaca;\r\n  address public priceSetter;\r\n  \r\n  /// @notice Initialize xALPACAPriceSetter\r\n  /// @param _xALPACACreditor xALPACreditor\r\n  /// @param _TWAPOracle TWAPOracle\r\n  /// @param _alpaca Contract's address of ALPACA Token\r\n  function initialize(IxALPACACreditor _xALPACACreditor, ITWAPOracle _TWAPOracle, address _alpaca) external initializer {\r\n\r\n    OwnableUpgradeable.__Ownable_init();\r\n    xALPACACreditor = IxALPACACreditor(_xALPACACreditor);\r\n    TWAPOracle = _TWAPOracle;\r\n    alpaca = _alpaca;\r\n  }\r\n\r\n  function setPriceSetter(address _priceSetter) external onlyOwner {\r\n    priceSetter = _priceSetter;\r\n    emit LogSetPriceSetter(msg.sender, _priceSetter);\r\n  }\r\n\r\n  /// @notice Set ALPACA Value (TWAP) as xALPACA Value\r\n  function setValueFromTWAP() external {\r\n    if (msg.sender != priceSetter) {\r\n      revert xALPACAPriceSetter_Unauthorize();\r\n    }\r\n\r\n    uint256 _xALPACAValue = TWAPOracle.getPrice(alpaca);\r\n    xALPACACreditor.setValuePerxALPACA(_xALPACAValue);\r\n\r\n    emit LogSetValueFromTWAP(msg.sender, _xALPACAValue);\r\n  }\r\n\r\n}"
			},
			"contracts/interfaces/ITWAPOracle.sol": {
				"content": "// SPDX-License-Identifier: BUSL\r\n/**\r\n  ∩~~~~∩ \r\n  ξ ･×･ ξ \r\n  ξ　~　ξ \r\n  ξ　　 ξ \r\n  ξ　　 “~～~～〇 \r\n  ξ　　　　　　 ξ \r\n  ξ ξ ξ~～~ξ ξ ξ \r\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\r\nAlpaca Fin Corporation\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface ITWAPOracle {\r\n  function getPrice(address _tokenAddress) external view returns (uint256);\r\n}"
			},
			"contracts/interfaces/IxALPACACreditor.sol": {
				"content": "// SPDX-License-Identifier: BUSL\r\n/**\r\n  ∩~~~~∩ \r\n  ξ ･×･ ξ \r\n  ξ　~　ξ \r\n  ξ　　 ξ \r\n  ξ　　 “~～~～〇 \r\n  ξ　　　　　　 ξ \r\n  ξ ξ ξ~～~ξ ξ ξ \r\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\r\nAlpaca Fin Corporation\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IxALPACACreditor {\r\n  function getUserCredit(address _user) external view returns (uint256);\r\n\r\n  function setValuePerxALPACA(uint256 _newValuePerxALPACA) external;\r\n\r\n  function setValueSetter(address _newValueSetter) external;\r\n\r\n  function valuePerxALPACA() external view returns (uint256);\r\n}"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7\",\"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 549,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 122,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:7316  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:7316  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220406a3fa3a1e38b40e9c4b5ab104d07372148dde73244eefccfdc2d05a615b15764736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220406a3fa3a1e38b40e9c4b5ab104d07372148dde73244eefccfdc2d05a615b15764736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH PUSH11 0x3FA3A1E38B40E9C4B5AB10 0x4D SMOD CALLDATACOPY 0x21 BASEFEE 0xDD 0xE7 ORIGIN DIFFICULTY 0xEE 0xFC 0xCF 0xDC 0x2D SDIV 0xA6 ISZERO 0xB1 JUMPI PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "194:7122:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:7122:2;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220406a3fa3a1e38b40e9c4b5ab104d07372148dde73244eefccfdc2d05a615b15764736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH PUSH11 0x3FA3A1E38B40E9C4B5AB10 0x4D SMOD CALLDATACOPY 0x21 BASEFEE 0xDD 0xE7 ORIGIN DIFFICULTY 0xEE 0xFC 0xCF 0xDC 0x2D SDIV 0xA6 ISZERO 0xB1 JUMPI PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "194:7122:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220406a3fa3a1e38b40e9c4b5ab104d07372148dde73244eefccfdc2d05a615b15764736f6c634300080d0033",
									".code": [
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 549,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/ITWAPOracle.sol": {
				"ITWAPOracle": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_tokenAddress",
									"type": "address"
								}
							],
							"name": "getPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getPrice(address)": "41976e09"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ITWAPOracle.sol\":\"ITWAPOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ITWAPOracle.sol\":{\"keccak256\":\"0x2ce5968e52ea2a2d9375369d1741e4bb62c1c556bdb491a45549acb7030fd483\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://2f95baa4ddab8f7652c660924962c2ee05cac0ea960fd1289c587f7b47fa7531\",\"dweb:/ipfs/QmPvhADjozUfAcgBPAAfu72vxqwgPcyC9djzST7ayTEq4d\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/IxALPACACreditor.sol": {
				"IxALPACACreditor": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "getUserCredit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_newValuePerxALPACA",
									"type": "uint256"
								}
							],
							"name": "setValuePerxALPACA",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_newValueSetter",
									"type": "address"
								}
							],
							"name": "setValueSetter",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "valuePerxALPACA",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getUserCredit(address)": "dad6f0dc",
							"setValuePerxALPACA(uint256)": "cd946ba8",
							"setValueSetter(address)": "b6df14ab",
							"valuePerxALPACA()": "2ba4f0a2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValuePerxALPACA\",\"type\":\"uint256\"}],\"name\":\"setValuePerxALPACA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newValueSetter\",\"type\":\"address\"}],\"name\":\"setValueSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valuePerxALPACA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IxALPACACreditor.sol\":\"IxALPACACreditor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IxALPACACreditor.sol\":{\"keccak256\":\"0xa2f0c7cac5a889c3dbd622fb1bf895456707ae274f252538056d46589743b437\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://a91a269562ef5e2ba57c2d10f290759ae269b92c72214217ef651a2cb1a30878\",\"dweb:/ipfs/QmYJUX8x2km2s5ULZErqqwALXtJ3ovtU2yiaSA6nNU2ZYg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/xALPACAPriceSetter.sol": {
				"xALPACAPriceSetter": {
					"abi": [
						{
							"inputs": [],
							"name": "xALPACAPriceSetter_Unauthorize",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_caller",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_priceSetter",
									"type": "address"
								}
							],
							"name": "LogSetPriceSetter",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_caller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_xALPACAValue",
									"type": "uint256"
								}
							],
							"name": "LogSetValueFromTWAP",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "TWAPOracle",
							"outputs": [
								{
									"internalType": "contract ITWAPOracle",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "alpaca",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IxALPACACreditor",
									"name": "_xALPACACreditor",
									"type": "address"
								},
								{
									"internalType": "contract ITWAPOracle",
									"name": "_TWAPOracle",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_alpaca",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "priceSetter",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_priceSetter",
									"type": "address"
								}
							],
							"name": "setPriceSetter",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "setValueFromTWAP",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "xALPACACreditor",
							"outputs": [
								{
									"internalType": "contract IxALPACACreditor",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"initialize(address,address,address)": {
								"params": {
									"_TWAPOracle": "TWAPOracle",
									"_alpaca": "Contract's address of ALPACA Token",
									"_xALPACACreditor": "xALPACreditor"
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"title": "xALPACAPriceSetter - Being setter of xALPACACreditor",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/xALPACAPriceSetter.sol\":579:2053  contract xALPACAPriceSetter is OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/xALPACAPriceSetter.sol\":579:2053  contract xALPACAPriceSetter is OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x94faab23\n      gt\n      tag_13\n      jumpi\n      dup1\n      0x94faab23\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xc0c53b8b\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xcab0d816\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xd0b373b3\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_13:\n      dup1\n      0x2c09bef7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x34d29f05\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x63791e3c\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/xALPACAPriceSetter.sol\":1009:1035  address public priceSetter */\n    tag_3:\n      sload(0x68)\n      tag_14\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_14:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":178:210   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":160:211   */\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"contracts/xALPACAPriceSetter.sol\":1009:1035  address public priceSetter */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/xALPACAPriceSetter.sol\":905:944  IxALPACACreditor public xALPACACreditor */\n    tag_4:\n      sload(0x65)\n      tag_14\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/xALPACAPriceSetter.sol\":1515:1674  function setPriceSetter(address _priceSetter) external onlyOwner {... */\n    tag_5:\n      tag_22\n      tag_23\n      calldatasize\n      0x04\n      tag_24\n      jump\t// in\n    tag_23:\n      tag_25\n      jump\t// in\n    tag_22:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1908:2009  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      tag_22\n      tag_27\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1276:1361  function owner() public view virtual returns (address) {... */\n    tag_7:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1276:1361  function owner() public view virtual returns (address) {... */\n      jump(tag_14)\n        /* \"contracts/xALPACAPriceSetter.sol\":983:1004  address public alpaca */\n    tag_8:\n      sload(0x67)\n      tag_14\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/xALPACAPriceSetter.sol\":1228:1509  function initialize(IxALPACACreditor _xALPACACreditor, ITWAPOracle _TWAPOracle, address _alpaca) external initializer {... */\n    tag_9:\n      tag_22\n      tag_35\n      calldatasize\n      0x04\n      tag_36\n      jump\t// in\n    tag_35:\n      tag_37\n      jump\t// in\n        /* \"contracts/xALPACAPriceSetter.sol\":949:978  ITWAPOracle public TWAPOracle */\n    tag_10:\n      sload(0x66)\n      tag_14\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/xALPACAPriceSetter.sol\":1736:2048  function setValueFromTWAP() external {... */\n    tag_11:\n      tag_22\n      tag_43\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2158:2356  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_12:\n      tag_22\n      tag_45\n      calldatasize\n      0x04\n      tag_24\n      jump\t// in\n    tag_45:\n      tag_46\n      jump\t// in\n        /* \"contracts/xALPACAPriceSetter.sol\":1515:1674  function setPriceSetter(address _priceSetter) external onlyOwner {... */\n    tag_25:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_51\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_52\n      swap1\n      tag_53\n      jump\t// in\n    tag_52:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_51:\n        /* \"contracts/xALPACAPriceSetter.sol\":1587:1598  priceSetter */\n      0x68\n        /* \"contracts/xALPACAPriceSetter.sol\":1587:1613  priceSetter = _priceSetter */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      and\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/xALPACAPriceSetter.sol\":1625:1668  LogSetPriceSetter(msg.sender, _priceSetter) */\n      mload(0x40)\n        /* \"contracts/xALPACAPriceSetter.sol\":1643:1653  msg.sender */\n      caller\n      swap1\n        /* \"contracts/xALPACAPriceSetter.sol\":1625:1668  LogSetPriceSetter(msg.sender, _priceSetter) */\n      0x73ac14f6c6f83ac21ceaedde9a348f537e8dcd3931f90b9cf101f14e534f735c\n      swap1\n      0x00\n      swap1\n      log3\n        /* \"contracts/xALPACAPriceSetter.sol\":1515:1674  function setPriceSetter(address _priceSetter) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1908:2009  function renounceOwnership() public virtual onlyOwner {... */\n    tag_27:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_58\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_52\n      swap1\n      tag_53\n      jump\t// in\n    tag_58:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1972:2002  _transferOwnership(address(0)) */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1999:2000  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1972:1990  _transferOwnership */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1972:2002  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_61:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1908:2009  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/xALPACAPriceSetter.sol\":1228:1509  function initialize(IxALPACACreditor _xALPACACreditor, ITWAPOracle _TWAPOracle, address _alpaca) external initializer {... */\n    tag_37:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3111:3130  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3158  _setInitializedVersion(1) */\n      tag_65\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3156:3157  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3155  _setInitializedVersion */\n      tag_66\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3158  _setInitializedVersion(1) */\n      jump\t// in\n    tag_65:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3111:3158  bool isTopLevelCall = _setInitializedVersion(1) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3172:3186  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3168:3233  if (isTopLevelCall) {... */\n      iszero\n      tag_67\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3202:3215  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3202:3222  _initializing = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3168:3233  if (isTopLevelCall) {... */\n    tag_67:\n        /* \"contracts/xALPACAPriceSetter.sol\":1355:1390  OwnableUpgradeable.__Ownable_init() */\n      tag_69\n        /* \"contracts/xALPACAPriceSetter.sol\":1355:1388  OwnableUpgradeable.__Ownable_init */\n      tag_70\n        /* \"contracts/xALPACAPriceSetter.sol\":1355:1390  OwnableUpgradeable.__Ownable_init() */\n      jump\t// in\n    tag_69:\n        /* \"contracts/xALPACAPriceSetter.sol\":1397:1412  xALPACACreditor */\n      0x65\n        /* \"contracts/xALPACAPriceSetter.sol\":1397:1449  xALPACACreditor = IxALPACACreditor(_xALPACACreditor) */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup8\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap3\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"contracts/xALPACAPriceSetter.sol\":1456:1466  TWAPOracle */\n      0x66\n        /* \"contracts/xALPACAPriceSetter.sol\":1456:1480  TWAPOracle = _TWAPOracle */\n      dup1\n      sload\n      dup7\n      dup5\n      and\n      swap1\n      dup4\n      and\n      or\n      swap1\n      sstore\n        /* \"contracts/xALPACAPriceSetter.sol\":1487:1493  alpaca */\n      0x67\n        /* \"contracts/xALPACAPriceSetter.sol\":1487:1503  alpaca = _alpaca */\n      dup1\n      sload\n      swap3\n      dup6\n      and\n      swap3\n      swap1\n      swap2\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3253:3352  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_71\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3303:3308  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3287:3308  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":2159:2195   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n      swap1\n        /* \"#utility.yul\":2147:2149   */\n      0x20\n        /* \"#utility.yul\":2132:2150   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3253:3352  if (isTopLevelCall) {... */\n    tag_71:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3101:3358  {... */\n      pop\n        /* \"contracts/xALPACAPriceSetter.sol\":1228:1509  function initialize(IxALPACACreditor _xALPACACreditor, ITWAPOracle _TWAPOracle, address _alpaca) external initializer {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/xALPACAPriceSetter.sol\":1736:2048  function setValueFromTWAP() external {... */\n    tag_43:\n        /* \"contracts/xALPACAPriceSetter.sol\":1798:1809  priceSetter */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x68))\n        /* \"contracts/xALPACAPriceSetter.sol\":1784:1794  msg.sender */\n      caller\n        /* \"contracts/xALPACAPriceSetter.sol\":1784:1809  msg.sender != priceSetter */\n      eq\n        /* \"contracts/xALPACAPriceSetter.sol\":1780:1867  if (msg.sender != priceSetter) {... */\n      tag_75\n      jumpi\n        /* \"contracts/xALPACAPriceSetter.sol\":1827:1859  xALPACAPriceSetter_Unauthorize() */\n      mload(0x40)\n      shl(0xe0, 0xfe77f37f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/xALPACAPriceSetter.sol\":1780:1867  if (msg.sender != priceSetter) {... */\n    tag_75:\n        /* \"contracts/xALPACAPriceSetter.sol\":1899:1909  TWAPOracle */\n      sload(0x66)\n        /* \"contracts/xALPACAPriceSetter.sol\":1919:1925  alpaca */\n      sload(0x67)\n        /* \"contracts/xALPACAPriceSetter.sol\":1899:1926  TWAPOracle.getPrice(alpaca) */\n      mload(0x40)\n      shl(0xe0, 0x41976e09)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/xALPACAPriceSetter.sol\":1919:1925  alpaca */\n      swap2\n      dup3\n      and\n        /* \"contracts/xALPACAPriceSetter.sol\":1899:1926  TWAPOracle.getPrice(alpaca) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":160:211   */\n      mstore\n        /* \"contracts/xALPACAPriceSetter.sol\":1875:1896  uint256 _xALPACAValue */\n      0x00\n      swap3\n        /* \"contracts/xALPACAPriceSetter.sol\":1899:1909  TWAPOracle */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/xALPACAPriceSetter.sol\":1899:1918  TWAPOracle.getPrice */\n      0x41976e09\n      swap1\n        /* \"#utility.yul\":133:151   */\n      0x24\n      add\n        /* \"contracts/xALPACAPriceSetter.sol\":1899:1926  TWAPOracle.getPrice(alpaca) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_78\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_78:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_79\n      swap2\n      swap1\n      tag_80\n      jump\t// in\n    tag_79:\n        /* \"contracts/xALPACAPriceSetter.sol\":1933:1948  xALPACACreditor */\n      sload(0x65)\n        /* \"contracts/xALPACAPriceSetter.sol\":1933:1982  xALPACACreditor.setValuePerxALPACA(_xALPACAValue) */\n      mload(0x40)\n      shl(0xe3, 0x19b28d75)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":2541:2566   */\n      dup4\n      swap1\n      mstore\n        /* \"contracts/xALPACAPriceSetter.sol\":1875:1926  uint256 _xALPACAValue = TWAPOracle.getPrice(alpaca) */\n      swap2\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/xALPACAPriceSetter.sol\":1933:1948  xALPACACreditor */\n      and\n      swap1\n        /* \"contracts/xALPACAPriceSetter.sol\":1933:1967  xALPACACreditor.setValuePerxALPACA */\n      0xcd946ba8\n      swap1\n        /* \"#utility.yul\":2514:2532   */\n      0x24\n      add\n        /* \"contracts/xALPACAPriceSetter.sol\":1933:1982  xALPACACreditor.setValuePerxALPACA(_xALPACAValue) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_85\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_85:\n      pop\n      pop\n        /* \"contracts/xALPACAPriceSetter.sol\":1996:2042  LogSetValueFromTWAP(msg.sender, _xALPACAValue) */\n      mload(0x40)\n        /* \"#utility.yul\":2541:2566   */\n      dup4\n      dup2\n      mstore\n        /* \"contracts/xALPACAPriceSetter.sol\":2016:2026  msg.sender */\n      caller\n      swap3\n      pop\n        /* \"contracts/xALPACAPriceSetter.sol\":1996:2042  LogSetValueFromTWAP(msg.sender, _xALPACAValue) */\n      0x319b98be05fdbfe94f3cf2046d4cb3ab593056698700d2e808692638dc6ca4e6\n      swap2\n      pop\n        /* \"#utility.yul\":2529:2531   */\n      0x20\n        /* \"#utility.yul\":2514:2532   */\n      add\n        /* \"contracts/xALPACAPriceSetter.sol\":1996:2042  LogSetValueFromTWAP(msg.sender, _xALPACAValue) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/xALPACAPriceSetter.sol\":1773:2048  {... */\n      pop\n        /* \"contracts/xALPACAPriceSetter.sol\":1736:2048  function setValueFromTWAP() external {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2158:2356  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_46:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_90\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_52\n      swap1\n      tag_53\n      jump\t// in\n    tag_90:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2246:2268  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_93\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2779:2781   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2761:2782   */\n      mstore\n        /* \"#utility.yul\":2818:2820   */\n      0x26\n        /* \"#utility.yul\":2798:2816   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2791:2821   */\n      mstore\n        /* \"#utility.yul\":2857:2891   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":2837:2855   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2830:2892   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":2908:2926   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2901:2937   */\n      mstore\n        /* \"#utility.yul\":2954:2973   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_52\n        /* \"#utility.yul\":2577:2979   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_93:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2349  _transferOwnership(newOwner) */\n      tag_96\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2340:2348  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2339  _transferOwnership */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2349  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_96:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2158:2356  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2510:2697  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_62:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2602:2608  _owner */\n      0x33\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2618:2635  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2650:2690  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2602:2608  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2618:2635  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2602:2608  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2650:2690  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2583:2599  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2650:2690  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2573:2697  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2510:2697  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n    tag_66:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5351:5355  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5684:5697  _initializing */\n      dup1\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5680:6089  if (_initializing) {... */\n      iszero\n      tag_100\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5745  version */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5750  version == 1 */\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5749:5750  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5750  version == 1 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5799  version == 1 && !AddressUpgradeable.isContract(address(this)) */\n      dup1\n      iszero\n      tag_101\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5793:5797  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1499  account.code.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5799  version == 1 && !AddressUpgradeable.isContract(address(this)) */\n    tag_101:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5713:5879  require(... */\n      tag_104\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_52\n      swap1\n      tag_106\n      jump\t// in\n    tag_104:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5900:5905  false */\n      0x00\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5680:6089  if (_initializing) {... */\n    tag_100:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5956  _initialized */\n      sload(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5966  _initialized < version */\n      0xff\n      dup1\n      dup5\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5956  _initialized */\n      swap2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5966  _initialized < version */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5936:6017  require(_initialized < version, \"Initializable: contract is already initialized\") */\n      tag_108\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_52\n      swap1\n      tag_106\n      jump\t// in\n    tag_108:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6031:6043  _initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6031:6053  _initialized = version */\n      dup1\n      sload\n      not(0xff)\n      and\n      0xff\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n      0x01\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":988:1083  function __Ownable_init() internal onlyInitializing {... */\n    tag_70:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4698:4711  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4690:4759  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_111\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_52\n      swap1\n      tag_113\n      jump\t// in\n    tag_111:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1050:1076  __Ownable_init_unchained() */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4698:4711  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4690:4759  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_52\n      swap1\n      tag_113\n      jump\t// in\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1161:1193  _transferOwnership(_msgSender()) */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1161:1179  _transferOwnership */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1161:1193  _transferOwnership(_msgSender()) */\n      jump\t// in\n        /* \"#utility.yul\":454:585   */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":529:560   */\n      dup2\n      and\n        /* \"#utility.yul\":519:561   */\n      dup2\n      eq\n        /* \"#utility.yul\":509:579   */\n      tag_96\n      jumpi\n        /* \"#utility.yul\":575:576   */\n      0x00\n        /* \"#utility.yul\":572:573   */\n      dup1\n        /* \"#utility.yul\":565:577   */\n      revert\n        /* \"#utility.yul\":590:837   */\n    tag_24:\n        /* \"#utility.yul\":649:655   */\n      0x00\n        /* \"#utility.yul\":702:704   */\n      0x20\n        /* \"#utility.yul\":690:699   */\n      dup3\n        /* \"#utility.yul\":681:688   */\n      dup5\n        /* \"#utility.yul\":677:700   */\n      sub\n        /* \"#utility.yul\":673:705   */\n      slt\n        /* \"#utility.yul\":670:722   */\n      iszero\n      tag_131\n      jumpi\n        /* \"#utility.yul\":718:719   */\n      0x00\n        /* \"#utility.yul\":715:716   */\n      dup1\n        /* \"#utility.yul\":708:720   */\n      revert\n        /* \"#utility.yul\":670:722   */\n    tag_131:\n        /* \"#utility.yul\":757:766   */\n      dup2\n        /* \"#utility.yul\":744:767   */\n      calldataload\n        /* \"#utility.yul\":776:807   */\n      tag_132\n        /* \"#utility.yul\":801:806   */\n      dup2\n        /* \"#utility.yul\":776:807   */\n      tag_124\n      jump\t// in\n    tag_132:\n        /* \"#utility.yul\":826:831   */\n      swap4\n        /* \"#utility.yul\":590:837   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":842:1414   */\n    tag_36:\n        /* \"#utility.yul\":962:968   */\n      0x00\n        /* \"#utility.yul\":970:976   */\n      dup1\n        /* \"#utility.yul\":978:984   */\n      0x00\n        /* \"#utility.yul\":1031:1033   */\n      0x60\n        /* \"#utility.yul\":1019:1028   */\n      dup5\n        /* \"#utility.yul\":1010:1017   */\n      dup7\n        /* \"#utility.yul\":1006:1029   */\n      sub\n        /* \"#utility.yul\":1002:1034   */\n      slt\n        /* \"#utility.yul\":999:1051   */\n      iszero\n      tag_134\n      jumpi\n        /* \"#utility.yul\":1047:1048   */\n      0x00\n        /* \"#utility.yul\":1044:1045   */\n      dup1\n        /* \"#utility.yul\":1037:1049   */\n      revert\n        /* \"#utility.yul\":999:1051   */\n    tag_134:\n        /* \"#utility.yul\":1086:1095   */\n      dup4\n        /* \"#utility.yul\":1073:1096   */\n      calldataload\n        /* \"#utility.yul\":1105:1136   */\n      tag_135\n        /* \"#utility.yul\":1130:1135   */\n      dup2\n        /* \"#utility.yul\":1105:1136   */\n      tag_124\n      jump\t// in\n    tag_135:\n        /* \"#utility.yul\":1155:1160   */\n      swap3\n      pop\n        /* \"#utility.yul\":1212:1214   */\n      0x20\n        /* \"#utility.yul\":1197:1215   */\n      dup5\n      add\n        /* \"#utility.yul\":1184:1216   */\n      calldataload\n        /* \"#utility.yul\":1225:1258   */\n      tag_136\n        /* \"#utility.yul\":1184:1216   */\n      dup2\n        /* \"#utility.yul\":1225:1258   */\n      tag_124\n      jump\t// in\n    tag_136:\n        /* \"#utility.yul\":1277:1284   */\n      swap2\n      pop\n        /* \"#utility.yul\":1336:1338   */\n      0x40\n        /* \"#utility.yul\":1321:1339   */\n      dup5\n      add\n        /* \"#utility.yul\":1308:1340   */\n      calldataload\n        /* \"#utility.yul\":1349:1382   */\n      tag_137\n        /* \"#utility.yul\":1308:1340   */\n      dup2\n        /* \"#utility.yul\":1349:1382   */\n      tag_124\n      jump\t// in\n    tag_137:\n        /* \"#utility.yul\":1401:1408   */\n      dup1\n        /* \"#utility.yul\":1391:1408   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":842:1414   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1646:2002   */\n    tag_53:\n        /* \"#utility.yul\":1848:1850   */\n      0x20\n        /* \"#utility.yul\":1830:1851   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":1867:1885   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":1860:1890   */\n      mstore\n        /* \"#utility.yul\":1926:1960   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":1921:1923   */\n      0x40\n        /* \"#utility.yul\":1906:1924   */\n      dup3\n      add\n        /* \"#utility.yul\":1899:1961   */\n      mstore\n        /* \"#utility.yul\":1993:1995   */\n      0x60\n        /* \"#utility.yul\":1978:1996   */\n      add\n      swap1\n        /* \"#utility.yul\":1646:2002   */\n      jump\t// out\n        /* \"#utility.yul\":2206:2390   */\n    tag_80:\n        /* \"#utility.yul\":2276:2282   */\n      0x00\n        /* \"#utility.yul\":2329:2331   */\n      0x20\n        /* \"#utility.yul\":2317:2326   */\n      dup3\n        /* \"#utility.yul\":2308:2315   */\n      dup5\n        /* \"#utility.yul\":2304:2327   */\n      sub\n        /* \"#utility.yul\":2300:2332   */\n      slt\n        /* \"#utility.yul\":2297:2349   */\n      iszero\n      tag_142\n      jumpi\n        /* \"#utility.yul\":2345:2346   */\n      0x00\n        /* \"#utility.yul\":2342:2343   */\n      dup1\n        /* \"#utility.yul\":2335:2347   */\n      revert\n        /* \"#utility.yul\":2297:2349   */\n    tag_142:\n      pop\n        /* \"#utility.yul\":2368:2384   */\n      mload\n      swap2\n        /* \"#utility.yul\":2206:2390   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2984:3394   */\n    tag_106:\n        /* \"#utility.yul\":3186:3188   */\n      0x20\n        /* \"#utility.yul\":3168:3189   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3225:3227   */\n      0x2e\n        /* \"#utility.yul\":3205:3223   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3198:3228   */\n      mstore\n        /* \"#utility.yul\":3264:3298   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":3259:3261   */\n      0x40\n        /* \"#utility.yul\":3244:3262   */\n      dup3\n      add\n        /* \"#utility.yul\":3237:3299   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":3330:3332   */\n      0x60\n        /* \"#utility.yul\":3315:3333   */\n      dup3\n      add\n        /* \"#utility.yul\":3308:3352   */\n      mstore\n        /* \"#utility.yul\":3384:3387   */\n      0x80\n        /* \"#utility.yul\":3369:3388   */\n      add\n      swap1\n        /* \"#utility.yul\":2984:3394   */\n      jump\t// out\n        /* \"#utility.yul\":3399:3806   */\n    tag_113:\n        /* \"#utility.yul\":3601:3603   */\n      0x20\n        /* \"#utility.yul\":3583:3604   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3640:3642   */\n      0x2b\n        /* \"#utility.yul\":3620:3638   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3613:3643   */\n      mstore\n        /* \"#utility.yul\":3679:3713   */\n      0x496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\n        /* \"#utility.yul\":3674:3676   */\n      0x40\n        /* \"#utility.yul\":3659:3677   */\n      dup3\n      add\n        /* \"#utility.yul\":3652:3714   */\n      mstore\n      shl(0xa8, 0x6e697469616c697a696e67)\n        /* \"#utility.yul\":3745:3747   */\n      0x60\n        /* \"#utility.yul\":3730:3748   */\n      dup3\n      add\n        /* \"#utility.yul\":3723:3764   */\n      mstore\n        /* \"#utility.yul\":3796:3799   */\n      0x80\n        /* \"#utility.yul\":3781:3800   */\n      add\n      swap1\n        /* \"#utility.yul\":3399:3806   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220265a4a7fd4b99e159243b08e233817cae5eb549e35c63c850bd104f8c394a40664736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610778806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806394faab231161006657806394faab2314610113578063c0c53b8b14610126578063cab0d81614610139578063d0b373b31461014c578063f2fde38b1461015457600080fd5b80632c09bef7146100a357806334d29f05146100d257806363791e3c146100e5578063715018a6146100fa5780638da5cb5b14610102575b600080fd5b6068546100b6906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6065546100b6906001600160a01b031681565b6100f86100f33660046105ec565b610167565b005b6100f86101e6565b6033546001600160a01b03166100b6565b6067546100b6906001600160a01b031681565b6100f8610134366004610610565b61021c565b6066546100b6906001600160a01b031681565b6100f86102d1565b6100f86101623660046105ec565b610408565b6033546001600160a01b0316331461019a5760405162461bcd60e51b81526004016101919061065b565b60405180910390fd5b606880546001600160a01b0319166001600160a01b03831690811790915560405133907f73ac14f6c6f83ac21ceaedde9a348f537e8dcd3931f90b9cf101f14e534f735c90600090a350565b6033546001600160a01b031633146102105760405162461bcd60e51b81526004016101919061065b565b61021a60006104a3565b565b600061022860016104f5565b90508015610240576000805461ff0019166101001790555b61024861057d565b606580546001600160a01b038087166001600160a01b03199283161790925560668054868416908316179055606780549285169290911691909117905580156102cb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6068546001600160a01b031633146102fc5760405163fe77f37f60e01b815260040160405180910390fd5b6066546067546040516341976e0960e01b81526001600160a01b03918216600482015260009291909116906341976e0990602401602060405180830381865afa15801561034d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103719190610690565b6065546040516319b28d7560e31b8152600481018390529192506001600160a01b03169063cd946ba890602401600060405180830381600087803b1580156103b857600080fd5b505af11580156103cc573d6000803e3d6000fd5b50506040518381523392507f319b98be05fdbfe94f3cf2046d4cb3ab593056698700d2e808692638dc6ca4e6915060200160405180910390a250565b6033546001600160a01b031633146104325760405162461bcd60e51b81526004016101919061065b565b6001600160a01b0381166104975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610191565b6104a0816104a3565b50565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff161561053c578160ff1660011480156105185750303b155b6105345760405162461bcd60e51b8152600401610191906106a9565b506000919050565b60005460ff8084169116106105635760405162461bcd60e51b8152600401610191906106a9565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166105a45760405162461bcd60e51b8152600401610191906106f7565b61021a600054610100900460ff166105ce5760405162461bcd60e51b8152600401610191906106f7565b61021a336104a3565b6001600160a01b03811681146104a057600080fd5b6000602082840312156105fe57600080fd5b8135610609816105d7565b9392505050565b60008060006060848603121561062557600080fd5b8335610630816105d7565b92506020840135610640816105d7565b91506040840135610650816105d7565b809150509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156106a257600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220265a4a7fd4b99e159243b08e233817cae5eb549e35c63c850bd104f8c394a40664736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x778 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x94FAAB23 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x94FAAB23 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0xC0C53B8B EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0xCAB0D816 EQ PUSH2 0x139 JUMPI DUP1 PUSH4 0xD0B373B3 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C09BEF7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x34D29F05 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0x63791E3C EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x102 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x68 SLOAD PUSH2 0xB6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x65 SLOAD PUSH2 0xB6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0xF3 CALLDATASIZE PUSH1 0x4 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x167 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF8 PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x67 SLOAD PUSH2 0xB6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0x610 JUMP JUMPDEST PUSH2 0x21C JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH2 0xB6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x2D1 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x408 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x19A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x65B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x68 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0x73AC14F6C6F83AC21CEAEDDE9A348F537E8DCD3931F90B9CF101F14E534F735C SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x210 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x65B JUMP JUMPDEST PUSH2 0x21A PUSH1 0x0 PUSH2 0x4A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x228 PUSH1 0x1 PUSH2 0x4F5 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x248 PUSH2 0x57D JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x66 DUP1 SLOAD DUP7 DUP5 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x67 DUP1 SLOAD SWAP3 DUP6 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH4 0xFE77F37F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x67 SLOAD PUSH1 0x40 MLOAD PUSH4 0x41976E09 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x41976E09 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x371 SWAP2 SWAP1 PUSH2 0x690 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH4 0x19B28D75 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xCD946BA8 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE CALLER SWAP3 POP PUSH32 0x319B98BE05FDBFE94F3CF2046D4CB3AB593056698700D2E808692638DC6CA4E6 SWAP2 POP PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x432 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x65B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x497 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x191 JUMP JUMPDEST PUSH2 0x4A0 DUP2 PUSH2 0x4A3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x53C JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x518 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x6A9 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x6A9 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x21A PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x21A CALLER PUSH2 0x4A3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x609 DUP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x625 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x630 DUP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x640 DUP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x650 DUP2 PUSH2 0x5D7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 GAS 0x4A PUSH32 0xD4B99E159243B08E233817CAE5EB549E35C63C850BD104F8C394A40664736F6C PUSH4 0x4300080D STOP CALLER ",
							"sourceMap": "579:1474:6:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@TWAPOracle_616": {
									"entryPoint": null,
									"id": 616,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Ownable_init_26": {
									"entryPoint": 1405,
									"id": 26,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_37": {
									"entryPoint": null,
									"id": 37,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_535": {
									"entryPoint": null,
									"id": 535,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_setInitializedVersion_264": {
									"entryPoint": 1269,
									"id": 264,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_transferOwnership_117": {
									"entryPoint": 1187,
									"id": 117,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@alpaca_618": {
									"entryPoint": null,
									"id": 618,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@initialize_654": {
									"entryPoint": 540,
									"id": 654,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@isContract_283": {
									"entryPoint": null,
									"id": 283,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_46": {
									"entryPoint": null,
									"id": 46,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@priceSetter_620": {
									"entryPoint": null,
									"id": 620,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@renounceOwnership_74": {
									"entryPoint": 486,
									"id": 74,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@setPriceSetter_672": {
									"entryPoint": 359,
									"id": 672,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setValueFromTWAP_705": {
									"entryPoint": 721,
									"id": 705,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_97": {
									"entryPoint": 1032,
									"id": 97,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@xALPACACreditor_613": {
									"entryPoint": null,
									"id": 613,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1516,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_contract$_IxALPACACreditor_$585t_contract$_ITWAPOracle_$560t_address": {
									"entryPoint": 1552,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 1680,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_ITWAPOracle_$560__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IxALPACACreditor_$585__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1705,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1627,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1783,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"validator_revert_address": {
									"entryPoint": 1495,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:3808:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:102:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "125:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "148:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "133:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "182:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "198:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "203:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "194:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "194:11:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "207:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "190:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "190:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "178:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "178:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "160:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "84:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "95:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "106:4:7",
														"type": ""
													}
												],
												"src": "14:203:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "347:102:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "357:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "369:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "380:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "365:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "365:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "357:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "399:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "414:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "430:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "435:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "426:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "426:11:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "439:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "422:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "422:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "410:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "410:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "392:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "392:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "392:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IxALPACACreditor_$585__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "316:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "327:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "338:4:7",
														"type": ""
													}
												],
												"src": "222:227:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "499:86:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "563:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "572:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "575:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "565:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "565:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "565:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "522:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "533:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "548:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "553:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "544:3:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "544:11:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "557:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "540:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "540:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "529:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "529:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "519:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "519:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "512:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "512:50:7"
															},
															"nodeType": "YulIf",
															"src": "509:70:7"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "488:5:7",
														"type": ""
													}
												],
												"src": "454:131:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "660:177:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "706:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "715:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "718:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "708:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "708:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "708:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "681:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "690:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "677:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "677:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "702:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "673:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "673:32:7"
															},
															"nodeType": "YulIf",
															"src": "670:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "731:36:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "757:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "744:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "744:23:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "735:5:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "801:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "776:24:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "776:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "776:31:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "816:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "826:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "816:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "626:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "637:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "649:6:7",
														"type": ""
													}
												],
												"src": "590:247:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "989:425:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1035:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1044:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1047:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1037:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1037:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1037:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1010:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1019:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1006:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1006:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1031:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1002:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1002:32:7"
															},
															"nodeType": "YulIf",
															"src": "999:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1060:36:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1086:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1073:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1073:23:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1064:5:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1130:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1105:24:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1105:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1105:31:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1145:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1155:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1145:6:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1169:47:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1201:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1212:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1197:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1197:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1184:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1184:32:7"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1173:7:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "1250:7:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1225:24:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1225:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1225:33:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1267:17:7",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "1277:7:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1267:6:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1293:47:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1325:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1336:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1321:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1321:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1308:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1308:32:7"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nodeType": "YulTypedName",
																	"src": "1297:7:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_2",
																		"nodeType": "YulIdentifier",
																		"src": "1374:7:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1349:24:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1349:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1349:33:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1391:17:7",
															"value": {
																"name": "value_2",
																"nodeType": "YulIdentifier",
																"src": "1401:7:7"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IxALPACACreditor_$585t_contract$_ITWAPOracle_$560t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "939:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "950:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "962:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "970:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "978:6:7",
														"type": ""
													}
												],
												"src": "842:572:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1539:102:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1549:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1561:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1572:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1557:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1557:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1549:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1591:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1606:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1622:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1627:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1618:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1618:11:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1631:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1614:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1614:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1602:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1602:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1584:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1584:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1584:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ITWAPOracle_$560__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1508:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1519:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1530:4:7",
														"type": ""
													}
												],
												"src": "1419:222:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1820:182:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1837:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1848:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1830:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1830:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1830:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1871:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1882:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1867:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1867:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1887:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1860:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1860:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1860:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1910:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1921:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1906:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1906:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1926:34:7",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1899:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1899:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1899:62:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1970:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1982:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1993:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1978:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1978:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1970:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1797:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1811:4:7",
														"type": ""
													}
												],
												"src": "1646:356:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2114:87:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2124:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2136:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2147:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2132:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2132:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2124:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2166:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2181:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2189:4:7",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2177:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2177:17:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2159:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2159:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2159:36:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2083:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2094:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2105:4:7",
														"type": ""
													}
												],
												"src": "2007:194:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2287:103:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2333:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2342:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2345:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2335:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2335:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2335:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2308:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2317:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2304:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2304:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2329:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2300:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2300:32:7"
															},
															"nodeType": "YulIf",
															"src": "2297:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2358:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2374:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2368:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2368:16:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2358:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2253:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2264:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2276:6:7",
														"type": ""
													}
												],
												"src": "2206:184:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2496:76:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2506:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2518:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2529:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2514:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2514:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2506:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2548:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2559:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2541:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2541:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2541:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2465:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2476:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2487:4:7",
														"type": ""
													}
												],
												"src": "2395:177:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2751:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2768:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2779:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2761:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2761:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2761:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2802:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2813:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2798:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2798:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2818:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2791:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2791:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2791:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2841:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2852:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2837:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2837:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2857:34:7",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2830:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2830:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2830:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2912:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2923:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2908:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2908:18:7"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2928:8:7",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2901:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2901:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2901:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2946:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2958:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2969:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2954:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2954:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2946:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2728:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2742:4:7",
														"type": ""
													}
												],
												"src": "2577:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3158:236:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3175:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3186:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3168:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3168:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3168:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3209:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3220:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3205:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3205:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3225:2:7",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3198:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3198:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3198:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3248:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3259:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3244:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3244:18:7"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3264:34:7",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3237:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3237:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3237:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3319:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3330:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3315:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3315:18:7"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3335:16:7",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3308:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3308:44:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3308:44:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3361:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3373:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3384:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3369:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3369:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3361:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3135:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3149:4:7",
														"type": ""
													}
												],
												"src": "2984:410:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3573:233:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3590:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3601:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3583:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3583:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3583:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3624:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3635:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3620:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3620:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3640:2:7",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3613:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3613:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3613:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3663:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3674:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3659:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3659:18:7"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3679:34:7",
																		"type": "",
																		"value": "Initializable: contract is not i"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3652:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3652:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3652:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3734:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3745:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3730:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3730:18:7"
																	},
																	{
																		"hexValue": "6e697469616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3750:13:7",
																		"type": "",
																		"value": "nitializing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3723:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3723:41:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3723:41:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3773:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3785:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3796:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3781:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3781:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3773:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3550:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3564:4:7",
														"type": ""
													}
												],
												"src": "3399:407:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IxALPACACreditor_$585__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IxALPACACreditor_$585t_contract$_ITWAPOracle_$560t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := calldataload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n    }\n    function abi_encode_tuple_t_contract$_ITWAPOracle_$560__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061009e5760003560e01c806394faab231161006657806394faab2314610113578063c0c53b8b14610126578063cab0d81614610139578063d0b373b31461014c578063f2fde38b1461015457600080fd5b80632c09bef7146100a357806334d29f05146100d257806363791e3c146100e5578063715018a6146100fa5780638da5cb5b14610102575b600080fd5b6068546100b6906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6065546100b6906001600160a01b031681565b6100f86100f33660046105ec565b610167565b005b6100f86101e6565b6033546001600160a01b03166100b6565b6067546100b6906001600160a01b031681565b6100f8610134366004610610565b61021c565b6066546100b6906001600160a01b031681565b6100f86102d1565b6100f86101623660046105ec565b610408565b6033546001600160a01b0316331461019a5760405162461bcd60e51b81526004016101919061065b565b60405180910390fd5b606880546001600160a01b0319166001600160a01b03831690811790915560405133907f73ac14f6c6f83ac21ceaedde9a348f537e8dcd3931f90b9cf101f14e534f735c90600090a350565b6033546001600160a01b031633146102105760405162461bcd60e51b81526004016101919061065b565b61021a60006104a3565b565b600061022860016104f5565b90508015610240576000805461ff0019166101001790555b61024861057d565b606580546001600160a01b038087166001600160a01b03199283161790925560668054868416908316179055606780549285169290911691909117905580156102cb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6068546001600160a01b031633146102fc5760405163fe77f37f60e01b815260040160405180910390fd5b6066546067546040516341976e0960e01b81526001600160a01b03918216600482015260009291909116906341976e0990602401602060405180830381865afa15801561034d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103719190610690565b6065546040516319b28d7560e31b8152600481018390529192506001600160a01b03169063cd946ba890602401600060405180830381600087803b1580156103b857600080fd5b505af11580156103cc573d6000803e3d6000fd5b50506040518381523392507f319b98be05fdbfe94f3cf2046d4cb3ab593056698700d2e808692638dc6ca4e6915060200160405180910390a250565b6033546001600160a01b031633146104325760405162461bcd60e51b81526004016101919061065b565b6001600160a01b0381166104975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610191565b6104a0816104a3565b50565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff161561053c578160ff1660011480156105185750303b155b6105345760405162461bcd60e51b8152600401610191906106a9565b506000919050565b60005460ff8084169116106105635760405162461bcd60e51b8152600401610191906106a9565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166105a45760405162461bcd60e51b8152600401610191906106f7565b61021a600054610100900460ff166105ce5760405162461bcd60e51b8152600401610191906106f7565b61021a336104a3565b6001600160a01b03811681146104a057600080fd5b6000602082840312156105fe57600080fd5b8135610609816105d7565b9392505050565b60008060006060848603121561062557600080fd5b8335610630816105d7565b92506020840135610640816105d7565b91506040840135610650816105d7565b809150509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156106a257600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220265a4a7fd4b99e159243b08e233817cae5eb549e35c63c850bd104f8c394a40664736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x94FAAB23 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x94FAAB23 EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0xC0C53B8B EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0xCAB0D816 EQ PUSH2 0x139 JUMPI DUP1 PUSH4 0xD0B373B3 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C09BEF7 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x34D29F05 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0x63791E3C EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x102 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x68 SLOAD PUSH2 0xB6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x65 SLOAD PUSH2 0xB6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0xF3 CALLDATASIZE PUSH1 0x4 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x167 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF8 PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB6 JUMP JUMPDEST PUSH1 0x67 SLOAD PUSH2 0xB6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0x610 JUMP JUMPDEST PUSH2 0x21C JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH2 0xB6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x2D1 JUMP JUMPDEST PUSH2 0xF8 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x408 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x19A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x65B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x68 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0x73AC14F6C6F83AC21CEAEDDE9A348F537E8DCD3931F90B9CF101F14E534F735C SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x210 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x65B JUMP JUMPDEST PUSH2 0x21A PUSH1 0x0 PUSH2 0x4A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x228 PUSH1 0x1 PUSH2 0x4F5 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x248 PUSH2 0x57D JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x66 DUP1 SLOAD DUP7 DUP5 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x67 DUP1 SLOAD SWAP3 DUP6 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x2CB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH4 0xFE77F37F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x67 SLOAD PUSH1 0x40 MLOAD PUSH4 0x41976E09 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x41976E09 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x371 SWAP2 SWAP1 PUSH2 0x690 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH4 0x19B28D75 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xCD946BA8 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE CALLER SWAP3 POP PUSH32 0x319B98BE05FDBFE94F3CF2046D4CB3AB593056698700D2E808692638DC6CA4E6 SWAP2 POP PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x432 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x65B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x497 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x191 JUMP JUMPDEST PUSH2 0x4A0 DUP2 PUSH2 0x4A3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x53C JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x518 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x6A9 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x6A9 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x21A PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5CE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x21A CALLER PUSH2 0x4A3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x609 DUP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x625 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x630 DUP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x640 DUP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x650 DUP2 PUSH2 0x5D7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 GAS 0x4A PUSH32 0xD4B99E159243B08E233817CAE5EB549E35C63C850BD104F8C394A40664736F6C PUSH4 0x4300080D STOP CALLER ",
							"sourceMap": "579:1474:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1009:26;;;;;-1:-1:-1;;;;;1009:26:6;;;;;;-1:-1:-1;;;;;178:32:7;;;160:51;;148:2;133:18;1009:26:6;;;;;;;905:39;;;;;-1:-1:-1;;;;;905:39:6;;;1515:159;;;;;;:::i;:::-;;:::i;:::-;;1908:101:0;;;:::i;1276:85::-;1348:6;;-1:-1:-1;;;;;1348:6:0;1276:85;;983:21:6;;;;;-1:-1:-1;;;;;983:21:6;;;1228:281;;;;;;:::i;:::-;;:::i;949:29::-;;;;;-1:-1:-1;;;;;949:29:6;;;1736:312;;;:::i;2158:198:0:-;;;;;;:::i;:::-;;:::i;1515:159:6:-;1348:6:0;;-1:-1:-1;;;;;1348:6:0;929:10:3;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;;;;;;;;;1587:11:6::1;:26:::0;;-1:-1:-1;;;;;;1587:26:6::1;-1:-1:-1::0;;;;;1587:26:6;::::1;::::0;;::::1;::::0;;;1625:43:::1;::::0;1643:10:::1;::::0;1625:43:::1;::::0;-1:-1:-1;;1625:43:6::1;1515:159:::0;:::o;1908:101:0:-;1348:6;;-1:-1:-1;;;;;1348:6:0;929:10:3;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;1972:30:::1;1999:1;1972:18;:30::i;:::-;1908:101::o:0;1228:281:6:-;3111:19:1;3133:25;3156:1;3133:22;:25::i;:::-;3111:47;;3172:14;3168:65;;;3202:13;:20;;-1:-1:-1;;3202:20:1;;;;;3168:65;1355:35:6::1;:33;:35::i;:::-;1397:15;:52:::0;;-1:-1:-1;;;;;1397:52:6;;::::1;-1:-1:-1::0;;;;;;1397:52:6;;::::1;;::::0;;;1456:10:::1;:24:::0;;;;::::1;::::0;;::::1;;::::0;;1487:6:::1;:16:::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;3253:99:1;;;;3303:5;3287:21;;-1:-1:-1;;3287:21:1;;;3327:14;;-1:-1:-1;2159:36:7;;3327:14:1;;2147:2:7;2132:18;3327:14:1;;;;;;;3253:99;3101:257;1228:281:6;;;:::o;1736:312::-;1798:11;;-1:-1:-1;;;;;1798:11:6;1784:10;:25;1780:87;;1827:32;;-1:-1:-1;;;1827:32:6;;;;;;;;;;;1780:87;1899:10;;1919:6;;1899:27;;-1:-1:-1;;;1899:27:6;;-1:-1:-1;;;;;1919:6:6;;;1899:27;;;160:51:7;1875:21:6;;1899:10;;;;;:19;;133:18:7;;1899:27:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1933:15;;:49;;-1:-1:-1;;;1933:49:6;;;;;2541:25:7;;;1875:51:6;;-1:-1:-1;;;;;;1933:15:6;;:34;;2514:18:7;;1933:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1996:46:6;;2541:25:7;;;2016:10:6;;-1:-1:-1;1996:46:6;;-1:-1:-1;2529:2:7;2514:18;1996:46:6;;;;;;;1773:275;1736:312::o;2158:198:0:-;1348:6;;-1:-1:-1;;;;;1348:6:0;929:10:3;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2246:22:0;::::1;2238:73;;;::::0;-1:-1:-1;;;2238:73:0;;2779:2:7;2238:73:0::1;::::0;::::1;2761:21:7::0;2818:2;2798:18;;;2791:30;2857:34;2837:18;;;2830:62;-1:-1:-1;;;2908:18:7;;;2901:36;2954:19;;2238:73:0::1;2577:402:7::0;2238:73:0::1;2321:28;2340:8;2321:18;:28::i;:::-;2158:198:::0;:::o;2510:187::-;2602:6;;;-1:-1:-1;;;;;2618:17:0;;;-1:-1:-1;;;;;;2618:17:0;;;;;;;2650:40;;2602:6;;;2618:17;2602:6;;2650:40;;2583:16;;2650:40;2573:124;2510:187;:::o;5287:808:1:-;5351:4;5684:13;;;;;;;5680:409;;;5738:7;:12;;5749:1;5738:12;:61;;;;-1:-1:-1;5793:4:1;1476:19:2;:23;5738:61:1;5713:166;;;;-1:-1:-1;;;5713:166:1;;;;;;;:::i;:::-;-1:-1:-1;5900:5:1;;5287:808;-1:-1:-1;5287:808:1:o;5680:409::-;5944:12;;:22;;;;:12;;:22;5936:81;;;;-1:-1:-1;;;5936:81:1;;;;;;;:::i;:::-;-1:-1:-1;6031:12:1;:22;;-1:-1:-1;;6031:22:1;;;;;;;;;;;;-1:-1:-1;;5287:808:1:o;988:95:0:-;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1050:26:0::1;4698:13:1::0;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1161:32:0::1;929:10:3::0;1161:18:0::1;:32::i;454:131:7:-:0;-1:-1:-1;;;;;529:31:7;;519:42;;509:70;;575:1;572;565:12;590:247;649:6;702:2;690:9;681:7;677:23;673:32;670:52;;;718:1;715;708:12;670:52;757:9;744:23;776:31;801:5;776:31;:::i;:::-;826:5;590:247;-1:-1:-1;;;590:247:7:o;842:572::-;962:6;970;978;1031:2;1019:9;1010:7;1006:23;1002:32;999:52;;;1047:1;1044;1037:12;999:52;1086:9;1073:23;1105:31;1130:5;1105:31;:::i;:::-;1155:5;-1:-1:-1;1212:2:7;1197:18;;1184:32;1225:33;1184:32;1225:33;:::i;:::-;1277:7;-1:-1:-1;1336:2:7;1321:18;;1308:32;1349:33;1308:32;1349:33;:::i;:::-;1401:7;1391:17;;;842:572;;;;;:::o;1646:356::-;1848:2;1830:21;;;1867:18;;;1860:30;1926:34;1921:2;1906:18;;1899:62;1993:2;1978:18;;1646:356::o;2206:184::-;2276:6;2329:2;2317:9;2308:7;2304:23;2300:32;2297:52;;;2345:1;2342;2335:12;2297:52;-1:-1:-1;2368:16:7;;2206:184;-1:-1:-1;2206:184:7:o;2984:410::-;3186:2;3168:21;;;3225:2;3205:18;;;3198:30;3264:34;3259:2;3244:18;;3237:62;-1:-1:-1;;;3330:2:7;3315:18;;3308:44;3384:3;3369:19;;2984:410::o;3399:407::-;3601:2;3583:21;;;3640:2;3620:18;;;3613:30;3679:34;3674:2;3659:18;;3652:62;-1:-1:-1;;;3745:2:7;3730:18;;3723:41;3796:3;3781:19;;3399:407::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "382400",
								"executionCost": "418",
								"totalCost": "382818"
							},
							"external": {
								"TWAPOracle()": "2369",
								"alpaca()": "2325",
								"initialize(address,address,address)": "infinite",
								"owner()": "2408",
								"priceSetter()": "2326",
								"renounceOwnership()": "28184",
								"setPriceSetter(address)": "28269",
								"setValueFromTWAP()": "infinite",
								"transferOwnership(address)": "infinite",
								"xALPACACreditor()": "2348"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 579,
									"end": 2053,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 579,
									"end": 2053,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220265a4a7fd4b99e159243b08e233817cae5eb549e35c63c850bd104f8c394a40664736f6c634300080d0033",
									".code": [
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "94FAAB23"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "94FAAB23"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "C0C53B8B"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "CAB0D816"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "D0B373B3"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "2C09BEF7"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "34D29F05"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "63791E3C"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 579,
											"end": 2053,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "PUSH",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 178,
											"end": 210,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 178,
											"end": 210,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 178,
											"end": 210,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 160,
											"end": 211,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 160,
											"end": 211,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1009,
											"end": 1035,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 905,
											"end": 944,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 905,
											"end": 944,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 905,
											"end": 944,
											"name": "PUSH",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 905,
											"end": 944,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 905,
											"end": 944,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 905,
											"end": 944,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 905,
											"end": 944,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 905,
											"end": 944,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 905,
											"end": 944,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "tag",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 983,
											"end": 1004,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 983,
											"end": 1004,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 983,
											"end": 1004,
											"name": "PUSH",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 983,
											"end": 1004,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 983,
											"end": 1004,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 983,
											"end": 1004,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 983,
											"end": 1004,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 983,
											"end": 1004,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 983,
											"end": 1004,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "tag",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 949,
											"end": 978,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 949,
											"end": 978,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 949,
											"end": 978,
											"name": "PUSH",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 949,
											"end": 978,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 949,
											"end": 978,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 949,
											"end": 978,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 949,
											"end": 978,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 949,
											"end": 978,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 949,
											"end": 978,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1736,
											"end": 2048,
											"name": "tag",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 1736,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1736,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1736,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 1736,
											"end": 2048,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1587,
											"end": 1598,
											"name": "PUSH",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1587,
											"end": 1613,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1625,
											"end": 1668,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1625,
											"end": 1668,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1643,
											"end": 1653,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1643,
											"end": 1653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1625,
											"end": 1668,
											"name": "PUSH",
											"source": 6,
											"value": "73AC14F6C6F83AC21CEAEDDE9A348F537E8DCD3931F90B9CF101F14E534F735C"
										},
										{
											"begin": 1625,
											"end": 1668,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 1625,
											"end": 1668,
											"name": "LOG3",
											"source": 6
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1515,
											"end": 1674,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1999,
											"end": 2000,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1972,
											"end": 1990,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "tag",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3111,
											"end": 3130,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 3156,
											"end": 3157,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3133,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "tag",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3111,
											"end": 3158,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3111,
											"end": 3158,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3172,
											"end": 3186,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3215,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "tag",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1355,
											"end": 1390,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 1355,
											"end": 1388,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 1355,
											"end": 1390,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1355,
											"end": 1390,
											"name": "tag",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 1355,
											"end": 1390,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1397,
											"end": 1412,
											"name": "PUSH",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1397,
											"end": 1449,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1466,
											"name": "PUSH",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1456,
											"end": 1480,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1493,
											"name": "PUSH",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1487,
											"end": 1503,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3303,
											"end": 3308,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 2159,
											"end": 2195,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2159,
											"end": 2195,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2147,
											"end": 2149,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2132,
											"end": 2150,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3101,
											"end": 3358,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1509,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1736,
											"end": 2048,
											"name": "tag",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 1736,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1798,
											"end": 1809,
											"name": "PUSH",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 1798,
											"end": 1809,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1798,
											"end": 1809,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1784,
											"end": 1809,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1780,
											"end": 1867,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 1780,
											"end": 1867,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FE77F37F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1827,
											"end": 1859,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1780,
											"end": 1867,
											"name": "tag",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 1780,
											"end": 1867,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1909,
											"name": "PUSH",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 1899,
											"end": 1909,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1919,
											"end": 1925,
											"name": "PUSH",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 1919,
											"end": 1925,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "41976E09"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1919,
											"end": 1925,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1919,
											"end": 1925,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1919,
											"end": 1925,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 160,
											"end": 211,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1875,
											"end": 1896,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1875,
											"end": 1896,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1909,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1909,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1909,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1909,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1909,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1918,
											"name": "PUSH",
											"source": 6,
											"value": "41976E09"
										},
										{
											"begin": 1899,
											"end": 1918,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 133,
											"end": 151,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "STATICCALL",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "tag",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "tag",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 1899,
											"end": 1926,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1948,
											"name": "PUSH",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 1933,
											"end": 1948,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "19B28D75"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2541,
											"end": 2566,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2541,
											"end": 2566,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2541,
											"end": 2566,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1875,
											"end": 1926,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1875,
											"end": 1926,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1933,
											"end": 1948,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1948,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1967,
											"name": "PUSH",
											"source": 6,
											"value": "CD946BA8"
										},
										{
											"begin": 1933,
											"end": 1967,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2514,
											"end": 2532,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2514,
											"end": 2532,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "tag",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 1933,
											"end": 1982,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2541,
											"end": 2566,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2541,
											"end": 2566,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2541,
											"end": 2566,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2016,
											"end": 2026,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 2016,
											"end": 2026,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "PUSH",
											"source": 6,
											"value": "319B98BE05FDBFE94F3CF2046D4CB3AB593056698700D2E808692638DC6CA4E6"
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2529,
											"end": 2531,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2514,
											"end": 2532,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1996,
											"end": 2042,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": 1773,
											"end": 2048,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1736,
											"end": 2048,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2246,
											"end": 2268,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2246,
											"end": 2268,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2781,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2761,
											"end": 2782,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2818,
											"end": 2820,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 2798,
											"end": 2816,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2798,
											"end": 2816,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2816,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2791,
											"end": 2821,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2857,
											"end": 2891,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 2837,
											"end": 2855,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2837,
											"end": 2855,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2837,
											"end": 2855,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2830,
											"end": 2892,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2908,
											"end": 2926,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2908,
											"end": 2926,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2908,
											"end": 2926,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2901,
											"end": 2937,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2954,
											"end": 2973,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 2954,
											"end": 2973,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2577,
											"end": 2979,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 2340,
											"end": 2348,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2583,
											"end": 2599,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2583,
											"end": 2599,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2697,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5351,
											"end": 5355,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5745,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5750,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5738,
											"end": 5750,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5749,
											"end": 5750,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5738,
											"end": 5750,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5793,
											"end": 5797,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "tag",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "tag",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5900,
											"end": 5905,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5900,
											"end": 5905,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "tag",
											"source": 1,
											"value": "108"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6031,
											"end": 6043,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 988,
											"end": 1083,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 988,
											"end": 1083,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "tag",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1050,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "tag",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1161,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 1161,
											"end": 1193,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 454,
											"end": 585,
											"name": "tag",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 454,
											"end": 585,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 529,
											"end": 560,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 529,
											"end": 560,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 519,
											"end": 561,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 519,
											"end": 561,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 509,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 509,
											"end": 579,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 575,
											"end": 576,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 573,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 565,
											"end": 577,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 590,
											"end": 837,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 590,
											"end": 837,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 649,
											"end": 655,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 702,
											"end": 704,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 690,
											"end": 699,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 681,
											"end": 688,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 677,
											"end": 700,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 673,
											"end": 705,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 670,
											"end": 722,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 670,
											"end": 722,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 670,
											"end": 722,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 718,
											"end": 719,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 715,
											"end": 716,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 708,
											"end": 720,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 670,
											"end": 722,
											"name": "tag",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 670,
											"end": 722,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 757,
											"end": 766,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 744,
											"end": 767,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 776,
											"end": 807,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 801,
											"end": 806,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 776,
											"end": 807,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 776,
											"end": 807,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 776,
											"end": 807,
											"name": "tag",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 776,
											"end": 807,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 826,
											"end": 831,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 590,
											"end": 837,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 590,
											"end": 837,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 842,
											"end": 1414,
											"name": "tag",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 842,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 962,
											"end": 968,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 976,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 978,
											"end": 984,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1031,
											"end": 1033,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1019,
											"end": 1028,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1010,
											"end": 1017,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1006,
											"end": 1029,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1002,
											"end": 1034,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 999,
											"end": 1051,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 999,
											"end": 1051,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "134"
										},
										{
											"begin": 999,
											"end": 1051,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1047,
											"end": 1048,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1044,
											"end": 1045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1037,
											"end": 1049,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 999,
											"end": 1051,
											"name": "tag",
											"source": 7,
											"value": "134"
										},
										{
											"begin": 999,
											"end": 1051,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1086,
											"end": 1095,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1073,
											"end": 1096,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1105,
											"end": 1136,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "135"
										},
										{
											"begin": 1130,
											"end": 1135,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1105,
											"end": 1136,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 1105,
											"end": 1136,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1105,
											"end": 1136,
											"name": "tag",
											"source": 7,
											"value": "135"
										},
										{
											"begin": 1105,
											"end": 1136,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1155,
											"end": 1160,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1197,
											"end": 1215,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1197,
											"end": 1215,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1184,
											"end": 1216,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1225,
											"end": 1258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "136"
										},
										{
											"begin": 1184,
											"end": 1216,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1225,
											"end": 1258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 1225,
											"end": 1258,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1225,
											"end": 1258,
											"name": "tag",
											"source": 7,
											"value": "136"
										},
										{
											"begin": 1225,
											"end": 1258,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1277,
											"end": 1284,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1336,
											"end": 1338,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1321,
											"end": 1339,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1321,
											"end": 1339,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1308,
											"end": 1340,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1349,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "137"
										},
										{
											"begin": 1308,
											"end": 1340,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1349,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 1349,
											"end": 1382,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1349,
											"end": 1382,
											"name": "tag",
											"source": 7,
											"value": "137"
										},
										{
											"begin": 1349,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1401,
											"end": 1408,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1391,
											"end": 1408,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1391,
											"end": 1408,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1391,
											"end": 1408,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 842,
											"end": 1414,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 842,
											"end": 1414,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 842,
											"end": 1414,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 842,
											"end": 1414,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 842,
											"end": 1414,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 842,
											"end": 1414,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1646,
											"end": 2002,
											"name": "tag",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 1646,
											"end": 2002,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1848,
											"end": 1850,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1851,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1851,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1851,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1867,
											"end": 1885,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1867,
											"end": 1885,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1867,
											"end": 1885,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1860,
											"end": 1890,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1926,
											"end": 1960,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1921,
											"end": 1923,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1906,
											"end": 1924,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1906,
											"end": 1924,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1899,
											"end": 1961,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1993,
											"end": 1995,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1978,
											"end": 1996,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1978,
											"end": 1996,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1646,
											"end": 2002,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2206,
											"end": 2390,
											"name": "tag",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 2206,
											"end": 2390,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2276,
											"end": 2282,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2329,
											"end": 2331,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2326,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2308,
											"end": 2315,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2304,
											"end": 2327,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2300,
											"end": 2332,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 2297,
											"end": 2349,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2297,
											"end": 2349,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "142"
										},
										{
											"begin": 2297,
											"end": 2349,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2346,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2342,
											"end": 2343,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2335,
											"end": 2347,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2297,
											"end": 2349,
											"name": "tag",
											"source": 7,
											"value": "142"
										},
										{
											"begin": 2297,
											"end": 2349,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2368,
											"end": 2384,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2384,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2206,
											"end": 2390,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2206,
											"end": 2390,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2984,
											"end": 3394,
											"name": "tag",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 2984,
											"end": 3394,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3186,
											"end": 3188,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3168,
											"end": 3189,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3168,
											"end": 3189,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3168,
											"end": 3189,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3225,
											"end": 3227,
											"name": "PUSH",
											"source": 7,
											"value": "2E"
										},
										{
											"begin": 3205,
											"end": 3223,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3205,
											"end": 3223,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3205,
											"end": 3223,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3198,
											"end": 3228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3264,
											"end": 3298,
											"name": "PUSH",
											"source": 7,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 3259,
											"end": 3261,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3244,
											"end": 3262,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3244,
											"end": 3262,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3237,
											"end": 3299,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3330,
											"end": 3332,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3308,
											"end": 3352,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3384,
											"end": 3387,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 3369,
											"end": 3388,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3369,
											"end": 3388,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2984,
											"end": 3394,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3399,
											"end": 3806,
											"name": "tag",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 3399,
											"end": 3806,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3601,
											"end": 3603,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3583,
											"end": 3604,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3604,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3604,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3640,
											"end": 3642,
											"name": "PUSH",
											"source": 7,
											"value": "2B"
										},
										{
											"begin": 3620,
											"end": 3638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3620,
											"end": 3638,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3620,
											"end": 3638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3613,
											"end": 3643,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3679,
											"end": 3713,
											"name": "PUSH",
											"source": 7,
											"value": "496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
										},
										{
											"begin": 3674,
											"end": 3676,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3659,
											"end": 3677,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3659,
											"end": 3677,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3652,
											"end": 3714,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E697469616C697A696E67"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3745,
											"end": 3747,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 3730,
											"end": 3748,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3730,
											"end": 3748,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3723,
											"end": 3764,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3796,
											"end": 3799,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 3781,
											"end": 3800,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3781,
											"end": 3800,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3399,
											"end": 3806,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"TWAPOracle()": "cab0d816",
							"alpaca()": "94faab23",
							"initialize(address,address,address)": "c0c53b8b",
							"owner()": "8da5cb5b",
							"priceSetter()": "2c09bef7",
							"renounceOwnership()": "715018a6",
							"setPriceSetter(address)": "63791e3c",
							"setValueFromTWAP()": "d0b373b3",
							"transferOwnership(address)": "f2fde38b",
							"xALPACACreditor()": "34d29f05"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"xALPACAPriceSetter_Unauthorize\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_priceSetter\",\"type\":\"address\"}],\"name\":\"LogSetPriceSetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_xALPACAValue\",\"type\":\"uint256\"}],\"name\":\"LogSetValueFromTWAP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TWAPOracle\",\"outputs\":[{\"internalType\":\"contract ITWAPOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alpaca\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IxALPACACreditor\",\"name\":\"_xALPACACreditor\",\"type\":\"address\"},{\"internalType\":\"contract ITWAPOracle\",\"name\":\"_TWAPOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alpaca\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceSetter\",\"type\":\"address\"}],\"name\":\"setPriceSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setValueFromTWAP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xALPACACreditor\",\"outputs\":[{\"internalType\":\"contract IxALPACACreditor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(address,address,address)\":{\"params\":{\"_TWAPOracle\":\"TWAPOracle\",\"_alpaca\":\"Contract's address of ALPACA Token\",\"_xALPACACreditor\":\"xALPACreditor\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"xALPACAPriceSetter - Being setter of xALPACACreditor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address)\":{\"notice\":\"Initialize xALPACAPriceSetter\"},\"setValueFromTWAP()\":{\"notice\":\"Set ALPACA Value (TWAP) as xALPACA Value\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/xALPACAPriceSetter.sol\":\"xALPACAPriceSetter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7\",\"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"contracts/interfaces/ITWAPOracle.sol\":{\"keccak256\":\"0x2ce5968e52ea2a2d9375369d1741e4bb62c1c556bdb491a45549acb7030fd483\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://2f95baa4ddab8f7652c660924962c2ee05cac0ea960fd1289c587f7b47fa7531\",\"dweb:/ipfs/QmPvhADjozUfAcgBPAAfu72vxqwgPcyC9djzST7ayTEq4d\"]},\"contracts/interfaces/IxALPACACreditor.sol\":{\"keccak256\":\"0xa2f0c7cac5a889c3dbd622fb1bf895456707ae274f252538056d46589743b437\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://a91a269562ef5e2ba57c2d10f290759ae269b92c72214217ef651a2cb1a30878\",\"dweb:/ipfs/QmYJUX8x2km2s5ULZErqqwALXtJ3ovtU2yiaSA6nNU2ZYg\"]},\"contracts/xALPACAPriceSetter.sol\":{\"keccak256\":\"0x12a20f6ac40c4da45c42c2b2f4a977b9b671fede09027befa19f998a4a107a86\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://65637db6c81a4832fe147bf3d371c4807148e42bf5d45a04e78d30080bb05932\",\"dweb:/ipfs/QmPbZtpde81X2Ai8USh1nrZNDHPLo86oLX7Jh5K31erwQT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "contracts/xALPACAPriceSetter.sol:xALPACAPriceSetter",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "contracts/xALPACAPriceSetter.sol:xALPACAPriceSetter",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 549,
								"contract": "contracts/xALPACAPriceSetter.sol:xALPACAPriceSetter",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "contracts/xALPACAPriceSetter.sol:xALPACAPriceSetter",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 122,
								"contract": "contracts/xALPACAPriceSetter.sol:xALPACAPriceSetter",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 613,
								"contract": "contracts/xALPACAPriceSetter.sol:xALPACAPriceSetter",
								"label": "xALPACACreditor",
								"offset": 0,
								"slot": "101",
								"type": "t_contract(IxALPACACreditor)585"
							},
							{
								"astId": 616,
								"contract": "contracts/xALPACAPriceSetter.sol:xALPACAPriceSetter",
								"label": "TWAPOracle",
								"offset": 0,
								"slot": "102",
								"type": "t_contract(ITWAPOracle)560"
							},
							{
								"astId": 618,
								"contract": "contracts/xALPACAPriceSetter.sol:xALPACAPriceSetter",
								"label": "alpaca",
								"offset": 0,
								"slot": "103",
								"type": "t_address"
							},
							{
								"astId": 620,
								"contract": "contracts/xALPACAPriceSetter.sol:xALPACAPriceSetter",
								"label": "priceSetter",
								"offset": 0,
								"slot": "104",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(ITWAPOracle)560": {
								"encoding": "inplace",
								"label": "contract ITWAPOracle",
								"numberOfBytes": "20"
							},
							"t_contract(IxALPACACreditor)585": {
								"encoding": "inplace",
								"label": "contract IxALPACACreditor",
								"numberOfBytes": "20"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"initialize(address,address,address)": {
								"notice": "Initialize xALPACAPriceSetter"
							},
							"setValueFromTWAP()": {
								"notice": "Set ALPACA Value (TWAP) as xALPACA Value"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							508
						],
						"ContextUpgradeable": [
							550
						],
						"Initializable": [
							265
						],
						"OwnableUpgradeable": [
							123
						]
					},
					"id": 124,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 124,
							"sourceUnit": 551,
							"src": "112:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 124,
							"sourceUnit": 266,
							"src": "154:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 265,
										"src": "733:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "733:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 550,
										"src": "748:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "748:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "198:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 123,
							"linearizedBaseContracts": [
								123,
								550,
								265
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "711:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "789:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 123,
									"src": "773:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "773:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 16,
									"name": "OwnershipTransferred",
									"nameLocation": "808:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "845:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "829:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "876:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "860:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "828:57:0"
									},
									"src": "802:84:0"
								},
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "1040:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 37,
														"src": "1050:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1050:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "892:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 19,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "1023:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1023:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "997:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1011:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:0"
									},
									"scope": 123,
									"src": "988:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 36,
										"nodeType": "Block",
										"src": "1151:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 32,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 535,
																"src": "1180:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1180:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 31,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "1161:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1161:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "1161:32:0"
											}
										]
									},
									"id": 37,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 29,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 28,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "1134:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1134:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1098:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1122:2:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1151:0:0"
									},
									"scope": 123,
									"src": "1089:111:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1331:30:0",
										"statements": [
											{
												"expression": {
													"id": 43,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1348:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 42,
												"id": 44,
												"nodeType": "Return",
												"src": "1341:13:0"
											}
										]
									},
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "1206:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 46,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1285:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1290:2:0"
									},
									"returnParameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "1322:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 40,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1322:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1321:9:0"
									},
									"scope": 123,
									"src": "1276:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1470:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 50,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 46,
																	"src": "1488:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1488:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 52,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 535,
																	"src": "1499:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 53,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1499:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1488:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 55,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1513:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 49,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1480:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 56,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1480:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 57,
												"nodeType": "ExpressionStatement",
												"src": "1480:68:0"
											},
											{
												"id": 58,
												"nodeType": "PlaceholderStatement",
												"src": "1558:1:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1367:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 60,
									"name": "onlyOwner",
									"nameLocation": "1458:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1467:2:0"
									},
									"src": "1449:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "1962:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 69,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1999:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1991:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 67,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1991:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 70,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1991:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 66,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "1972:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1972:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 72,
												"nodeType": "ExpressionStatement",
												"src": "1972:30:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1572:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 74,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 64,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 63,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "1952:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1952:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1917:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1934:2:0"
									},
									"returnParameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1962:0:0"
									},
									"scope": 123,
									"src": "1908:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "2228:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 88,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 83,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 77,
																"src": "2246:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 86,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2266:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 85,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2258:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 84,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2258:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 87,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2258:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2246:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 89,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2270:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 82,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2238:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2238:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 91,
												"nodeType": "ExpressionStatement",
												"src": "2238:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 93,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "2340:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 92,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "2321:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2321:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 95,
												"nodeType": "ExpressionStatement",
												"src": "2321:28:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "2015:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 80,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 79,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "2218:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2218:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2167:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2193:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "2185:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 76,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2185:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2184:18:0"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2228:0:0"
									},
									"scope": 123,
									"src": "2158:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 116,
										"nodeType": "Block",
										"src": "2573:124:0",
										"statements": [
											{
												"assignments": [
													104
												],
												"declarations": [
													{
														"constant": false,
														"id": 104,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2591:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 116,
														"src": "2583:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 103,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2583:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 106,
												"initialValue": {
													"id": 105,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2602:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2583:25:0"
											},
											{
												"expression": {
													"id": 109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 107,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2618:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 108,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 100,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2618:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 110,
												"nodeType": "ExpressionStatement",
												"src": "2618:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 112,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 104,
															"src": "2671:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 113,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "2681:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 111,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2650:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 115,
												"nodeType": "EmitStatement",
												"src": "2645:45:0"
											}
										]
									},
									"documentation": {
										"id": 98,
										"nodeType": "StructuredDocumentation",
										"src": "2362:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2519:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2546:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "2538:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 99,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2538:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2537:18:0"
									},
									"returnParameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2573:0:0"
									},
									"scope": 123,
									"src": "2510:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 118,
										"nodeType": "StructuredDocumentation",
										"src": "2703:254:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 122,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "2982:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 123,
									"src": "2962:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 119,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2962:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 121,
										"length": {
											"hexValue": "3439",
											"id": 120,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2970:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "2962:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 124,
							"src": "693:2297:0",
							"usedErrors": []
						}
					],
					"src": "87:2904:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							508
						],
						"Initializable": [
							265
						]
					},
					"id": 266,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 125,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 126,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 266,
							"sourceUnit": 509,
							"src": "138:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 127,
								"nodeType": "StructuredDocumentation",
								"src": "184:2198:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 265,
							"linearizedBaseContracts": [
								265
							],
							"name": "Initializable",
							"nameLocation": "2401:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "2421:109:1",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 130,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2549:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "2535:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 129,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2535:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "2568:91:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 133,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2677:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "2664:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 132,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2664:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "2697:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
									"id": 138,
									"name": "Initialized",
									"nameLocation": "2798:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2816:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "2810:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 135,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2810:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:15:1"
									},
									"src": "2792:33:1"
								},
								{
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "3101:257:1",
										"statements": [
											{
												"assignments": [
													142
												],
												"declarations": [
													{
														"constant": false,
														"id": 142,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3116:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 166,
														"src": "3111:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 141,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3111:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 146,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31",
															"id": 144,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3156:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 143,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "3133:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3133:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3111:47:1"
											},
											{
												"condition": {
													"id": 147,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 142,
													"src": "3172:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 153,
												"nodeType": "IfStatement",
												"src": "3168:65:1",
												"trueBody": {
													"id": 152,
													"nodeType": "Block",
													"src": "3188:45:1",
													"statements": [
														{
															"expression": {
																"id": 150,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 148,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "3202:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 149,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3218:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3202:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 151,
															"nodeType": "ExpressionStatement",
															"src": "3202:20:1"
														}
													]
												}
											},
											{
												"id": 154,
												"nodeType": "PlaceholderStatement",
												"src": "3242:1:1"
											},
											{
												"condition": {
													"id": 155,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 142,
													"src": "3257:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 165,
												"nodeType": "IfStatement",
												"src": "3253:99:1",
												"trueBody": {
													"id": 164,
													"nodeType": "Block",
													"src": "3273:79:1",
													"statements": [
														{
															"expression": {
																"id": 158,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 156,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "3287:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3303:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3287:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 159,
															"nodeType": "ExpressionStatement",
															"src": "3287:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3339:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 160,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "3327:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3327:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 163,
															"nodeType": "EmitStatement",
															"src": "3322:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "2831:242:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`."
									},
									"id": 167,
									"name": "initializer",
									"nameLocation": "3087:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3098:2:1"
									},
									"src": "3078:280:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 197,
										"nodeType": "Block",
										"src": "4173:269:1",
										"statements": [
											{
												"assignments": [
													173
												],
												"declarations": [
													{
														"constant": false,
														"id": 173,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4188:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 197,
														"src": "4183:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 172,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4183:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 177,
												"initialValue": {
													"arguments": [
														{
															"id": 175,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 170,
															"src": "4228:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 174,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "4205:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4205:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4183:53:1"
											},
											{
												"condition": {
													"id": 178,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 173,
													"src": "4250:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 184,
												"nodeType": "IfStatement",
												"src": "4246:65:1",
												"trueBody": {
													"id": 183,
													"nodeType": "Block",
													"src": "4266:45:1",
													"statements": [
														{
															"expression": {
																"id": 181,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 179,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "4280:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 180,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4296:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "4280:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 182,
															"nodeType": "ExpressionStatement",
															"src": "4280:20:1"
														}
													]
												}
											},
											{
												"id": 185,
												"nodeType": "PlaceholderStatement",
												"src": "4320:1:1"
											},
											{
												"condition": {
													"id": 186,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 173,
													"src": "4335:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 196,
												"nodeType": "IfStatement",
												"src": "4331:105:1",
												"trueBody": {
													"id": 195,
													"nodeType": "Block",
													"src": "4351:85:1",
													"statements": [
														{
															"expression": {
																"id": 189,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 187,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "4365:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 188,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4381:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "4365:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 190,
															"nodeType": "ExpressionStatement",
															"src": "4365:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 192,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 170,
																		"src": "4417:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 191,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "4405:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4405:20:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 194,
															"nodeType": "EmitStatement",
															"src": "4400:25:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "3364:766:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n initialization step. This is essential to configure modules that are added through upgrades and that require\n initialization.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator."
									},
									"id": 198,
									"name": "reinitializer",
									"nameLocation": "4144:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4164:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "4158:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 169,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4158:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4157:15:1"
									},
									"src": "4135:307:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 207,
										"nodeType": "Block",
										"src": "4680:97:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 202,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "4698:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4713:45:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 201,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4690:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4690:69:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 205,
												"nodeType": "ExpressionStatement",
												"src": "4690:69:1"
											},
											{
												"id": 206,
												"nodeType": "PlaceholderStatement",
												"src": "4769:1:1"
											}
										]
									},
									"documentation": {
										"id": 199,
										"nodeType": "StructuredDocumentation",
										"src": "4448:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 208,
									"name": "onlyInitializing",
									"nameLocation": "4661:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4677:2:1"
									},
									"src": "4652:125:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 220,
										"nodeType": "Block",
										"src": "5225:56:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 215,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5263:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		},
																		"typeName": {
																			"id": 214,
																			"name": "uint8",
																			"nodeType": "ElementaryTypeName",
																			"src": "5263:5:1",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		}
																	],
																	"id": 213,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "5258:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 216,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5258:11:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint8",
																	"typeString": "type(uint8)"
																}
															},
															"id": 217,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "5258:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 212,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "5235:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5235:39:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 219,
												"nodeType": "ExpressionStatement",
												"src": "5235:39:1"
											}
										]
									},
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "4783:388:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies."
									},
									"id": 221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5185:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5205:2:1"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5225:0:1"
									},
									"scope": 265,
									"src": "5176:105:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 263,
										"nodeType": "Block",
										"src": "5357:738:1",
										"statements": [
											{
												"condition": {
													"id": 228,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 133,
													"src": "5684:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 261,
													"nodeType": "Block",
													"src": "5922:167:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		"id": 251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 249,
																			"name": "_initialized",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 130,
																			"src": "5944:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 250,
																			"name": "version",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 223,
																			"src": "5959:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"src": "5944:22:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
																		"id": 252,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5968:48:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		},
																		"value": "Initializable: contract is already initialized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		}
																	],
																	"id": 248,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5936:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 253,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5936:81:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 254,
															"nodeType": "ExpressionStatement",
															"src": "5936:81:1"
														},
														{
															"expression": {
																"id": 257,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 255,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "6031:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 256,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 223,
																	"src": "6046:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6031:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 258,
															"nodeType": "ExpressionStatement",
															"src": "6031:22:1"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 259,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6074:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 227,
															"id": 260,
															"nodeType": "Return",
															"src": "6067:11:1"
														}
													]
												},
												"id": 262,
												"nodeType": "IfStatement",
												"src": "5680:409:1",
												"trueBody": {
													"id": 247,
													"nodeType": "Block",
													"src": "5699:217:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 241,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 232,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 230,
																				"name": "version",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 223,
																				"src": "5738:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 231,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5749:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "5738:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"id": 240,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "5754:45:1",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 237,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "5793:4:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$265",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$265",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 236,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "5785:7:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 235,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "5785:7:1",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 238,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "5785:13:1",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 233,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 508,
																						"src": "5755:18:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$508_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 234,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 283,
																					"src": "5755:29:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 239,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5755:44:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "5738:61:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
																		"id": 242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5817:48:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		},
																		"value": "Initializable: contract is already initialized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		}
																	],
																	"id": 229,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5713:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 243,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5713:166:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 244,
															"nodeType": "ExpressionStatement",
															"src": "5713:166:1"
														},
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 245,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5900:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 227,
															"id": 246,
															"nodeType": "Return",
															"src": "5893:12:1"
														}
													]
												}
											}
										]
									},
									"id": 264,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setInitializedVersion",
									"nameLocation": "5296:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5325:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "5319:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 222,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5319:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5318:15:1"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "5351:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 225,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5351:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5350:6:1"
									},
									"scope": 265,
									"src": "5287:808:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 266,
							"src": "2383:3714:1",
							"usedErrors": []
						}
					],
					"src": "113:5985:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							508
						]
					},
					"id": 509,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 267,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AddressUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 268,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:2",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 508,
							"linearizedBaseContracts": [
								508
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 282,
										"nodeType": "Block",
										"src": "1252:254:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 276,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 271,
																"src": "1476:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1476:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 278,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1476:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 279,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1498:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1476:23:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 275,
												"id": 281,
												"nodeType": "Return",
												"src": "1469:30:2"
											}
										]
									},
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "227:954:2",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 283,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1195:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1214:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "1206:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 270,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1205:17:2"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "1246:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 273,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1246:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1245:6:2"
									},
									"scope": 508,
									"src": "1186:320:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 316,
										"nodeType": "Block",
										"src": "2494:241:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 298,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 294,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2520:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$508",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$508",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2512:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 292,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2512:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 295,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2512:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 296,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2512:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 297,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 288,
																"src": "2537:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2512:31:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 299,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2545:31:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 291,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2504:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2504:73:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 301,
												"nodeType": "ExpressionStatement",
												"src": "2504:73:2"
											},
											{
												"assignments": [
													303,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 303,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2594:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 316,
														"src": "2589:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 302,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2589:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 310,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2637:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 304,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 286,
																"src": "2607:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2607:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 307,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 306,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 288,
																"src": "2629:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2607:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2588:52:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 312,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "2658:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 313,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2667:60:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 311,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2650:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:78:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 315,
												"nodeType": "ExpressionStatement",
												"src": "2650:78:2"
											}
										]
									},
									"documentation": {
										"id": 284,
										"nodeType": "StructuredDocumentation",
										"src": "1512:906:2",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2432:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2458:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "2442:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2442:15:2",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2477:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "2469:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2441:43:2"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2494:0:2"
									},
									"scope": 508,
									"src": "2423:312:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 333,
										"nodeType": "Block",
										"src": "3566:84:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 328,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 320,
															"src": "3596:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 329,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "3604:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3610:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 327,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															334,
															354
														],
														"referencedDeclaration": 354,
														"src": "3583:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3583:60:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 326,
												"id": 332,
												"nodeType": "Return",
												"src": "3576:67:2"
											}
										]
									},
									"documentation": {
										"id": 318,
										"nodeType": "StructuredDocumentation",
										"src": "2741:731:2",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3486:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3507:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3499:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 319,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3499:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3528:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3515:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 321,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3515:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:35:2"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3552:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 324,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3552:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3551:14:2"
									},
									"scope": 508,
									"src": "3477:173:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "4019:76:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 337,
															"src": "4058:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 348,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "4066:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4072:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 350,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "4075:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 346,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															374,
															424
														],
														"referencedDeclaration": 424,
														"src": "4036:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4036:52:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 345,
												"id": 352,
												"nodeType": "Return",
												"src": "4029:59:2"
											}
										]
									},
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "3656:211:2",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3881:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3911:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3903:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3903:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3940:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3927:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 338,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3927:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3968:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3954:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 340,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3954:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:93:2"
									},
									"returnParameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "4005:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 343,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4005:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4004:14:2"
									},
									"scope": 508,
									"src": "3872:223:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 373,
										"nodeType": "Block",
										"src": "4600:111:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 367,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "4639:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 368,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "4647:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 369,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "4653:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 370,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4660:43:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 366,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															374,
															424
														],
														"referencedDeclaration": 424,
														"src": "4617:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4617:87:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 365,
												"id": 372,
												"nodeType": "Return",
												"src": "4610:94:2"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "4101:351:2",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 374,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4466:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4505:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4497:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4497:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4534:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4521:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 358,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4521:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4556:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4548:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4548:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4487:80:2"
									},
									"returnParameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4586:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 363,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4586:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4585:14:2"
									},
									"scope": 508,
									"src": "4457:254:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 423,
										"nodeType": "Block",
										"src": "5138:320:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 391,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5164:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$508",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$508",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5156:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 389,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5156:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 392,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5156:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 393,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5156:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 394,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 381,
																"src": "5181:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5156:30:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5188:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 388,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5148:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5148:81:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 398,
												"nodeType": "ExpressionStatement",
												"src": "5148:81:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 401,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 377,
																	"src": "5258:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 400,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 283,
																"src": "5247:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5247:18:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5267:31:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 399,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5239:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5239:60:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 405,
												"nodeType": "ExpressionStatement",
												"src": "5239:60:2"
											},
											{
												"assignments": [
													407,
													409
												],
												"declarations": [
													{
														"constant": false,
														"id": 407,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5316:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 423,
														"src": "5311:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 406,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5311:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 409,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5338:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 423,
														"src": "5325:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 408,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5325:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 416,
												"initialValue": {
													"arguments": [
														{
															"id": 414,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 379,
															"src": "5378:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 410,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 377,
																"src": "5352:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5352:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 413,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 412,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 381,
																"src": "5371:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5352:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5352:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5310:73:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 418,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "5417:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 419,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "5426:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 420,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "5438:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 417,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "5400:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5400:51:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 387,
												"id": 422,
												"nodeType": "Return",
												"src": "5393:58:2"
											}
										]
									},
									"documentation": {
										"id": 375,
										"nodeType": "StructuredDocumentation",
										"src": "4717:237:2",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 424,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4968:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5007:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "4999:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4999:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 379,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5036:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5023:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 378,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5023:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5058:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5050:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5050:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5087:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5073:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 382,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5073:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4989:116:2"
									},
									"returnParameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5124:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 385,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5124:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5123:14:2"
									},
									"scope": 508,
									"src": "4959:499:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 440,
										"nodeType": "Block",
										"src": "5735:97:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 435,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "5771:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 436,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "5779:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5785:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 434,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															441,
															476
														],
														"referencedDeclaration": 476,
														"src": "5752:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5752:73:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 433,
												"id": 439,
												"nodeType": "Return",
												"src": "5745:80:2"
											}
										]
									},
									"documentation": {
										"id": 425,
										"nodeType": "StructuredDocumentation",
										"src": "5464:166:2",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 441,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5644:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5671:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5663:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 426,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5692:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5679:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 428,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5679:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5662:35:2"
									},
									"returnParameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5721:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 431,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5721:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5720:14:2"
									},
									"scope": 508,
									"src": "5635:197:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 475,
										"nodeType": "Block",
										"src": "6174:228:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 455,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 444,
																	"src": "6203:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 454,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 283,
																"src": "6192:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6192:18:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6212:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 453,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6184:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6184:67:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 459,
												"nodeType": "ExpressionStatement",
												"src": "6184:67:2"
											},
											{
												"assignments": [
													461,
													463
												],
												"declarations": [
													{
														"constant": false,
														"id": 461,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6268:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 475,
														"src": "6263:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 460,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6263:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 463,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6290:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 475,
														"src": "6277:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 462,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6277:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 468,
												"initialValue": {
													"arguments": [
														{
															"id": 466,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "6322:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 464,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 444,
															"src": "6304:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 465,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6304:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6304:23:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6262:65:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 470,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "6361:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 471,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "6370:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 472,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 448,
															"src": "6382:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 469,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "6344:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6344:51:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 452,
												"id": 474,
												"nodeType": "Return",
												"src": "6337:58:2"
											}
										]
									},
									"documentation": {
										"id": 442,
										"nodeType": "StructuredDocumentation",
										"src": "5838:173:2",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6025:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6061:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6053:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6053:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6090:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6077:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 445,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6077:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6118:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6104:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 447,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6104:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6043:93:2"
									},
									"returnParameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6160:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 450,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6160:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6159:14:2"
									},
									"scope": 508,
									"src": "6016:386:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "6782:532:2",
										"statements": [
											{
												"condition": {
													"id": 488,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 479,
													"src": "6796:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 504,
													"nodeType": "Block",
													"src": "6853:455:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 492,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 481,
																		"src": "6937:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 493,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6937:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 494,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6957:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6937:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 502,
																"nodeType": "Block",
																"src": "7245:53:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 499,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 483,
																					"src": "7270:12:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 498,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "7263:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7263:20:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 501,
																		"nodeType": "ExpressionStatement",
																		"src": "7263:20:2"
																	}
																]
															},
															"id": 503,
															"nodeType": "IfStatement",
															"src": "6933:365:2",
															"trueBody": {
																"id": 497,
																"nodeType": "Block",
																"src": "6960:279:2",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7080:145:2",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7102:40:2",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7131:10:2"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7125:5:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7125:17:2"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7106:15:2",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7174:2:2",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7178:10:2"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7170:3:2"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7170:19:2"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7191:15:2"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7163:6:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7163:44:2"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7163:44:2"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 481,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7131:10:2",
																				"valueSize": 1
																			},
																			{
																				"declaration": 481,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7178:10:2",
																				"valueSize": 1
																			}
																		],
																		"id": 496,
																		"nodeType": "InlineAssembly",
																		"src": "7071:154:2"
																	}
																]
															}
														}
													]
												},
												"id": 505,
												"nodeType": "IfStatement",
												"src": "6792:516:2",
												"trueBody": {
													"id": 491,
													"nodeType": "Block",
													"src": "6805:42:2",
													"statements": [
														{
															"expression": {
																"id": 489,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 481,
																"src": "6826:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 487,
															"id": 490,
															"nodeType": "Return",
															"src": "6819:17:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 477,
										"nodeType": "StructuredDocumentation",
										"src": "6408:209:2",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "6631:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6662:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6657:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 478,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6657:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6692:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6679:23:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 480,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6679:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6726:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6712:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 482,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6712:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6647:97:2"
									},
									"returnParameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6768:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 485,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:14:2"
									},
									"scope": 508,
									"src": "6622:692:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 509,
							"src": "194:7122:2",
							"usedErrors": []
						}
					],
					"src": "101:7216:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							508
						],
						"ContextUpgradeable": [
							550
						],
						"Initializable": [
							265
						]
					},
					"id": 551,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 510,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 511,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 551,
							"sourceUnit": 266,
							"src": "110:42:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 513,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 265,
										"src": "691:13:3"
									},
									"id": 514,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:3"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 512,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:3",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 550,
							"linearizedBaseContracts": [
								550,
								265
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 519,
										"nodeType": "Block",
										"src": "763:7:3",
										"statements": []
									},
									"id": 520,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 517,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 516,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "746:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:3"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 515,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:3"
									},
									"returnParameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:3"
									},
									"scope": 550,
									"src": "711:59:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 525,
										"nodeType": "Block",
										"src": "838:7:3",
										"statements": []
									},
									"id": 526,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 523,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 522,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "821:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:3"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:3"
									},
									"returnParameters": {
										"id": 524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:3"
									},
									"scope": 550,
									"src": "776:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "912:34:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 531,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 530,
												"id": 533,
												"nodeType": "Return",
												"src": "922:17:3"
											}
										]
									},
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:3"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "903:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:3"
									},
									"scope": 550,
									"src": "850:96:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 543,
										"nodeType": "Block",
										"src": "1019:32:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 540,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 539,
												"id": 542,
												"nodeType": "Return",
												"src": "1029:15:3"
											}
										]
									},
									"id": 544,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:3"
									},
									"returnParameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 544,
												"src": "1003:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 537,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:3"
									},
									"scope": 550,
									"src": "952:99:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 545,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:3",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 549,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 550,
									"src": "1316:25:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 546,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 548,
										"length": {
											"hexValue": "3530",
											"id": 547,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:3",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:3",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 551,
							"src": "651:693:3",
							"usedErrors": []
						}
					],
					"src": "86:1259:3"
				},
				"id": 3
			},
			"contracts/interfaces/ITWAPOracle.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/ITWAPOracle.sol",
					"exportedSymbols": {
						"ITWAPOracle": [
							560
						]
					},
					"id": 561,
					"license": "BUSL",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 552,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "246:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITWAPOracle",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 560,
							"linearizedBaseContracts": [
								560
							],
							"name": "ITWAPOracle",
							"nameLocation": "283:11:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "41976e09",
									"id": 559,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPrice",
									"nameLocation": "309:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "_tokenAddress",
												"nameLocation": "326:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "318:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "318:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "317:23:4"
									},
									"returnParameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "364:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 556,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "364:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "363:9:4"
									},
									"scope": 560,
									"src": "300:73:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 561,
							"src": "273:103:4",
							"usedErrors": []
						}
					],
					"src": "246:130:4"
				},
				"id": 4
			},
			"contracts/interfaces/IxALPACACreditor.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IxALPACACreditor.sol",
					"exportedSymbols": {
						"IxALPACACreditor": [
							585
						]
					},
					"id": 586,
					"license": "BUSL",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 562,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "246:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IxALPACACreditor",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 585,
							"linearizedBaseContracts": [
								585
							],
							"name": "IxALPACACreditor",
							"nameLocation": "283:16:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "dad6f0dc",
									"id": 569,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUserCredit",
									"nameLocation": "314:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "336:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "328:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 563,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "328:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "327:15:5"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "366:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 566,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "366:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "365:9:5"
									},
									"scope": 585,
									"src": "305:70:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "cd946ba8",
									"id": 574,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setValuePerxALPACA",
									"nameLocation": "390:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "_newValuePerxALPACA",
												"nameLocation": "417:19:5",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "409:27:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 570,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "409:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "408:29:5"
									},
									"returnParameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "446:0:5"
									},
									"scope": 585,
									"src": "381:66:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "b6df14ab",
									"id": 579,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setValueSetter",
									"nameLocation": "462:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "_newValueSetter",
												"nameLocation": "485:15:5",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "477:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "477:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "476:25:5"
									},
									"returnParameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "510:0:5"
									},
									"scope": 585,
									"src": "453:58:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2ba4f0a2",
									"id": 584,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "valuePerxALPACA",
									"nameLocation": "526:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "541:2:5"
									},
									"returnParameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "567:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 581,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "567:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "566:9:5"
									},
									"scope": 585,
									"src": "517:59:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 586,
							"src": "273:306:5",
							"usedErrors": []
						}
					],
					"src": "246:333:5"
				},
				"id": 5
			},
			"contracts/xALPACAPriceSetter.sol": {
				"ast": {
					"absolutePath": "contracts/xALPACAPriceSetter.sol",
					"exportedSymbols": {
						"ITWAPOracle": [
							560
						],
						"IxALPACACreditor": [
							585
						],
						"OwnableUpgradeable": [
							123
						],
						"xALPACAPriceSetter": [
							706
						]
					},
					"id": 707,
					"license": "BUSL",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 587,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "246:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 589,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 707,
							"sourceUnit": 124,
							"src": "273:103:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 588,
										"name": "OwnableUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 123,
										"src": "282:18:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IxALPACACreditor.sol",
							"file": "./interfaces/IxALPACACreditor.sol",
							"id": 591,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 707,
							"sourceUnit": 586,
							"src": "380:69:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 590,
										"name": "IxALPACACreditor",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 585,
										"src": "389:16:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/ITWAPOracle.sol",
							"file": "./interfaces/ITWAPOracle.sol",
							"id": 593,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 707,
							"sourceUnit": 561,
							"src": "451:59:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 592,
										"name": "ITWAPOracle",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 560,
										"src": "460:11:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 595,
										"name": "OwnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 123,
										"src": "610:18:6"
									},
									"id": 596,
									"nodeType": "InheritanceSpecifier",
									"src": "610:18:6"
								}
							],
							"canonicalName": "xALPACAPriceSetter",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 594,
								"nodeType": "StructuredDocumentation",
								"src": "514:65:6",
								"text": "@title xALPACAPriceSetter - Being setter of xALPACACreditor"
							},
							"fullyImplemented": true,
							"id": 706,
							"linearizedBaseContracts": [
								706,
								123,
								550,
								265
							],
							"name": "xALPACAPriceSetter",
							"nameLocation": "588:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "319b98be05fdbfe94f3cf2046d4cb3ab593056698700d2e808692638dc6ca4e6",
									"id": 602,
									"name": "LogSetValueFromTWAP",
									"nameLocation": "661:19:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"indexed": true,
												"mutability": "mutable",
												"name": "_caller",
												"nameLocation": "697:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "681:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 597,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "681:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"indexed": false,
												"mutability": "mutable",
												"name": "_xALPACAValue",
												"nameLocation": "714:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "706:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "706:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "680:48:6"
									},
									"src": "655:74:6"
								},
								{
									"anonymous": false,
									"eventSelector": "73ac14f6c6f83ac21ceaedde9a348f537e8dcd3931f90b9cf101f14e534f735c",
									"id": 608,
									"name": "LogSetPriceSetter",
									"nameLocation": "739:17:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 604,
												"indexed": true,
												"mutability": "mutable",
												"name": "_caller",
												"nameLocation": "773:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "757:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 603,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "757:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"indexed": true,
												"mutability": "mutable",
												"name": "_priceSetter",
												"nameLocation": "798:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "782:28:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 605,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "782:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "756:55:6"
									},
									"src": "733:79:6"
								},
								{
									"errorSelector": "fe77f37f",
									"id": 610,
									"name": "xALPACAPriceSetter_Unauthorize",
									"nameLocation": "845:30:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "875:2:6"
									},
									"src": "839:39:6"
								},
								{
									"constant": false,
									"functionSelector": "34d29f05",
									"id": 613,
									"mutability": "mutable",
									"name": "xALPACACreditor",
									"nameLocation": "929:15:6",
									"nodeType": "VariableDeclaration",
									"scope": 706,
									"src": "905:39:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IxALPACACreditor_$585",
										"typeString": "contract IxALPACACreditor"
									},
									"typeName": {
										"id": 612,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 611,
											"name": "IxALPACACreditor",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 585,
											"src": "905:16:6"
										},
										"referencedDeclaration": 585,
										"src": "905:16:6",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IxALPACACreditor_$585",
											"typeString": "contract IxALPACACreditor"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "cab0d816",
									"id": 616,
									"mutability": "mutable",
									"name": "TWAPOracle",
									"nameLocation": "968:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 706,
									"src": "949:29:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ITWAPOracle_$560",
										"typeString": "contract ITWAPOracle"
									},
									"typeName": {
										"id": 615,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 614,
											"name": "ITWAPOracle",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 560,
											"src": "949:11:6"
										},
										"referencedDeclaration": 560,
										"src": "949:11:6",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ITWAPOracle_$560",
											"typeString": "contract ITWAPOracle"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "94faab23",
									"id": 618,
									"mutability": "mutable",
									"name": "alpaca",
									"nameLocation": "998:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 706,
									"src": "983:21:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 617,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "983:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2c09bef7",
									"id": 620,
									"mutability": "mutable",
									"name": "priceSetter",
									"nameLocation": "1024:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 706,
									"src": "1009:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 619,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1009:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 653,
										"nodeType": "Block",
										"src": "1346:163:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 634,
															"name": "OwnableUpgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 123,
															"src": "1355:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_OwnableUpgradeable_$123_$",
																"typeString": "type(contract OwnableUpgradeable)"
															}
														},
														"id": 636,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "__Ownable_init",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 26,
														"src": "1355:33:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1355:35:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 638,
												"nodeType": "ExpressionStatement",
												"src": "1355:35:6"
											},
											{
												"expression": {
													"id": 643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 639,
														"name": "xALPACACreditor",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 613,
														"src": "1397:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IxALPACACreditor_$585",
															"typeString": "contract IxALPACACreditor"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 641,
																"name": "_xALPACACreditor",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 624,
																"src": "1432:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IxALPACACreditor_$585",
																	"typeString": "contract IxALPACACreditor"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IxALPACACreditor_$585",
																	"typeString": "contract IxALPACACreditor"
																}
															],
															"id": 640,
															"name": "IxALPACACreditor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 585,
															"src": "1415:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IxALPACACreditor_$585_$",
																"typeString": "type(contract IxALPACACreditor)"
															}
														},
														"id": 642,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1415:34:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IxALPACACreditor_$585",
															"typeString": "contract IxALPACACreditor"
														}
													},
													"src": "1397:52:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IxALPACACreditor_$585",
														"typeString": "contract IxALPACACreditor"
													}
												},
												"id": 644,
												"nodeType": "ExpressionStatement",
												"src": "1397:52:6"
											},
											{
												"expression": {
													"id": 647,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 645,
														"name": "TWAPOracle",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 616,
														"src": "1456:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ITWAPOracle_$560",
															"typeString": "contract ITWAPOracle"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 646,
														"name": "_TWAPOracle",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 627,
														"src": "1469:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ITWAPOracle_$560",
															"typeString": "contract ITWAPOracle"
														}
													},
													"src": "1456:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ITWAPOracle_$560",
														"typeString": "contract ITWAPOracle"
													}
												},
												"id": 648,
												"nodeType": "ExpressionStatement",
												"src": "1456:24:6"
											},
											{
												"expression": {
													"id": 651,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 649,
														"name": "alpaca",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 618,
														"src": "1487:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 650,
														"name": "_alpaca",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 629,
														"src": "1496:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1487:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 652,
												"nodeType": "ExpressionStatement",
												"src": "1487:16:6"
											}
										]
									},
									"documentation": {
										"id": 621,
										"nodeType": "StructuredDocumentation",
										"src": "1044:180:6",
										"text": "@notice Initialize xALPACAPriceSetter\n @param _xALPACACreditor xALPACreditor\n @param _TWAPOracle TWAPOracle\n @param _alpaca Contract's address of ALPACA Token"
									},
									"functionSelector": "c0c53b8b",
									"id": 654,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 632,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 631,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 167,
												"src": "1334:11:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1334:11:6"
										}
									],
									"name": "initialize",
									"nameLocation": "1237:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "_xALPACACreditor",
												"nameLocation": "1265:16:6",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "1248:33:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IxALPACACreditor_$585",
													"typeString": "contract IxALPACACreditor"
												},
												"typeName": {
													"id": 623,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 622,
														"name": "IxALPACACreditor",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 585,
														"src": "1248:16:6"
													},
													"referencedDeclaration": 585,
													"src": "1248:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IxALPACACreditor_$585",
														"typeString": "contract IxALPACACreditor"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "_TWAPOracle",
												"nameLocation": "1295:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "1283:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ITWAPOracle_$560",
													"typeString": "contract ITWAPOracle"
												},
												"typeName": {
													"id": 626,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 625,
														"name": "ITWAPOracle",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 560,
														"src": "1283:11:6"
													},
													"referencedDeclaration": 560,
													"src": "1283:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ITWAPOracle_$560",
														"typeString": "contract ITWAPOracle"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "_alpaca",
												"nameLocation": "1316:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "1308:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 628,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1308:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1247:77:6"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1346:0:6"
									},
									"scope": 706,
									"src": "1228:281:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "1580:94:6",
										"statements": [
											{
												"expression": {
													"id": 663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 661,
														"name": "priceSetter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 620,
														"src": "1587:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 662,
														"name": "_priceSetter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 656,
														"src": "1601:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1587:26:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 664,
												"nodeType": "ExpressionStatement",
												"src": "1587:26:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 666,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1643:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1643:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 668,
															"name": "_priceSetter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 656,
															"src": "1655:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 665,
														"name": "LogSetPriceSetter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 608,
														"src": "1625:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1625:43:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 670,
												"nodeType": "EmitStatement",
												"src": "1620:48:6"
											}
										]
									},
									"functionSelector": "63791e3c",
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 659,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 658,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "1570:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1570:9:6"
										}
									],
									"name": "setPriceSetter",
									"nameLocation": "1524:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "_priceSetter",
												"nameLocation": "1547:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "1539:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1539:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1538:22:6"
									},
									"returnParameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1580:0:6"
									},
									"scope": 706,
									"src": "1515:159:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 704,
										"nodeType": "Block",
										"src": "1773:275:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 676,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1784:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 677,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1784:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 678,
														"name": "priceSetter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 620,
														"src": "1798:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1784:25:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 684,
												"nodeType": "IfStatement",
												"src": "1780:87:6",
												"trueBody": {
													"id": 683,
													"nodeType": "Block",
													"src": "1811:56:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 680,
																	"name": "xALPACAPriceSetter_Unauthorize",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 610,
																	"src": "1827:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 681,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1827:32:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 682,
															"nodeType": "RevertStatement",
															"src": "1820:39:6"
														}
													]
												}
											},
											{
												"assignments": [
													686
												],
												"declarations": [
													{
														"constant": false,
														"id": 686,
														"mutability": "mutable",
														"name": "_xALPACAValue",
														"nameLocation": "1883:13:6",
														"nodeType": "VariableDeclaration",
														"scope": 704,
														"src": "1875:21:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 685,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1875:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 691,
												"initialValue": {
													"arguments": [
														{
															"id": 689,
															"name": "alpaca",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "1919:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 687,
															"name": "TWAPOracle",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "1899:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ITWAPOracle_$560",
																"typeString": "contract ITWAPOracle"
															}
														},
														"id": 688,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getPrice",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 559,
														"src": "1899:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 690,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1899:27:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1875:51:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 695,
															"name": "_xALPACAValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "1968:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 692,
															"name": "xALPACACreditor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 613,
															"src": "1933:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IxALPACACreditor_$585",
																"typeString": "contract IxALPACACreditor"
															}
														},
														"id": 694,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "setValuePerxALPACA",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 574,
														"src": "1933:34:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256) external"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1933:49:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 697,
												"nodeType": "ExpressionStatement",
												"src": "1933:49:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 699,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2016:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 700,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2016:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 701,
															"name": "_xALPACAValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "2028:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 698,
														"name": "LogSetValueFromTWAP",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 602,
														"src": "1996:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1996:46:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 703,
												"nodeType": "EmitStatement",
												"src": "1991:51:6"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "1680:52:6",
										"text": "@notice Set ALPACA Value (TWAP) as xALPACA Value"
									},
									"functionSelector": "d0b373b3",
									"id": 705,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setValueFromTWAP",
									"nameLocation": "1745:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1761:2:6"
									},
									"returnParameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:0:6"
									},
									"scope": 706,
									"src": "1736:312:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 707,
							"src": "579:1474:6",
							"usedErrors": [
								610
							]
						}
					],
					"src": "246:1807:6"
				},
				"id": 6
			}
		}
	}
}