{
	"id": "8aaa9fe2afbe9c41eee65c5bebd27c1d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/AutomatedVaultController.sol": {
				"content": "// SPDX-License-Identifier: BUSL\r\n/**\r\n  ∩~~~~∩ \r\n  ξ ･×･ ξ \r\n  ξ　~　ξ \r\n  ξ　　 ξ \r\n  ξ　　 “~～~～〇 \r\n  ξ　　　　　　 ξ \r\n  ξ ξ ξ~～~ξ ξ ξ \r\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\r\nAlpaca Fin Corporation\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nimport { ICreditor } from \"./interfaces/ICreditor.sol\";\r\nimport { IDeltaNeutralVault } from \"./interfaces/IDeltaNeutralVault.sol\";\r\n\r\n/// @title AutomatedVaultController - Controller how much investor can invest in the private automated vault\r\ncontract AutomatedVaultController is OwnableUpgradeable {\r\n  // --- Events ---\r\n  event LogSetPrivateVaults(address indexed _caller, IDeltaNeutralVault[] _vaults);\r\n  event LogSetCreditors(address indexed _caller, ICreditor[] _creditors);\r\n\r\n  // --- State Variables ---\r\n  ICreditor[] public creditors;\r\n  IDeltaNeutralVault[] public privateVaults;\r\n  mapping(address => mapping(address => uint256)) public userVaultShares;\r\n\r\n  constructor() initializer {}\r\n\r\n  /// @notice Initialize Automated Vault Controller\r\n  /// @param _creditors list of credit sources\r\n  /// @param _privateVaults list of private automated vaults\r\n  function initialize(ICreditor[] memory _creditors, IDeltaNeutralVault[] memory _privateVaults) external initializer {\r\n    // sanity check\r\n    uint256 _creditorLength = _creditors.length;\r\n    for (uint8 _i = 0; _i < _creditorLength; _i++) {\r\n      _creditors[_i].getUserCredit(address(0));\r\n    }\r\n\r\n    uint256 _privateVaultLength = _privateVaults.length;\r\n    for (uint8 _i = 0; _i < _privateVaultLength; _i++) {\r\n      _privateVaults[_i].shareToValue(1e18);\r\n    }\r\n\r\n    // effect\r\n    OwnableUpgradeable.__Ownable_init();\r\n    creditors = _creditors;\r\n    privateVaults = _privateVaults;\r\n  }\r\n\r\n  /// @notice Get total credit for this user\r\n  /// @param _user address of user.\r\n  /// @return _total user's credit in USD value\r\n  function totalCredit(address _user) public view returns (uint256) {\r\n    uint256 _total;\r\n    uint256 _creditorLength = creditors.length;\r\n    for (uint8 _i = 0; _i < _creditorLength; ) {\r\n      _total = _total + creditors[_i].getUserCredit(_user);\r\n      // uncheck overflow to save gas\r\n      unchecked {\r\n        _i++;\r\n      }\r\n    }\r\n    return _total;\r\n  }\r\n\r\n  /// @notice Get used credit for this user\r\n  /// @param _user address of user.\r\n  /// @return _total user's used credit in USD value from depositing into private automated vaults\r\n  function usedCredit(address _user) public view returns (uint256) {\r\n    uint256 _total;\r\n    uint256 _privateVaultLength = privateVaults.length;\r\n    for (uint8 _i = 0; _i < _privateVaultLength; ) {\r\n      uint256 _share = userVaultShares[_user][address(privateVaults[_i])];\r\n      if (_share != 0) _total += privateVaults[_i].shareToValue(_share);\r\n      // uncheck overflow to save gas\r\n      unchecked {\r\n        _i++;\r\n      }\r\n    }\r\n\r\n    return _total;\r\n  }\r\n\r\n  /// @notice Get availableCredit credit for this user\r\n  /// @param _user address of user.\r\n  /// @return _total remaining credit of this user\r\n  function availableCredit(address _user) public view returns (uint256) {\r\n    uint256 _total = totalCredit(_user);\r\n    uint256 _used = usedCredit(_user);\r\n    return _total > _used ? _total - _used : 0;\r\n  }\r\n\r\n  /// @notice set private automated vaults\r\n  /// @param _newPrivateVaults list of private automated vaults\r\n  function setPrivateVaults(IDeltaNeutralVault[] memory _newPrivateVaults) external onlyOwner {\r\n    // sanity check\r\n    uint256 _newPrivateVaultLength = _newPrivateVaults.length;\r\n    for (uint8 _i = 0; _i < _newPrivateVaultLength; ) {\r\n      _newPrivateVaults[_i].shareToValue(1e18);\r\n      // uncheck overflow to save gas\r\n      unchecked {\r\n        _i++;\r\n      }\r\n    }\r\n\r\n    // effect\r\n    privateVaults = _newPrivateVaults;\r\n\r\n    emit LogSetPrivateVaults(msg.sender, _newPrivateVaults);\r\n  }\r\n\r\n  /// @notice set private automated vaults\r\n  /// @param _newCreditors list of credit sources\r\n  function setCreditors(ICreditor[] memory _newCreditors) external onlyOwner {\r\n    // sanity check\r\n    uint256 _newCreditorLength = _newCreditors.length;\r\n    for (uint8 _i = 0; _i < _newCreditorLength; ) {\r\n      _newCreditors[_i].getUserCredit(address(0));\r\n      // uncheck overflow to save gas\r\n      unchecked {\r\n        _i++;\r\n      }\r\n    }\r\n\r\n    // effect\r\n    creditors = _newCreditors;\r\n\r\n    emit LogSetCreditors(msg.sender, _newCreditors);\r\n  }\r\n\r\n  /// @notice record user's automated vault's share from deposit\r\n  /// @param _user share owner\r\n  /// @param _shareAmount amount of automated vault's share\r\n  function onDeposit(address _user, uint256 _shareAmount) external {\r\n    // expected delta vault to be the caller\r\n    userVaultShares[_user][msg.sender] += _shareAmount;\r\n  }\r\n\r\n  /// @notice update user's automated vault's share from withdrawal\r\n  /// @param _user share owner\r\n  /// @param _shareAmount amount of automated vault's share withdrawn\r\n  function onWithdraw(address _user, uint256 _shareAmount) external {\r\n    userVaultShares[_user][msg.sender] = userVaultShares[_user][msg.sender] <= _shareAmount\r\n      ? 0\r\n      : userVaultShares[_user][msg.sender] - _shareAmount;\r\n  }\r\n\r\n  /// @notice Return share of user of given vault\r\n  /// @param _user share owner\r\n  /// @param _vault delta vault\r\n  function getUserVaultShares(address _user, address _vault) external view returns (uint256) {\r\n    return userVaultShares[_user][_vault];\r\n  }\r\n}\r\n"
			},
			"contracts/interfaces/IDeltaNeutralVault.sol": {
				"content": "// SPDX-License-Identifier: BUSL\r\n/**\r\n  ∩~~~~∩ \r\n  ξ ･×･ ξ \r\n  ξ　~　ξ \r\n  ξ　　 ξ \r\n  ξ　　 “~～~～〇 \r\n  ξ　　　　　　 ξ \r\n  ξ ξ ξ~～~ξ ξ ξ \r\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\r\nAlpaca Fin Corporation\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IDeltaNeutralVault {\r\n  function shareToValue(uint256 _shareAmount) external view returns (uint256);\r\n}\r\n"
			},
			"contracts/interfaces/ICreditor.sol": {
				"content": "// SPDX-License-Identifier: BUSL\r\n/**\r\n  ∩~~~~∩ \r\n  ξ ･×･ ξ \r\n  ξ　~　ξ \r\n  ξ　　 ξ \r\n  ξ　　 “~～~～〇 \r\n  ξ　　　　　　 ξ \r\n  ξ ξ ξ~～~ξ ξ ξ \r\n　 ξ_ξξ_ξ　ξ_ξξ_ξ\r\nAlpaca Fin Corporation\r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface ICreditor {\r\n  function getUserCredit(address _user) external view returns (uint256);\r\n}\r\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7\",\"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 549,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 122,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:7316  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:7316  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220406a3fa3a1e38b40e9c4b5ab104d07372148dde73244eefccfdc2d05a615b15764736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220406a3fa3a1e38b40e9c4b5ab104d07372148dde73244eefccfdc2d05a615b15764736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH PUSH11 0x3FA3A1E38B40E9C4B5AB10 0x4D SMOD CALLDATACOPY 0x21 BASEFEE 0xDD 0xE7 ORIGIN DIFFICULTY 0xEE 0xFC 0xCF 0xDC 0x2D SDIV 0xA6 ISZERO 0xB1 JUMPI PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "194:7122:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:7122:2;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220406a3fa3a1e38b40e9c4b5ab104d07372148dde73244eefccfdc2d05a615b15764736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH PUSH11 0x3FA3A1E38B40E9C4B5AB10 0x4D SMOD CALLDATACOPY 0x21 BASEFEE 0xDD 0xE7 ORIGIN DIFFICULTY 0xEE 0xFC 0xCF 0xDC 0x2D SDIV 0xA6 ISZERO 0xB1 JUMPI PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "194:7122:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220406a3fa3a1e38b40e9c4b5ab104d07372148dde73244eefccfdc2d05a615b15764736f6c634300080d0033",
									".code": [
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 549,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/AutomatedVaultController.sol": {
				"AutomatedVaultController": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_caller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "contract ICreditor[]",
									"name": "_creditors",
									"type": "address[]"
								}
							],
							"name": "LogSetCreditors",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_caller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "contract IDeltaNeutralVault[]",
									"name": "_vaults",
									"type": "address[]"
								}
							],
							"name": "LogSetPrivateVaults",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "availableCredit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "creditors",
							"outputs": [
								{
									"internalType": "contract ICreditor",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_vault",
									"type": "address"
								}
							],
							"name": "getUserVaultShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ICreditor[]",
									"name": "_creditors",
									"type": "address[]"
								},
								{
									"internalType": "contract IDeltaNeutralVault[]",
									"name": "_privateVaults",
									"type": "address[]"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_shareAmount",
									"type": "uint256"
								}
							],
							"name": "onDeposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_shareAmount",
									"type": "uint256"
								}
							],
							"name": "onWithdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "privateVaults",
							"outputs": [
								{
									"internalType": "contract IDeltaNeutralVault",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ICreditor[]",
									"name": "_newCreditors",
									"type": "address[]"
								}
							],
							"name": "setCreditors",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IDeltaNeutralVault[]",
									"name": "_newPrivateVaults",
									"type": "address[]"
								}
							],
							"name": "setPrivateVaults",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "totalCredit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "usedCredit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "userVaultShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"availableCredit(address)": {
								"params": {
									"_user": "address of user."
								},
								"returns": {
									"_0": "_total remaining credit of this user"
								}
							},
							"getUserVaultShares(address,address)": {
								"params": {
									"_user": "share owner",
									"_vault": "delta vault"
								}
							},
							"initialize(address[],address[])": {
								"params": {
									"_creditors": "list of credit sources",
									"_privateVaults": "list of private automated vaults"
								}
							},
							"onDeposit(address,uint256)": {
								"params": {
									"_shareAmount": "amount of automated vault's share",
									"_user": "share owner"
								}
							},
							"onWithdraw(address,uint256)": {
								"params": {
									"_shareAmount": "amount of automated vault's share withdrawn",
									"_user": "share owner"
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"setCreditors(address[])": {
								"params": {
									"_newCreditors": "list of credit sources"
								}
							},
							"setPrivateVaults(address[])": {
								"params": {
									"_newPrivateVaults": "list of private automated vaults"
								}
							},
							"totalCredit(address)": {
								"params": {
									"_user": "address of user."
								},
								"returns": {
									"_0": "_total user's credit in USD value"
								}
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"usedCredit(address)": {
								"params": {
									"_user": "address of user."
								},
								"returns": {
									"_0": "_total user's used credit in USD value from depositing into private automated vaults"
								}
							}
						},
						"title": "AutomatedVaultController - Controller how much investor can invest in the private automated vault",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/AutomatedVaultController.sol\":624:5551  contract AutomatedVaultController is OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/AutomatedVaultController.sol\":1054:1082  constructor() initializer {} */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3111:3130  bool isTopLevelCall */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3158  _setInitializedVersion(1) */\n  tag_4\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3156:3157  1 */\n  0x01\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3155  _setInitializedVersion */\n  tag_5\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3158  _setInitializedVersion(1) */\n  jump\t// in\ntag_4:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3111:3158  bool isTopLevelCall = _setInitializedVersion(1) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3172:3186  isTopLevelCall */\n  dup1\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3168:3233  if (isTopLevelCall) {... */\n  iszero\n  tag_6\n  jumpi\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3202:3215  _initializing */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3202:3222  _initializing = true */\n  dup1\n  sload\n  not(0xff00)\n  and\n  0x0100\n  or\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3168:3233  if (isTopLevelCall) {... */\ntag_6:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3257:3271  isTopLevelCall */\n  dup1\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3253:3352  if (isTopLevelCall) {... */\n  iszero\n  tag_8\n  jumpi\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3303:3308  false */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3287:3308  _initializing = false */\n  dup1\n  sload\n  not(0xff00)\n  and\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n  mload(0x40)\n  0x01\n    /* \"#utility.yul\":166:202   */\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n  0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n  swap1\n    /* \"#utility.yul\":154:156   */\n  0x20\n    /* \"#utility.yul\":139:157   */\n  add\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3253:3352  if (isTopLevelCall) {... */\ntag_8:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3101:3358  {... */\n  pop\n    /* \"contracts/AutomatedVaultController.sol\":624:5551  contract AutomatedVaultController is OwnableUpgradeable {... */\n  jump(tag_24)\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\ntag_5:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5351:5355  bool */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5684:5697  _initializing */\n  dup1\n  sload\n  0x0100\n  swap1\n  div\n  0xff\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5680:6089  if (_initializing) {... */\n  iszero\n  tag_13\n  jumpi\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5745  version */\n  dup2\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5750  version == 1 */\n  0xff\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5749:5750  1 */\n  0x01\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5750  version == 1 */\n  eq\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5799  version == 1 && !AddressUpgradeable.isContract(address(this)) */\n  dup1\n  iszero\n  tag_14\n  jumpi\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5755:5799  AddressUpgradeable.isContract(address(this)) */\n  tag_15\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5793:5797  this */\n  address\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5755:5784  AddressUpgradeable.isContract */\n  or(tag_0_83, shl(0x20, tag_16))\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5755:5799  AddressUpgradeable.isContract(address(this)) */\n  0x20\n  shr\n  jump\t// in\ntag_15:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5754:5799  !AddressUpgradeable.isContract(address(this)) */\n  iszero\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5799  version == 1 && !AddressUpgradeable.isContract(address(this)) */\ntag_14:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5713:5879  require(... */\n  tag_17\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":415:417   */\n  0x20\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5713:5879  require(... */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":397:418   */\n  mstore\n    /* \"#utility.yul\":454:456   */\n  0x2e\n    /* \"#utility.yul\":434:452   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":427:457   */\n  mstore\n  0x00\n  dup1\n  mload\n  0x20\n  data_1e93930c6875183d88cd66e10df1f1e695d60226ff9068840c89b95f525592b2\n  dup4\n  codecopy\n  dup2\n  mload\n  swap2\n  mstore\n    /* \"#utility.yul\":473:491   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":466:528   */\n  mstore\n  shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n    /* \"#utility.yul\":544:562   */\n  0x64\n  dup3\n  add\n    /* \"#utility.yul\":537:581   */\n  mstore\n    /* \"#utility.yul\":598:617   */\n  0x84\n  add\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5713:5879  require(... */\ntag_18:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_17:\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5900:5905  false */\n  0x00\n  swap2\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n  swap1\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5680:6089  if (_initializing) {... */\ntag_13:\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5956  _initialized */\n  sload(0x00)\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5966  _initialized < version */\n  0xff\n  dup1\n  dup5\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5956  _initialized */\n  swap2\n  and\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5966  _initialized < version */\n  lt\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5936:6017  require(_initialized < version, \"Initializable: contract is already initialized\") */\n  tag_21\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":415:417   */\n  0x20\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5936:6017  require(_initialized < version, \"Initializable: contract is already initialized\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":397:418   */\n  mstore\n    /* \"#utility.yul\":454:456   */\n  0x2e\n    /* \"#utility.yul\":434:452   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":427:457   */\n  mstore\n  0x00\n  dup1\n  mload\n  0x20\n  data_1e93930c6875183d88cd66e10df1f1e695d60226ff9068840c89b95f525592b2\n  dup4\n  codecopy\n  dup2\n  mload\n  swap2\n  mstore\n    /* \"#utility.yul\":473:491   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":466:528   */\n  mstore\n  shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n    /* \"#utility.yul\":544:562   */\n  0x64\n  dup3\n  add\n    /* \"#utility.yul\":537:581   */\n  mstore\n    /* \"#utility.yul\":598:617   */\n  0x84\n  add\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5936:6017  require(_initialized < version, \"Initializable: contract is already initialized\") */\n  tag_18\n    /* \"#utility.yul\":213:623   */\n  jump\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5936:6017  require(_initialized < version, \"Initializable: contract is already initialized\") */\ntag_21:\n  pop\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6031:6043  _initialized */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6031:6053  _initialized = version */\n  dup1\n  sload\n  not(0xff)\n  and\n  0xff\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n  0x01\n  swap1\n    /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n  jump\t// out\n    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1186:1506  function isContract(address account) internal view returns (bool) {... */\ntag_16:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n  and\n  extcodesize\n    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1499  account.code.length > 0 */\n  iszero\n  iszero\n  swap1\n    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1186:1506  function isContract(address account) internal view returns (bool) {... */\n  jump\t// out\n    /* \"#utility.yul\":213:623   */\ntag_24:\n    /* \"contracts/AutomatedVaultController.sol\":624:5551  contract AutomatedVaultController is OwnableUpgradeable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\ndata_1e93930c6875183d88cd66e10df1f1e695d60226ff9068840c89b95f525592b2 496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n\nsub_0: assembly {\n        /* \"contracts/AutomatedVaultController.sol\":624:5551  contract AutomatedVaultController is OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x87f049e4\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xccad973d\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xccad973d\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xe7d325a1\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xf220d16c\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x87f049e4\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x9f7b7ead\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xc5c66d4d\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      0x715018a6\n      gt\n      tag_20\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x71bc16b5\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x73cf25f8\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x7bf962de\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup1\n      0x2bf9518c\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x4fe01823\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5886216f\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/AutomatedVaultController.sol\":4697:4871  function onDeposit(address _user, uint256 _shareAmount) external {... */\n    tag_3:\n      tag_21\n      tag_22\n      calldatasize\n      0x04\n      tag_23\n      jump\t// in\n    tag_22:\n      tag_24\n      jump\t// in\n    tag_21:\n      stop\n        /* \"contracts/AutomatedVaultController.sol\":3475:3974  function setPrivateVaults(IDeltaNeutralVault[] memory _newPrivateVaults) external onlyOwner {... */\n    tag_4:\n      tag_21\n      tag_26\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_26:\n      tag_28\n      jump\t// in\n        /* \"contracts/AutomatedVaultController.sol\":3153:3360  function availableCredit(address _user) public view returns (uint256) {... */\n    tag_5:\n      tag_29\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n        /* \"#utility.yul\":2669:2694   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":2657:2659   */\n      0x20\n        /* \"#utility.yul\":2642:2660   */\n      add\n        /* \"contracts/AutomatedVaultController.sol\":3153:3360  function availableCredit(address _user) public view returns (uint256) {... */\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1908:2009  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      tag_21\n      tag_36\n      jump\t// in\n        /* \"contracts/AutomatedVaultController.sol\":898:926  ICreditor[] public creditors */\n    tag_7:\n      tag_37\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3071:3103   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3053:3104   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3041:3043   */\n      0x20\n        /* \"#utility.yul\":3026:3044   */\n      add\n        /* \"contracts/AutomatedVaultController.sol\":898:926  ICreditor[] public creditors */\n      tag_33\n        /* \"#utility.yul\":2890:3110   */\n      jump\n        /* \"contracts/AutomatedVaultController.sol\":1251:1850  function initialize(ICreditor[] memory _creditors, IDeltaNeutralVault[] memory _privateVaults) external initializer {... */\n    tag_8:\n      tag_21\n      tag_44\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_44:\n      tag_46\n      jump\t// in\n        /* \"contracts/AutomatedVaultController.sol\":2538:3002  function usedCredit(address _user) public view returns (uint256) {... */\n    tag_9:\n      tag_29\n      tag_48\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_48:\n      tag_49\n      jump\t// in\n        /* \"contracts/AutomatedVaultController.sol\":931:972  IDeltaNeutralVault[] public privateVaults */\n    tag_10:\n      tag_37\n      tag_52\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_52:\n      tag_53\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1276:1361  function owner() public view virtual returns (address) {... */\n    tag_11:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1276:1361  function owner() public view virtual returns (address) {... */\n      jump(tag_37)\n        /* \"contracts/AutomatedVaultController.sol\":977:1047  mapping(address => mapping(address => uint256)) public userVaultShares */\n    tag_12:\n      tag_29\n      tag_61\n      calldatasize\n      0x04\n      tag_62\n      jump\t// in\n    tag_61:\n      0x67\n      0x20\n      swap1\n      dup2\n      mstore\n      0x00\n      swap3\n      dup4\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n      swap1\n      swap2\n      mstore\n      swap1\n      dup3\n      mstore\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/AutomatedVaultController.sol\":5407:5548  function getUserVaultShares(address _user, address _vault) external view returns (uint256) {... */\n    tag_13:\n      tag_29\n      tag_66\n      calldatasize\n      0x04\n      tag_62\n      jump\t// in\n    tag_66:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":5512:5534  userVaultShares[_user] */\n      swap2\n      dup3\n      and\n        /* \"contracts/AutomatedVaultController.sol\":5489:5496  uint256 */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":5512:5534  userVaultShares[_user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/AutomatedVaultController.sol\":5512:5527  userVaultShares */\n      0x67\n        /* \"contracts/AutomatedVaultController.sol\":5512:5534  userVaultShares[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/AutomatedVaultController.sol\":5512:5542  userVaultShares[_user][_vault] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":5407:5548  function getUserVaultShares(address _user, address _vault) external view returns (uint256) {... */\n      jump\n        /* \"contracts/AutomatedVaultController.sol\":5049:5285  function onWithdraw(address _user, uint256 _shareAmount) external {... */\n    tag_14:\n      tag_21\n      tag_70\n      calldatasize\n      0x04\n      tag_23\n      jump\t// in\n    tag_70:\n      tag_71\n      jump\t// in\n        /* \"contracts/AutomatedVaultController.sol\":4075:4532  function setCreditors(ICreditor[] memory _newCreditors) external onlyOwner {... */\n    tag_15:\n      tag_21\n      tag_73\n      calldatasize\n      0x04\n      tag_74\n      jump\t// in\n    tag_73:\n      tag_75\n      jump\t// in\n        /* \"contracts/AutomatedVaultController.sol\":1988:2350  function totalCredit(address _user) public view returns (uint256) {... */\n    tag_16:\n      tag_29\n      tag_77\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_77:\n      tag_78\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2158:2356  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_17:\n      tag_21\n      tag_81\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_81:\n      tag_82\n      jump\t// in\n        /* \"contracts/AutomatedVaultController.sol\":4697:4871  function onDeposit(address _user, uint256 _shareAmount) external {... */\n    tag_24:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":4815:4837  userVaultShares[_user] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/AutomatedVaultController.sol\":4815:4830  userVaultShares */\n      0x67\n        /* \"contracts/AutomatedVaultController.sol\":4815:4837  userVaultShares[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/AutomatedVaultController.sol\":4838:4848  msg.sender */\n      caller\n        /* \"contracts/AutomatedVaultController.sol\":4815:4849  userVaultShares[_user][msg.sender] */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n        /* \"contracts/AutomatedVaultController.sol\":4815:4865  userVaultShares[_user][msg.sender] += _shareAmount */\n      dup1\n      sload\n        /* \"contracts/AutomatedVaultController.sol\":4853:4865  _shareAmount */\n      dup4\n      swap3\n        /* \"contracts/AutomatedVaultController.sol\":4815:4837  userVaultShares[_user] */\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":4815:4865  userVaultShares[_user][msg.sender] += _shareAmount */\n      tag_85\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":4853:4865  _shareAmount */\n      dup5\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":4815:4865  userVaultShares[_user][msg.sender] += _shareAmount */\n      tag_86\n      jump\t// in\n    tag_85:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":4697:4871  function onDeposit(address _user, uint256 _shareAmount) external {... */\n      jump\t// out\n        /* \"contracts/AutomatedVaultController.sol\":3475:3974  function setPrivateVaults(IDeltaNeutralVault[] memory _newPrivateVaults) external onlyOwner {... */\n    tag_28:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_91\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_92\n      swap1\n      tag_93\n      jump\t// in\n    tag_92:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_91:\n        /* \"contracts/AutomatedVaultController.sol\":3628:3652  _newPrivateVaults.length */\n      dup1\n      mload\n        /* \"contracts/AutomatedVaultController.sol\":3595:3625  uint256 _newPrivateVaultLength */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":3659:3848  for (uint8 _i = 0; _i < _newPrivateVaultLength; ) {... */\n    tag_95:\n        /* \"contracts/AutomatedVaultController.sol\":3683:3705  _newPrivateVaultLength */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":3678:3680  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":3678:3705  _i < _newPrivateVaultLength */\n      0xff\n      and\n      lt\n        /* \"contracts/AutomatedVaultController.sol\":3659:3848  for (uint8 _i = 0; _i < _newPrivateVaultLength; ) {... */\n      iszero\n      tag_96\n      jumpi\n        /* \"contracts/AutomatedVaultController.sol\":3718:3735  _newPrivateVaults */\n      dup3\n        /* \"contracts/AutomatedVaultController.sol\":3736:3738  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":3718:3739  _newPrivateVaults[_i] */\n      0xff\n      and\n      dup2\n      mload\n      dup2\n      lt\n      tag_99\n      jumpi\n      tag_99\n      tag_100\n      jump\t// in\n    tag_99:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":3718:3752  _newPrivateVaults[_i].shareToValue */\n      and\n      0x441130d5\n        /* \"contracts/AutomatedVaultController.sol\":3753:3757  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/AutomatedVaultController.sol\":3718:3758  _newPrivateVaults[_i].shareToValue(1e18) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_101\n      swap2\n        /* \"#utility.yul\":2669:2694   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2657:2659   */\n      0x20\n        /* \"#utility.yul\":2642:2660   */\n      add\n      swap1\n        /* \"#utility.yul\":2523:2700   */\n      jump\n        /* \"contracts/AutomatedVaultController.sol\":3718:3758  _newPrivateVaults[_i].shareToValue(1e18) */\n    tag_101:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_104\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_104:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_105\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_105:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":3827:3831  _i++ */\n      0x01\n      add\n        /* \"contracts/AutomatedVaultController.sol\":3659:3848  for (uint8 _i = 0; _i < _newPrivateVaultLength; ) {... */\n      jump(tag_95)\n    tag_96:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":3871:3904  privateVaults = _newPrivateVaults */\n      dup2\n      mload\n      tag_107\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":3871:3884  privateVaults */\n      0x66\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":3871:3904  privateVaults = _newPrivateVaults */\n      0x20\n      dup6\n      add\n      swap1\n      tag_108\n      jump\t// in\n    tag_107:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":3938:3948  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":3918:3968  LogSetPrivateVaults(msg.sender, _newPrivateVaults) */\n      and\n      0x2abc0e25ec4d3cb00cd094f0bca86e790d0f6455cf9064345274fc97586b31c5\n        /* \"contracts/AutomatedVaultController.sol\":3950:3967  _newPrivateVaults */\n      dup4\n        /* \"contracts/AutomatedVaultController.sol\":3918:3968  LogSetPrivateVaults(msg.sender, _newPrivateVaults) */\n      mload(0x40)\n      tag_109\n      swap2\n      swap1\n      tag_110\n      jump\t// in\n    tag_109:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/AutomatedVaultController.sol\":3567:3974  {... */\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":3475:3974  function setPrivateVaults(IDeltaNeutralVault[] memory _newPrivateVaults) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/AutomatedVaultController.sol\":3153:3360  function availableCredit(address _user) public view returns (uint256) {... */\n    tag_32:\n        /* \"contracts/AutomatedVaultController.sol\":3214:3221  uint256 */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":3230:3244  uint256 _total */\n      dup1\n        /* \"contracts/AutomatedVaultController.sol\":3247:3265  totalCredit(_user) */\n      tag_112\n        /* \"contracts/AutomatedVaultController.sol\":3259:3264  _user */\n      dup4\n        /* \"contracts/AutomatedVaultController.sol\":3247:3258  totalCredit */\n      tag_78\n        /* \"contracts/AutomatedVaultController.sol\":3247:3265  totalCredit(_user) */\n      jump\t// in\n    tag_112:\n        /* \"contracts/AutomatedVaultController.sol\":3230:3265  uint256 _total = totalCredit(_user) */\n      swap1\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":3272:3285  uint256 _used */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":3288:3305  usedCredit(_user) */\n      tag_113\n        /* \"contracts/AutomatedVaultController.sol\":3299:3304  _user */\n      dup5\n        /* \"contracts/AutomatedVaultController.sol\":3288:3298  usedCredit */\n      tag_49\n        /* \"contracts/AutomatedVaultController.sol\":3288:3305  usedCredit(_user) */\n      jump\t// in\n    tag_113:\n        /* \"contracts/AutomatedVaultController.sol\":3272:3305  uint256 _used = usedCredit(_user) */\n      swap1\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":3328:3333  _used */\n      dup1\n        /* \"contracts/AutomatedVaultController.sol\":3319:3325  _total */\n      dup3\n        /* \"contracts/AutomatedVaultController.sol\":3319:3333  _total > _used */\n      gt\n        /* \"contracts/AutomatedVaultController.sol\":3319:3354  _total > _used ? _total - _used : 0 */\n      tag_114\n      jumpi\n        /* \"contracts/AutomatedVaultController.sol\":3353:3354  0 */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":3319:3354  _total > _used ? _total - _used : 0 */\n      jump(tag_116)\n    tag_114:\n        /* \"contracts/AutomatedVaultController.sol\":3336:3350  _total - _used */\n      tag_116\n        /* \"contracts/AutomatedVaultController.sol\":3345:3350  _used */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":3336:3342  _total */\n      dup4\n        /* \"contracts/AutomatedVaultController.sol\":3336:3350  _total - _used */\n      tag_117\n      jump\t// in\n    tag_116:\n        /* \"contracts/AutomatedVaultController.sol\":3312:3354  return _total > _used ? _total - _used : 0 */\n      swap5\n        /* \"contracts/AutomatedVaultController.sol\":3153:3360  function availableCredit(address _user) public view returns (uint256) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1908:2009  function renounceOwnership() public virtual onlyOwner {... */\n    tag_36:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_121\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_92\n      swap1\n      tag_93\n      jump\t// in\n    tag_121:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1972:2002  _transferOwnership(address(0)) */\n      tag_124\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1999:2000  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1972:1990  _transferOwnership */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1972:2002  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_124:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1908:2009  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/AutomatedVaultController.sol\":898:926  ICreditor[] public creditors */\n    tag_40:\n      0x65\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_126\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_126:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n      pop\n      dup2\n      jump\t// out\n        /* \"contracts/AutomatedVaultController.sol\":1251:1850  function initialize(ICreditor[] memory _creditors, IDeltaNeutralVault[] memory _privateVaults) external initializer {... */\n    tag_46:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3111:3130  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3158  _setInitializedVersion(1) */\n      tag_129\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3156:3157  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3155  _setInitializedVersion */\n      tag_130\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3158  _setInitializedVersion(1) */\n      jump\t// in\n    tag_129:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3111:3158  bool isTopLevelCall = _setInitializedVersion(1) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3172:3186  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3168:3233  if (isTopLevelCall) {... */\n      iszero\n      tag_131\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3202:3215  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3202:3222  _initializing = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3168:3233  if (isTopLevelCall) {... */\n    tag_131:\n        /* \"contracts/AutomatedVaultController.sol\":1421:1438  _creditors.length */\n      dup3\n      mload\n        /* \"contracts/AutomatedVaultController.sol\":1395:1418  uint256 _creditorLength */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":1445:1549  for (uint8 _i = 0; _i < _creditorLength; _i++) {... */\n    tag_133:\n        /* \"contracts/AutomatedVaultController.sol\":1469:1484  _creditorLength */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":1464:1466  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":1464:1484  _i < _creditorLength */\n      0xff\n      and\n      lt\n        /* \"contracts/AutomatedVaultController.sol\":1445:1549  for (uint8 _i = 0; _i < _creditorLength; _i++) {... */\n      iszero\n      tag_134\n      jumpi\n        /* \"contracts/AutomatedVaultController.sol\":1501:1511  _creditors */\n      dup5\n        /* \"contracts/AutomatedVaultController.sol\":1512:1514  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":1501:1515  _creditors[_i] */\n      0xff\n      and\n      dup2\n      mload\n      dup2\n      lt\n      tag_137\n      jumpi\n      tag_137\n      tag_100\n      jump\t// in\n    tag_137:\n      0x20\n      swap1\n      dup2\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      add\n      mload\n        /* \"contracts/AutomatedVaultController.sol\":1501:1541  _creditors[_i].getUserCredit(address(0)) */\n      mload(0x40)\n      shl(0xe2, 0x36b5bc37)\n      dup2\n      mstore\n        /* \"contracts/AutomatedVaultController.sol\":1538:1539  0 */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":1501:1541  _creditors[_i].getUserCredit(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3053:3104   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":1501:1529  _creditors[_i].getUserCredit */\n      swap1\n      swap2\n      and\n      swap1\n      0xdad6f0dc\n      swap1\n        /* \"#utility.yul\":3026:3044   */\n      0x24\n      add\n        /* \"contracts/AutomatedVaultController.sol\":1501:1541  _creditors[_i].getUserCredit(address(0)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_140\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_140:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_141\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_141:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":1486:1490  _i++ */\n      dup1\n      tag_142\n      dup2\n      tag_143\n      jump\t// in\n    tag_142:\n      swap2\n      pop\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":1445:1549  for (uint8 _i = 0; _i < _creditorLength; _i++) {... */\n      jump(tag_133)\n    tag_134:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":1587:1608  _privateVaults.length */\n      dup3\n      mload\n        /* \"contracts/AutomatedVaultController.sol\":1557:1584  uint256 _privateVaultLength */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":1615:1720  for (uint8 _i = 0; _i < _privateVaultLength; _i++) {... */\n    tag_144:\n        /* \"contracts/AutomatedVaultController.sol\":1639:1658  _privateVaultLength */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":1634:1636  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":1634:1658  _i < _privateVaultLength */\n      0xff\n      and\n      lt\n        /* \"contracts/AutomatedVaultController.sol\":1615:1720  for (uint8 _i = 0; _i < _privateVaultLength; _i++) {... */\n      iszero\n      tag_145\n      jumpi\n        /* \"contracts/AutomatedVaultController.sol\":1675:1689  _privateVaults */\n      dup5\n        /* \"contracts/AutomatedVaultController.sol\":1690:1692  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":1675:1693  _privateVaults[_i] */\n      0xff\n      and\n      dup2\n      mload\n      dup2\n      lt\n      tag_148\n      jumpi\n      tag_148\n      tag_100\n      jump\t// in\n    tag_148:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":1675:1706  _privateVaults[_i].shareToValue */\n      and\n      0x441130d5\n        /* \"contracts/AutomatedVaultController.sol\":1707:1711  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/AutomatedVaultController.sol\":1675:1712  _privateVaults[_i].shareToValue(1e18) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_149\n      swap2\n        /* \"#utility.yul\":2669:2694   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2657:2659   */\n      0x20\n        /* \"#utility.yul\":2642:2660   */\n      add\n      swap1\n        /* \"#utility.yul\":2523:2700   */\n      jump\n        /* \"contracts/AutomatedVaultController.sol\":1675:1712  _privateVaults[_i].shareToValue(1e18) */\n    tag_149:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_151\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_151:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_152\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_152:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":1660:1664  _i++ */\n      dup1\n      tag_153\n      dup2\n      tag_143\n      jump\t// in\n    tag_153:\n      swap2\n      pop\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":1615:1720  for (uint8 _i = 0; _i < _privateVaultLength; _i++) {... */\n      jump(tag_144)\n    tag_145:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":1743:1778  OwnableUpgradeable.__Ownable_init() */\n      tag_154\n        /* \"contracts/AutomatedVaultController.sol\":1743:1776  OwnableUpgradeable.__Ownable_init */\n      tag_155\n        /* \"contracts/AutomatedVaultController.sol\":1743:1778  OwnableUpgradeable.__Ownable_init() */\n      jump\t// in\n    tag_154:\n        /* \"contracts/AutomatedVaultController.sol\":1785:1807  creditors = _creditors */\n      dup5\n      mload\n      tag_156\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":1785:1794  creditors */\n      0x65\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":1785:1807  creditors = _creditors */\n      0x20\n      dup9\n      add\n      swap1\n      tag_108\n      jump\t// in\n    tag_156:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":1814:1844  privateVaults = _privateVaults */\n      dup4\n      mload\n      tag_158\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":1814:1827  privateVaults */\n      0x66\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":1814:1844  privateVaults = _privateVaults */\n      0x20\n      dup8\n      add\n      swap1\n      tag_108\n      jump\t// in\n    tag_158:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":1367:1850  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3257:3271  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3253:3352  if (isTopLevelCall) {... */\n      iszero\n      tag_159\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3303:3308  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3287:3308  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":8084:8120   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n      swap1\n        /* \"#utility.yul\":8072:8074   */\n      0x20\n        /* \"#utility.yul\":8057:8075   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3253:3352  if (isTopLevelCall) {... */\n    tag_159:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3101:3358  {... */\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":1251:1850  function initialize(ICreditor[] memory _creditors, IDeltaNeutralVault[] memory _privateVaults) external initializer {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/AutomatedVaultController.sol\":2538:3002  function usedCredit(address _user) public view returns (uint256) {... */\n    tag_49:\n        /* \"contracts/AutomatedVaultController.sol\":2661:2674  privateVaults */\n      0x66\n        /* \"contracts/AutomatedVaultController.sol\":2661:2681  privateVaults.length */\n      sload\n        /* \"contracts/AutomatedVaultController.sol\":2594:2601  uint256 */\n      0x00\n      swap1\n      dup2\n      swap1\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":2688:2975  for (uint8 _i = 0; _i < _privateVaultLength; ) {... */\n    tag_163:\n        /* \"contracts/AutomatedVaultController.sol\":2712:2731  _privateVaultLength */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":2707:2709  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":2707:2731  _i < _privateVaultLength */\n      0xff\n      and\n      lt\n        /* \"contracts/AutomatedVaultController.sol\":2688:2975  for (uint8 _i = 0; _i < _privateVaultLength; ) {... */\n      iszero\n      tag_164\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":2761:2783  userVaultShares[_user] */\n      dup6\n      and\n        /* \"contracts/AutomatedVaultController.sol\":2744:2758  uint256 _share */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":2761:2783  userVaultShares[_user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/AutomatedVaultController.sol\":2761:2776  userVaultShares */\n      0x67\n        /* \"contracts/AutomatedVaultController.sol\":2761:2783  userVaultShares[_user] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/AutomatedVaultController.sol\":2792:2805  privateVaults */\n      0x66\n        /* \"contracts/AutomatedVaultController.sol\":2792:2809  privateVaults[_i] */\n      dup1\n      sload\n        /* \"contracts/AutomatedVaultController.sol\":2744:2758  uint256 _share */\n      dup4\n      swap2\n        /* \"contracts/AutomatedVaultController.sol\":2792:2805  privateVaults */\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":2792:2809  privateVaults[_i] */\n      0xff\n      dup7\n      and\n      swap1\n      dup2\n      lt\n      tag_167\n      jumpi\n      tag_167\n      tag_100\n      jump\t// in\n    tag_167:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      swap1\n      swap2\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/AutomatedVaultController.sol\":2761:2811  userVaultShares[_user][address(privateVaults[_i])] */\n      dup4\n      mstore\n      dup3\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x40\n      add\n      swap1\n      keccak256\n      sload\n      swap1\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":2824:2835  _share != 0 */\n      dup1\n      iszero\n        /* \"contracts/AutomatedVaultController.sol\":2820:2885  if (_share != 0) _total += privateVaults[_i].shareToValue(_share) */\n      tag_169\n      jumpi\n        /* \"contracts/AutomatedVaultController.sol\":2847:2860  privateVaults */\n      0x66\n        /* \"contracts/AutomatedVaultController.sol\":2861:2863  _i */\n      dup3\n        /* \"contracts/AutomatedVaultController.sol\":2847:2864  privateVaults[_i] */\n      0xff\n      and\n      dup2\n      sload\n      dup2\n      lt\n      tag_171\n      jumpi\n      tag_171\n      tag_100\n      jump\t// in\n    tag_171:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n        /* \"contracts/AutomatedVaultController.sol\":2847:2885  privateVaults[_i].shareToValue(_share) */\n      mload(0x40)\n      shl(0xe0, 0x441130d5)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":2669:2694   */\n      dup4\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":2847:2864  privateVaults[_i] */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":2847:2877  privateVaults[_i].shareToValue */\n      0x441130d5\n      swap1\n        /* \"#utility.yul\":2642:2660   */\n      0x24\n      add\n        /* \"contracts/AutomatedVaultController.sol\":2847:2885  privateVaults[_i].shareToValue(_share) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_175\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_175:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_176\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_176:\n        /* \"contracts/AutomatedVaultController.sol\":2837:2885  _total += privateVaults[_i].shareToValue(_share) */\n      tag_177\n      swap1\n      dup6\n      tag_86\n      jump\t// in\n    tag_177:\n      swap4\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":2820:2885  if (_share != 0) _total += privateVaults[_i].shareToValue(_share) */\n    tag_169:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":2954:2958  _i++ */\n      0x01\n      add\n        /* \"contracts/AutomatedVaultController.sol\":2688:2975  for (uint8 _i = 0; _i < _privateVaultLength; ) {... */\n      jump(tag_163)\n    tag_164:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":2990:2996  _total */\n      swap1\n      swap4\n        /* \"contracts/AutomatedVaultController.sol\":2538:3002  function usedCredit(address _user) public view returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/AutomatedVaultController.sol\":931:972  IDeltaNeutralVault[] public privateVaults */\n    tag_53:\n      0x66\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_126\n      jumpi\n      0x00\n      dup1\n      revert\n        /* \"contracts/AutomatedVaultController.sol\":5049:5285  function onWithdraw(address _user, uint256 _shareAmount) external {... */\n    tag_71:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":5159:5181  userVaultShares[_user] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/AutomatedVaultController.sol\":5159:5174  userVaultShares */\n      0x67\n        /* \"contracts/AutomatedVaultController.sol\":5159:5181  userVaultShares[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/AutomatedVaultController.sol\":5182:5192  msg.sender */\n      caller\n        /* \"contracts/AutomatedVaultController.sol\":5159:5193  userVaultShares[_user][msg.sender] */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/AutomatedVaultController.sol\":5159:5209  userVaultShares[_user][msg.sender] <= _shareAmount */\n      dup2\n      lt\n      iszero\n        /* \"contracts/AutomatedVaultController.sol\":5159:5279  userVaultShares[_user][msg.sender] <= _shareAmount... */\n      tag_183\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":5230:5252  userVaultShares[_user] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/AutomatedVaultController.sol\":5230:5245  userVaultShares */\n      0x67\n        /* \"contracts/AutomatedVaultController.sol\":5230:5252  userVaultShares[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/AutomatedVaultController.sol\":5253:5263  msg.sender */\n      caller\n        /* \"contracts/AutomatedVaultController.sol\":5230:5264  userVaultShares[_user][msg.sender] */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/AutomatedVaultController.sol\":5230:5279  userVaultShares[_user][msg.sender] - _shareAmount */\n      tag_184\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":5267:5279  _shareAmount */\n      dup3\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":5230:5279  userVaultShares[_user][msg.sender] - _shareAmount */\n      tag_117\n      jump\t// in\n    tag_184:\n        /* \"contracts/AutomatedVaultController.sol\":5159:5279  userVaultShares[_user][msg.sender] <= _shareAmount... */\n      jump(tag_185)\n    tag_183:\n        /* \"contracts/AutomatedVaultController.sol\":5219:5220  0 */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":5159:5279  userVaultShares[_user][msg.sender] <= _shareAmount... */\n    tag_185:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":5122:5144  userVaultShares[_user] */\n      swap1\n      swap3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/AutomatedVaultController.sol\":5122:5137  userVaultShares */\n      0x67\n        /* \"contracts/AutomatedVaultController.sol\":5122:5144  userVaultShares[_user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/AutomatedVaultController.sol\":5145:5155  msg.sender */\n      caller\n        /* \"contracts/AutomatedVaultController.sol\":5122:5156  userVaultShares[_user][msg.sender] */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/AutomatedVaultController.sol\":5122:5279  userVaultShares[_user][msg.sender] = userVaultShares[_user][msg.sender] <= _shareAmount... */\n      swap2\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":5049:5285  function onWithdraw(address _user, uint256 _shareAmount) external {... */\n      jump\t// out\n        /* \"contracts/AutomatedVaultController.sol\":4075:4532  function setCreditors(ICreditor[] memory _newCreditors) external onlyOwner {... */\n    tag_75:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_189\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_92\n      swap1\n      tag_93\n      jump\t// in\n    tag_189:\n        /* \"contracts/AutomatedVaultController.sol\":4207:4227  _newCreditors.length */\n      dup1\n      mload\n        /* \"contracts/AutomatedVaultController.sol\":4178:4204  uint256 _newCreditorLength */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":4234:4422  for (uint8 _i = 0; _i < _newCreditorLength; ) {... */\n    tag_192:\n        /* \"contracts/AutomatedVaultController.sol\":4258:4276  _newCreditorLength */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":4253:4255  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":4253:4276  _i < _newCreditorLength */\n      0xff\n      and\n      lt\n        /* \"contracts/AutomatedVaultController.sol\":4234:4422  for (uint8 _i = 0; _i < _newCreditorLength; ) {... */\n      iszero\n      tag_193\n      jumpi\n        /* \"contracts/AutomatedVaultController.sol\":4289:4302  _newCreditors */\n      dup3\n        /* \"contracts/AutomatedVaultController.sol\":4303:4305  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":4289:4306  _newCreditors[_i] */\n      0xff\n      and\n      dup2\n      mload\n      dup2\n      lt\n      tag_196\n      jumpi\n      tag_196\n      tag_100\n      jump\t// in\n    tag_196:\n      0x20\n      swap1\n      dup2\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      add\n      mload\n        /* \"contracts/AutomatedVaultController.sol\":4289:4332  _newCreditors[_i].getUserCredit(address(0)) */\n      mload(0x40)\n      shl(0xe2, 0x36b5bc37)\n      dup2\n      mstore\n        /* \"contracts/AutomatedVaultController.sol\":4329:4330  0 */\n      0x00\n        /* \"contracts/AutomatedVaultController.sol\":4289:4332  _newCreditors[_i].getUserCredit(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3053:3104   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":4289:4320  _newCreditors[_i].getUserCredit */\n      swap1\n      swap2\n      and\n      swap1\n      0xdad6f0dc\n      swap1\n        /* \"#utility.yul\":3026:3044   */\n      0x24\n      add\n        /* \"contracts/AutomatedVaultController.sol\":4289:4332  _newCreditors[_i].getUserCredit(address(0)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_199\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_199:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_200\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_200:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":4401:4405  _i++ */\n      0x01\n      add\n        /* \"contracts/AutomatedVaultController.sol\":4234:4422  for (uint8 _i = 0; _i < _newCreditorLength; ) {... */\n      jump(tag_192)\n    tag_193:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":4445:4470  creditors = _newCreditors */\n      dup2\n      mload\n      tag_201\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":4445:4454  creditors */\n      0x65\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":4445:4470  creditors = _newCreditors */\n      0x20\n      dup6\n      add\n      swap1\n      tag_108\n      jump\t// in\n    tag_201:\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":4500:4510  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/AutomatedVaultController.sol\":4484:4526  LogSetCreditors(msg.sender, _newCreditors) */\n      and\n      0xe1c8f0c34d1ebb59573a7f5d542c350a1762869a702dd1ecea79c1dc6b44d865\n        /* \"contracts/AutomatedVaultController.sol\":4512:4525  _newCreditors */\n      dup4\n        /* \"contracts/AutomatedVaultController.sol\":4484:4526  LogSetCreditors(msg.sender, _newCreditors) */\n      mload(0x40)\n      tag_109\n      swap2\n      swap1\n      tag_110\n      jump\t// in\n        /* \"contracts/AutomatedVaultController.sol\":1988:2350  function totalCredit(address _user) public view returns (uint256) {... */\n    tag_78:\n        /* \"contracts/AutomatedVaultController.sol\":2108:2117  creditors */\n      0x65\n        /* \"contracts/AutomatedVaultController.sol\":2108:2124  creditors.length */\n      sload\n        /* \"contracts/AutomatedVaultController.sol\":2045:2052  uint256 */\n      0x00\n      swap1\n      dup2\n      swap1\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":2131:2325  for (uint8 _i = 0; _i < _creditorLength; ) {... */\n    tag_205:\n        /* \"contracts/AutomatedVaultController.sol\":2155:2170  _creditorLength */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":2150:2152  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":2150:2170  _i < _creditorLength */\n      0xff\n      and\n      lt\n        /* \"contracts/AutomatedVaultController.sol\":2131:2325  for (uint8 _i = 0; _i < _creditorLength; ) {... */\n      iszero\n      tag_164\n      jumpi\n        /* \"contracts/AutomatedVaultController.sol\":2201:2210  creditors */\n      0x65\n        /* \"contracts/AutomatedVaultController.sol\":2211:2213  _i */\n      dup2\n        /* \"contracts/AutomatedVaultController.sol\":2201:2214  creditors[_i] */\n      0xff\n      and\n      dup2\n      sload\n      dup2\n      lt\n      tag_209\n      jumpi\n      tag_209\n      tag_100\n      jump\t// in\n    tag_209:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n        /* \"contracts/AutomatedVaultController.sol\":2201:2235  creditors[_i].getUserCredit(_user) */\n      mload(0x40)\n      shl(0xe2, 0x36b5bc37)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3071:3103   */\n      dup8\n      dup2\n      and\n        /* \"contracts/AutomatedVaultController.sol\":2201:2235  creditors[_i].getUserCredit(_user) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":3053:3104   */\n      mstore\n        /* \"contracts/AutomatedVaultController.sol\":2201:2214  creditors[_i] */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":2201:2228  creditors[_i].getUserCredit */\n      0xdad6f0dc\n      swap1\n        /* \"#utility.yul\":3026:3044   */\n      0x24\n      add\n        /* \"contracts/AutomatedVaultController.sol\":2201:2235  creditors[_i].getUserCredit(_user) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_213\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_213:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_214\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_214:\n        /* \"contracts/AutomatedVaultController.sol\":2192:2235  _total + creditors[_i].getUserCredit(_user) */\n      tag_215\n      swap1\n        /* \"contracts/AutomatedVaultController.sol\":2192:2198  _total */\n      dup5\n        /* \"contracts/AutomatedVaultController.sol\":2192:2235  _total + creditors[_i].getUserCredit(_user) */\n      tag_86\n      jump\t// in\n    tag_215:\n        /* \"contracts/AutomatedVaultController.sol\":2183:2235  _total = _total + creditors[_i].getUserCredit(_user) */\n      swap3\n      pop\n        /* \"contracts/AutomatedVaultController.sol\":2304:2308  _i++ */\n      0x01\n      add\n        /* \"contracts/AutomatedVaultController.sol\":2131:2325  for (uint8 _i = 0; _i < _creditorLength; ) {... */\n      jump(tag_205)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2158:2356  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_82:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_219\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_92\n      swap1\n      tag_93\n      jump\t// in\n    tag_219:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2246:2268  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_222\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9013:9015   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8995:9016   */\n      mstore\n        /* \"#utility.yul\":9052:9054   */\n      0x26\n        /* \"#utility.yul\":9032:9050   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9025:9055   */\n      mstore\n        /* \"#utility.yul\":9091:9125   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":9071:9089   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9064:9126   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":9142:9160   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9135:9171   */\n      mstore\n        /* \"#utility.yul\":9188:9207   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_92\n        /* \"#utility.yul\":8811:9213   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_222:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2349  _transferOwnership(newOwner) */\n      tag_225\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2340:2348  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2339  _transferOwnership */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2349  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_225:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2158:2356  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1186:1506  function isContract(address account) internal view returns (bool) {... */\n    tag_83:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1499  account.code.length > 0 */\n      iszero\n      iszero\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1186:1506  function isContract(address account) internal view returns (bool) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2510:2697  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_125:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2602:2608  _owner */\n      0x33\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2618:2635  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2650:2690  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2602:2608  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2618:2635  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2602:2608  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2650:2690  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2583:2599  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2650:2690  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2573:2697  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2510:2697  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n    tag_130:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5351:5355  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5684:5697  _initializing */\n      dup1\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5680:6089  if (_initializing) {... */\n      iszero\n      tag_230\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5745  version */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5750  version == 1 */\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5749:5750  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5750  version == 1 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5799  version == 1 && !AddressUpgradeable.isContract(address(this)) */\n      dup1\n      iszero\n      tag_231\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5793:5797  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1499  account.code.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5799  version == 1 && !AddressUpgradeable.isContract(address(this)) */\n    tag_231:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5713:5879  require(... */\n      tag_233\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_92\n      swap1\n      tag_235\n      jump\t// in\n    tag_233:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5900:5905  false */\n      0x00\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5680:6089  if (_initializing) {... */\n    tag_230:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5956  _initialized */\n      sload(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5966  _initialized < version */\n      0xff\n      dup1\n      dup5\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5956  _initialized */\n      swap2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5966  _initialized < version */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5936:6017  require(_initialized < version, \"Initializable: contract is already initialized\") */\n      tag_237\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_92\n      swap1\n      tag_235\n      jump\t// in\n    tag_237:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6031:6043  _initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6031:6053  _initialized = version */\n      dup1\n      sload\n      not(0xff)\n      and\n      0xff\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n      0x01\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":988:1083  function __Ownable_init() internal onlyInitializing {... */\n    tag_155:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4698:4711  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4690:4759  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_240\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_92\n      swap1\n      tag_242\n      jump\t// in\n    tag_240:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1050:1076  __Ownable_init_unchained() */\n      tag_124\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4698:4711  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4690:4759  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_247\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_92\n      swap1\n      tag_242\n      jump\t// in\n    tag_247:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1161:1193  _transferOwnership(_msgSender()) */\n      tag_124\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1161:1179  _transferOwnership */\n      tag_125\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1161:1193  _transferOwnership(_msgSender()) */\n      jump\t// in\n    tag_108:\n      dup3\n      dup1\n      sload\n      dup3\n      dup3\n      sstore\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      dup2\n      add\n      swap3\n      dup3\n      iszero\n      tag_254\n      jumpi\n      swap2\n      0x20\n      mul\n      dup3\n      add\n    tag_253:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_254\n      jumpi\n      dup3\n      mload\n      dup3\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      or\n      dup3\n      sstore\n      0x20\n      swap1\n      swap3\n      add\n      swap2\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      jump(tag_253)\n    tag_254:\n      pop\n      tag_255\n      swap3\n      swap2\n      pop\n      tag_256\n      jump\t// in\n    tag_255:\n      pop\n      swap1\n      jump\t// out\n    tag_256:\n    tag_261:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_255\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_261)\n        /* \"#utility.yul\":14:145   */\n    tag_263:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":89:120   */\n      dup2\n      and\n        /* \"#utility.yul\":79:121   */\n      dup2\n      eq\n        /* \"#utility.yul\":69:139   */\n      tag_225\n      jumpi\n        /* \"#utility.yul\":135:136   */\n      0x00\n        /* \"#utility.yul\":132:133   */\n      dup1\n        /* \"#utility.yul\":125:137   */\n      revert\n        /* \"#utility.yul\":150:465   */\n    tag_23:\n        /* \"#utility.yul\":218:224   */\n      0x00\n        /* \"#utility.yul\":226:232   */\n      dup1\n        /* \"#utility.yul\":279:281   */\n      0x40\n        /* \"#utility.yul\":267:276   */\n      dup4\n        /* \"#utility.yul\":258:265   */\n      dup6\n        /* \"#utility.yul\":254:277   */\n      sub\n        /* \"#utility.yul\":250:282   */\n      slt\n        /* \"#utility.yul\":247:299   */\n      iszero\n      tag_274\n      jumpi\n        /* \"#utility.yul\":295:296   */\n      0x00\n        /* \"#utility.yul\":292:293   */\n      dup1\n        /* \"#utility.yul\":285:297   */\n      revert\n        /* \"#utility.yul\":247:299   */\n    tag_274:\n        /* \"#utility.yul\":334:343   */\n      dup3\n        /* \"#utility.yul\":321:344   */\n      calldataload\n        /* \"#utility.yul\":353:384   */\n      tag_275\n        /* \"#utility.yul\":378:383   */\n      dup2\n        /* \"#utility.yul\":353:384   */\n      tag_263\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":403:408   */\n      swap5\n        /* \"#utility.yul\":455:457   */\n      0x20\n        /* \"#utility.yul\":440:458   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":427:459   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":150:465   */\n      jump\t// out\n        /* \"#utility.yul\":470:597   */\n    tag_264:\n        /* \"#utility.yul\":531:541   */\n      0x4e487b71\n        /* \"#utility.yul\":526:529   */\n      0xe0\n        /* \"#utility.yul\":522:542   */\n      shl\n        /* \"#utility.yul\":519:520   */\n      0x00\n        /* \"#utility.yul\":512:543   */\n      mstore\n        /* \"#utility.yul\":562:566   */\n      0x41\n        /* \"#utility.yul\":559:560   */\n      0x04\n        /* \"#utility.yul\":552:567   */\n      mstore\n        /* \"#utility.yul\":586:590   */\n      0x24\n        /* \"#utility.yul\":583:584   */\n      0x00\n        /* \"#utility.yul\":576:591   */\n      revert\n        /* \"#utility.yul\":602:877   */\n    tag_265:\n        /* \"#utility.yul\":673:675   */\n      0x40\n        /* \"#utility.yul\":667:676   */\n      mload\n        /* \"#utility.yul\":738:740   */\n      0x1f\n        /* \"#utility.yul\":719:732   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":715:742   */\n      and\n        /* \"#utility.yul\":703:743   */\n      dup2\n      add\n        /* \"#utility.yul\":773:791   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":758:792   */\n      dup2\n      gt\n        /* \"#utility.yul\":794:816   */\n      dup3\n      dup3\n      lt\n        /* \"#utility.yul\":755:817   */\n      or\n        /* \"#utility.yul\":752:840   */\n      iszero\n      tag_279\n      jumpi\n        /* \"#utility.yul\":820:838   */\n      tag_279\n      tag_264\n      jump\t// in\n    tag_279:\n        /* \"#utility.yul\":856:858   */\n      0x40\n        /* \"#utility.yul\":849:871   */\n      mstore\n        /* \"#utility.yul\":602:877   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":882:1085   */\n    tag_266:\n        /* \"#utility.yul\":962:966   */\n      0x00\n        /* \"#utility.yul\":995:1013   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":987:993   */\n      dup3\n        /* \"#utility.yul\":984:1014   */\n      gt\n        /* \"#utility.yul\":981:1037   */\n      iszero\n      tag_282\n      jumpi\n        /* \"#utility.yul\":1017:1035   */\n      tag_282\n      tag_264\n      jump\t// in\n    tag_282:\n      pop\n        /* \"#utility.yul\":1062:1063   */\n      0x05\n        /* \"#utility.yul\":1058:1072   */\n      shl\n        /* \"#utility.yul\":1074:1078   */\n      0x20\n        /* \"#utility.yul\":1054:1079   */\n      add\n      swap1\n        /* \"#utility.yul\":882:1085   */\n      jump\t// out\n        /* \"#utility.yul\":1090:1867   */\n    tag_267:\n        /* \"#utility.yul\":1164:1169   */\n      0x00\n        /* \"#utility.yul\":1217:1220   */\n      dup3\n        /* \"#utility.yul\":1210:1214   */\n      0x1f\n        /* \"#utility.yul\":1202:1208   */\n      dup4\n        /* \"#utility.yul\":1198:1215   */\n      add\n        /* \"#utility.yul\":1194:1221   */\n      slt\n        /* \"#utility.yul\":1184:1239   */\n      tag_284\n      jumpi\n        /* \"#utility.yul\":1235:1236   */\n      0x00\n        /* \"#utility.yul\":1232:1233   */\n      dup1\n        /* \"#utility.yul\":1225:1237   */\n      revert\n        /* \"#utility.yul\":1184:1239   */\n    tag_284:\n        /* \"#utility.yul\":1271:1277   */\n      dup2\n        /* \"#utility.yul\":1258:1278   */\n      calldataload\n        /* \"#utility.yul\":1297:1301   */\n      0x20\n        /* \"#utility.yul\":1321:1401   */\n      tag_285\n        /* \"#utility.yul\":1337:1400   */\n      tag_286\n        /* \"#utility.yul\":1397:1399   */\n      dup4\n        /* \"#utility.yul\":1337:1400   */\n      tag_266\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":1321:1401   */\n      tag_265\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":1435:1450   */\n      dup3\n      dup2\n      mstore\n        /* \"#utility.yul\":1521:1522   */\n      0x05\n        /* \"#utility.yul\":1517:1527   */\n      swap3\n      swap1\n      swap3\n      shl\n        /* \"#utility.yul\":1505:1528   */\n      dup5\n      add\n        /* \"#utility.yul\":1501:1533   */\n      dup2\n      add\n      swap2\n        /* \"#utility.yul\":1466:1478   */\n      dup2\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":1545:1560   */\n      dup7\n      dup5\n      gt\n        /* \"#utility.yul\":1542:1577   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":1573:1574   */\n      0x00\n        /* \"#utility.yul\":1570:1571   */\n      dup1\n        /* \"#utility.yul\":1563:1575   */\n      revert\n        /* \"#utility.yul\":1542:1577   */\n    tag_287:\n        /* \"#utility.yul\":1609:1611   */\n      dup3\n        /* \"#utility.yul\":1601:1607   */\n      dup7\n        /* \"#utility.yul\":1597:1612   */\n      add\n        /* \"#utility.yul\":1621:1838   */\n    tag_288:\n        /* \"#utility.yul\":1637:1643   */\n      dup5\n        /* \"#utility.yul\":1632:1635   */\n      dup2\n        /* \"#utility.yul\":1629:1644   */\n      lt\n        /* \"#utility.yul\":1621:1838   */\n      iszero\n      tag_290\n      jumpi\n        /* \"#utility.yul\":1717:1720   */\n      dup1\n        /* \"#utility.yul\":1704:1721   */\n      calldataload\n        /* \"#utility.yul\":1734:1765   */\n      tag_291\n        /* \"#utility.yul\":1759:1764   */\n      dup2\n        /* \"#utility.yul\":1734:1765   */\n      tag_263\n      jump\t// in\n    tag_291:\n        /* \"#utility.yul\":1778:1796   */\n      dup4\n      mstore\n        /* \"#utility.yul\":1816:1828   */\n      swap2\n      dup4\n      add\n      swap2\n        /* \"#utility.yul\":1654:1666   */\n      dup4\n      add\n        /* \"#utility.yul\":1621:1838   */\n      jump(tag_288)\n    tag_290:\n      pop\n        /* \"#utility.yul\":1856:1861   */\n      swap7\n        /* \"#utility.yul\":1090:1867   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1872:2266   */\n    tag_27:\n        /* \"#utility.yul\":1982:1988   */\n      0x00\n        /* \"#utility.yul\":2035:2037   */\n      0x20\n        /* \"#utility.yul\":2023:2032   */\n      dup3\n        /* \"#utility.yul\":2014:2021   */\n      dup5\n        /* \"#utility.yul\":2010:2033   */\n      sub\n        /* \"#utility.yul\":2006:2038   */\n      slt\n        /* \"#utility.yul\":2003:2055   */\n      iszero\n      tag_293\n      jumpi\n        /* \"#utility.yul\":2051:2052   */\n      0x00\n        /* \"#utility.yul\":2048:2049   */\n      dup1\n        /* \"#utility.yul\":2041:2053   */\n      revert\n        /* \"#utility.yul\":2003:2055   */\n    tag_293:\n        /* \"#utility.yul\":2091:2100   */\n      dup2\n        /* \"#utility.yul\":2078:2101   */\n      calldataload\n        /* \"#utility.yul\":2124:2142   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2116:2122   */\n      dup2\n        /* \"#utility.yul\":2113:2143   */\n      gt\n        /* \"#utility.yul\":2110:2160   */\n      iszero\n      tag_294\n      jumpi\n        /* \"#utility.yul\":2156:2157   */\n      0x00\n        /* \"#utility.yul\":2153:2154   */\n      dup1\n        /* \"#utility.yul\":2146:2158   */\n      revert\n        /* \"#utility.yul\":2110:2160   */\n    tag_294:\n        /* \"#utility.yul\":2179:2260   */\n      tag_116\n        /* \"#utility.yul\":2252:2259   */\n      dup5\n        /* \"#utility.yul\":2243:2249   */\n      dup3\n        /* \"#utility.yul\":2232:2241   */\n      dup6\n        /* \"#utility.yul\":2228:2250   */\n      add\n        /* \"#utility.yul\":2179:2260   */\n      tag_267\n      jump\t// in\n        /* \"#utility.yul\":2271:2518   */\n    tag_31:\n        /* \"#utility.yul\":2330:2336   */\n      0x00\n        /* \"#utility.yul\":2383:2385   */\n      0x20\n        /* \"#utility.yul\":2371:2380   */\n      dup3\n        /* \"#utility.yul\":2362:2369   */\n      dup5\n        /* \"#utility.yul\":2358:2381   */\n      sub\n        /* \"#utility.yul\":2354:2386   */\n      slt\n        /* \"#utility.yul\":2351:2403   */\n      iszero\n      tag_297\n      jumpi\n        /* \"#utility.yul\":2399:2400   */\n      0x00\n        /* \"#utility.yul\":2396:2397   */\n      dup1\n        /* \"#utility.yul\":2389:2401   */\n      revert\n        /* \"#utility.yul\":2351:2403   */\n    tag_297:\n        /* \"#utility.yul\":2438:2447   */\n      dup2\n        /* \"#utility.yul\":2425:2448   */\n      calldataload\n        /* \"#utility.yul\":2457:2488   */\n      tag_298\n        /* \"#utility.yul\":2482:2487   */\n      dup2\n        /* \"#utility.yul\":2457:2488   */\n      tag_263\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":2507:2512   */\n      swap4\n        /* \"#utility.yul\":2271:2518   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2705:2885   */\n    tag_39:\n        /* \"#utility.yul\":2764:2770   */\n      0x00\n        /* \"#utility.yul\":2817:2819   */\n      0x20\n        /* \"#utility.yul\":2805:2814   */\n      dup3\n        /* \"#utility.yul\":2796:2803   */\n      dup5\n        /* \"#utility.yul\":2792:2815   */\n      sub\n        /* \"#utility.yul\":2788:2820   */\n      slt\n        /* \"#utility.yul\":2785:2837   */\n      iszero\n      tag_301\n      jumpi\n        /* \"#utility.yul\":2833:2834   */\n      0x00\n        /* \"#utility.yul\":2830:2831   */\n      dup1\n        /* \"#utility.yul\":2823:2835   */\n      revert\n        /* \"#utility.yul\":2785:2837   */\n    tag_301:\n      pop\n        /* \"#utility.yul\":2856:2879   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2705:2885   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3115:3883   */\n    tag_268:\n        /* \"#utility.yul\":3180:3185   */\n      0x00\n        /* \"#utility.yul\":3233:3236   */\n      dup3\n        /* \"#utility.yul\":3226:3230   */\n      0x1f\n        /* \"#utility.yul\":3218:3224   */\n      dup4\n        /* \"#utility.yul\":3214:3231   */\n      add\n        /* \"#utility.yul\":3210:3237   */\n      slt\n        /* \"#utility.yul\":3200:3255   */\n      tag_304\n      jumpi\n        /* \"#utility.yul\":3251:3252   */\n      0x00\n        /* \"#utility.yul\":3248:3249   */\n      dup1\n        /* \"#utility.yul\":3241:3253   */\n      revert\n        /* \"#utility.yul\":3200:3255   */\n    tag_304:\n        /* \"#utility.yul\":3287:3293   */\n      dup2\n        /* \"#utility.yul\":3274:3294   */\n      calldataload\n        /* \"#utility.yul\":3313:3317   */\n      0x20\n        /* \"#utility.yul\":3337:3417   */\n      tag_305\n        /* \"#utility.yul\":3353:3416   */\n      tag_286\n        /* \"#utility.yul\":3413:3415   */\n      dup4\n        /* \"#utility.yul\":3353:3416   */\n      tag_266\n      jump\t// in\n        /* \"#utility.yul\":3337:3417   */\n    tag_305:\n        /* \"#utility.yul\":3451:3466   */\n      dup3\n      dup2\n      mstore\n        /* \"#utility.yul\":3537:3538   */\n      0x05\n        /* \"#utility.yul\":3533:3543   */\n      swap3\n      swap1\n      swap3\n      shl\n        /* \"#utility.yul\":3521:3544   */\n      dup5\n      add\n        /* \"#utility.yul\":3517:3549   */\n      dup2\n      add\n      swap2\n        /* \"#utility.yul\":3482:3494   */\n      dup2\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":3561:3576   */\n      dup7\n      dup5\n      gt\n        /* \"#utility.yul\":3558:3593   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":3589:3590   */\n      0x00\n        /* \"#utility.yul\":3586:3587   */\n      dup1\n        /* \"#utility.yul\":3579:3591   */\n      revert\n        /* \"#utility.yul\":3558:3593   */\n    tag_307:\n        /* \"#utility.yul\":3625:3627   */\n      dup3\n        /* \"#utility.yul\":3617:3623   */\n      dup7\n        /* \"#utility.yul\":3613:3628   */\n      add\n        /* \"#utility.yul\":3637:3854   */\n    tag_308:\n        /* \"#utility.yul\":3653:3659   */\n      dup5\n        /* \"#utility.yul\":3648:3651   */\n      dup2\n        /* \"#utility.yul\":3645:3660   */\n      lt\n        /* \"#utility.yul\":3637:3854   */\n      iszero\n      tag_290\n      jumpi\n        /* \"#utility.yul\":3733:3736   */\n      dup1\n        /* \"#utility.yul\":3720:3737   */\n      calldataload\n        /* \"#utility.yul\":3750:3781   */\n      tag_311\n        /* \"#utility.yul\":3775:3780   */\n      dup2\n        /* \"#utility.yul\":3750:3781   */\n      tag_263\n      jump\t// in\n    tag_311:\n        /* \"#utility.yul\":3794:3812   */\n      dup4\n      mstore\n        /* \"#utility.yul\":3832:3844   */\n      swap2\n      dup4\n      add\n      swap2\n        /* \"#utility.yul\":3670:3682   */\n      dup4\n      add\n        /* \"#utility.yul\":3637:3854   */\n      jump(tag_308)\n        /* \"#utility.yul\":3888:4557   */\n    tag_45:\n        /* \"#utility.yul\":4049:4055   */\n      0x00\n        /* \"#utility.yul\":4057:4063   */\n      dup1\n        /* \"#utility.yul\":4110:4112   */\n      0x40\n        /* \"#utility.yul\":4098:4107   */\n      dup4\n        /* \"#utility.yul\":4089:4096   */\n      dup6\n        /* \"#utility.yul\":4085:4108   */\n      sub\n        /* \"#utility.yul\":4081:4113   */\n      slt\n        /* \"#utility.yul\":4078:4130   */\n      iszero\n      tag_313\n      jumpi\n        /* \"#utility.yul\":4126:4127   */\n      0x00\n        /* \"#utility.yul\":4123:4124   */\n      dup1\n        /* \"#utility.yul\":4116:4128   */\n      revert\n        /* \"#utility.yul\":4078:4130   */\n    tag_313:\n        /* \"#utility.yul\":4166:4175   */\n      dup3\n        /* \"#utility.yul\":4153:4176   */\n      calldataload\n        /* \"#utility.yul\":4195:4213   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4236:4238   */\n      dup1\n        /* \"#utility.yul\":4228:4234   */\n      dup3\n        /* \"#utility.yul\":4225:4239   */\n      gt\n        /* \"#utility.yul\":4222:4256   */\n      iszero\n      tag_314\n      jumpi\n        /* \"#utility.yul\":4252:4253   */\n      0x00\n        /* \"#utility.yul\":4249:4250   */\n      dup1\n        /* \"#utility.yul\":4242:4254   */\n      revert\n        /* \"#utility.yul\":4222:4256   */\n    tag_314:\n        /* \"#utility.yul\":4275:4347   */\n      tag_315\n        /* \"#utility.yul\":4339:4346   */\n      dup7\n        /* \"#utility.yul\":4330:4336   */\n      dup4\n        /* \"#utility.yul\":4319:4328   */\n      dup8\n        /* \"#utility.yul\":4315:4337   */\n      add\n        /* \"#utility.yul\":4275:4347   */\n      tag_268\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":4265:4347   */\n      swap4\n      pop\n        /* \"#utility.yul\":4400:4402   */\n      0x20\n        /* \"#utility.yul\":4389:4398   */\n      dup6\n        /* \"#utility.yul\":4385:4403   */\n      add\n        /* \"#utility.yul\":4372:4404   */\n      calldataload\n        /* \"#utility.yul\":4356:4404   */\n      swap2\n      pop\n        /* \"#utility.yul\":4429:4431   */\n      dup1\n        /* \"#utility.yul\":4419:4427   */\n      dup3\n        /* \"#utility.yul\":4416:4432   */\n      gt\n        /* \"#utility.yul\":4413:4449   */\n      iszero\n      tag_316\n      jumpi\n        /* \"#utility.yul\":4445:4446   */\n      0x00\n        /* \"#utility.yul\":4442:4443   */\n      dup1\n        /* \"#utility.yul\":4435:4447   */\n      revert\n        /* \"#utility.yul\":4413:4449   */\n    tag_316:\n      pop\n        /* \"#utility.yul\":4468:4551   */\n      tag_317\n        /* \"#utility.yul\":4543:4550   */\n      dup6\n        /* \"#utility.yul\":4532:4540   */\n      dup3\n        /* \"#utility.yul\":4521:4530   */\n      dup7\n        /* \"#utility.yul\":4517:4541   */\n      add\n        /* \"#utility.yul\":4468:4551   */\n      tag_267\n      jump\t// in\n    tag_317:\n        /* \"#utility.yul\":4458:4551   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":3888:4557   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5004:5392   */\n    tag_62:\n        /* \"#utility.yul\":5072:5078   */\n      0x00\n        /* \"#utility.yul\":5080:5086   */\n      dup1\n        /* \"#utility.yul\":5133:5135   */\n      0x40\n        /* \"#utility.yul\":5121:5130   */\n      dup4\n        /* \"#utility.yul\":5112:5119   */\n      dup6\n        /* \"#utility.yul\":5108:5131   */\n      sub\n        /* \"#utility.yul\":5104:5136   */\n      slt\n        /* \"#utility.yul\":5101:5153   */\n      iszero\n      tag_321\n      jumpi\n        /* \"#utility.yul\":5149:5150   */\n      0x00\n        /* \"#utility.yul\":5146:5147   */\n      dup1\n        /* \"#utility.yul\":5139:5151   */\n      revert\n        /* \"#utility.yul\":5101:5153   */\n    tag_321:\n        /* \"#utility.yul\":5188:5197   */\n      dup3\n        /* \"#utility.yul\":5175:5198   */\n      calldataload\n        /* \"#utility.yul\":5207:5238   */\n      tag_322\n        /* \"#utility.yul\":5232:5237   */\n      dup2\n        /* \"#utility.yul\":5207:5238   */\n      tag_263\n      jump\t// in\n    tag_322:\n        /* \"#utility.yul\":5257:5262   */\n      swap2\n      pop\n        /* \"#utility.yul\":5314:5316   */\n      0x20\n        /* \"#utility.yul\":5299:5317   */\n      dup4\n      add\n        /* \"#utility.yul\":5286:5318   */\n      calldataload\n        /* \"#utility.yul\":5327:5360   */\n      tag_323\n        /* \"#utility.yul\":5286:5318   */\n      dup2\n        /* \"#utility.yul\":5327:5360   */\n      tag_263\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":5379:5386   */\n      dup1\n        /* \"#utility.yul\":5369:5386   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":5004:5392   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5397:5773   */\n    tag_74:\n        /* \"#utility.yul\":5498:5504   */\n      0x00\n        /* \"#utility.yul\":5551:5553   */\n      0x20\n        /* \"#utility.yul\":5539:5548   */\n      dup3\n        /* \"#utility.yul\":5530:5537   */\n      dup5\n        /* \"#utility.yul\":5526:5549   */\n      sub\n        /* \"#utility.yul\":5522:5554   */\n      slt\n        /* \"#utility.yul\":5519:5571   */\n      iszero\n      tag_325\n      jumpi\n        /* \"#utility.yul\":5567:5568   */\n      0x00\n        /* \"#utility.yul\":5564:5565   */\n      dup1\n        /* \"#utility.yul\":5557:5569   */\n      revert\n        /* \"#utility.yul\":5519:5571   */\n    tag_325:\n        /* \"#utility.yul\":5607:5616   */\n      dup2\n        /* \"#utility.yul\":5594:5617   */\n      calldataload\n        /* \"#utility.yul\":5640:5658   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5632:5638   */\n      dup2\n        /* \"#utility.yul\":5629:5659   */\n      gt\n        /* \"#utility.yul\":5626:5676   */\n      iszero\n      tag_326\n      jumpi\n        /* \"#utility.yul\":5672:5673   */\n      0x00\n        /* \"#utility.yul\":5669:5670   */\n      dup1\n        /* \"#utility.yul\":5662:5674   */\n      revert\n        /* \"#utility.yul\":5626:5676   */\n    tag_326:\n        /* \"#utility.yul\":5695:5767   */\n      tag_116\n        /* \"#utility.yul\":5759:5766   */\n      dup5\n        /* \"#utility.yul\":5750:5756   */\n      dup3\n        /* \"#utility.yul\":5739:5748   */\n      dup6\n        /* \"#utility.yul\":5735:5757   */\n      add\n        /* \"#utility.yul\":5695:5767   */\n      tag_268\n      jump\t// in\n        /* \"#utility.yul\":5778:5905   */\n    tag_269:\n        /* \"#utility.yul\":5839:5849   */\n      0x4e487b71\n        /* \"#utility.yul\":5834:5837   */\n      0xe0\n        /* \"#utility.yul\":5830:5850   */\n      shl\n        /* \"#utility.yul\":5827:5828   */\n      0x00\n        /* \"#utility.yul\":5820:5851   */\n      mstore\n        /* \"#utility.yul\":5870:5874   */\n      0x11\n        /* \"#utility.yul\":5867:5868   */\n      0x04\n        /* \"#utility.yul\":5860:5875   */\n      mstore\n        /* \"#utility.yul\":5894:5898   */\n      0x24\n        /* \"#utility.yul\":5891:5892   */\n      0x00\n        /* \"#utility.yul\":5884:5899   */\n      revert\n        /* \"#utility.yul\":5910:6038   */\n    tag_86:\n        /* \"#utility.yul\":5950:5953   */\n      0x00\n        /* \"#utility.yul\":5981:5982   */\n      dup3\n        /* \"#utility.yul\":5977:5983   */\n      not\n        /* \"#utility.yul\":5974:5975   */\n      dup3\n        /* \"#utility.yul\":5971:5984   */\n      gt\n        /* \"#utility.yul\":5968:6007   */\n      iszero\n      tag_331\n      jumpi\n        /* \"#utility.yul\":5987:6005   */\n      tag_331\n      tag_269\n      jump\t// in\n    tag_331:\n      pop\n        /* \"#utility.yul\":6023:6032   */\n      add\n      swap1\n        /* \"#utility.yul\":5910:6038   */\n      jump\t// out\n        /* \"#utility.yul\":6043:6399   */\n    tag_93:\n        /* \"#utility.yul\":6245:6247   */\n      0x20\n        /* \"#utility.yul\":6227:6248   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6264:6282   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":6257:6287   */\n      mstore\n        /* \"#utility.yul\":6323:6357   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":6318:6320   */\n      0x40\n        /* \"#utility.yul\":6303:6321   */\n      dup3\n      add\n        /* \"#utility.yul\":6296:6358   */\n      mstore\n        /* \"#utility.yul\":6390:6392   */\n      0x60\n        /* \"#utility.yul\":6375:6393   */\n      add\n      swap1\n        /* \"#utility.yul\":6043:6399   */\n      jump\t// out\n        /* \"#utility.yul\":6404:6531   */\n    tag_100:\n        /* \"#utility.yul\":6465:6475   */\n      0x4e487b71\n        /* \"#utility.yul\":6460:6463   */\n      0xe0\n        /* \"#utility.yul\":6456:6476   */\n      shl\n        /* \"#utility.yul\":6453:6454   */\n      0x00\n        /* \"#utility.yul\":6446:6477   */\n      mstore\n        /* \"#utility.yul\":6496:6500   */\n      0x32\n        /* \"#utility.yul\":6493:6494   */\n      0x04\n        /* \"#utility.yul\":6486:6501   */\n      mstore\n        /* \"#utility.yul\":6520:6524   */\n      0x24\n        /* \"#utility.yul\":6517:6518   */\n      0x00\n        /* \"#utility.yul\":6510:6525   */\n      revert\n        /* \"#utility.yul\":6744:6928   */\n    tag_106:\n        /* \"#utility.yul\":6814:6820   */\n      0x00\n        /* \"#utility.yul\":6867:6869   */\n      0x20\n        /* \"#utility.yul\":6855:6864   */\n      dup3\n        /* \"#utility.yul\":6846:6853   */\n      dup5\n        /* \"#utility.yul\":6842:6865   */\n      sub\n        /* \"#utility.yul\":6838:6870   */\n      slt\n        /* \"#utility.yul\":6835:6887   */\n      iszero\n      tag_336\n      jumpi\n        /* \"#utility.yul\":6883:6884   */\n      0x00\n        /* \"#utility.yul\":6880:6881   */\n      dup1\n        /* \"#utility.yul\":6873:6885   */\n      revert\n        /* \"#utility.yul\":6835:6887   */\n    tag_336:\n      pop\n        /* \"#utility.yul\":6906:6922   */\n      mload\n      swap2\n        /* \"#utility.yul\":6744:6928   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6933:7617   */\n    tag_110:\n        /* \"#utility.yul\":7130:7132   */\n      0x20\n        /* \"#utility.yul\":7182:7203   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7252:7265   */\n      dup3\n      mload\n        /* \"#utility.yul\":7155:7173   */\n      dup3\n      dup3\n      add\n        /* \"#utility.yul\":7274:7296   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":7101:7105   */\n      0x00\n      swap2\n        /* \"#utility.yul\":7130:7132   */\n      swap1\n        /* \"#utility.yul\":7353:7368   */\n      dup5\n      dup3\n      add\n      swap1\n        /* \"#utility.yul\":7327:7329   */\n      0x40\n        /* \"#utility.yul\":7312:7330   */\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":7101:7105   */\n      dup5\n        /* \"#utility.yul\":7396:7591   */\n    tag_338:\n        /* \"#utility.yul\":7410:7416   */\n      dup2\n        /* \"#utility.yul\":7407:7408   */\n      dup2\n        /* \"#utility.yul\":7404:7417   */\n      lt\n        /* \"#utility.yul\":7396:7591   */\n      iszero\n      tag_340\n      jumpi\n        /* \"#utility.yul\":7475:7488   */\n      dup4\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7471:7510   */\n      and\n        /* \"#utility.yul\":7459:7511   */\n      dup4\n      mstore\n        /* \"#utility.yul\":7566:7581   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"#utility.yul\":7531:7543   */\n      swap2\n      dup5\n      add\n      swap2\n        /* \"#utility.yul\":7507:7508   */\n      0x01\n        /* \"#utility.yul\":7425:7434   */\n      add\n        /* \"#utility.yul\":7396:7591   */\n      jump(tag_338)\n    tag_340:\n      pop\n        /* \"#utility.yul\":7608:7611   */\n      swap1\n      swap7\n        /* \"#utility.yul\":6933:7617   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7622:7747   */\n    tag_117:\n        /* \"#utility.yul\":7662:7666   */\n      0x00\n        /* \"#utility.yul\":7690:7691   */\n      dup3\n        /* \"#utility.yul\":7687:7688   */\n      dup3\n        /* \"#utility.yul\":7684:7692   */\n      lt\n        /* \"#utility.yul\":7681:7715   */\n      iszero\n      tag_343\n      jumpi\n        /* \"#utility.yul\":7695:7713   */\n      tag_343\n      tag_269\n      jump\t// in\n    tag_343:\n      pop\n        /* \"#utility.yul\":7732:7741   */\n      sub\n      swap1\n        /* \"#utility.yul\":7622:7747   */\n      jump\t// out\n        /* \"#utility.yul\":7752:7927   */\n    tag_143:\n        /* \"#utility.yul\":7789:7792   */\n      0x00\n        /* \"#utility.yul\":7833:7837   */\n      0xff\n        /* \"#utility.yul\":7826:7831   */\n      dup3\n        /* \"#utility.yul\":7822:7838   */\n      and\n        /* \"#utility.yul\":7862:7866   */\n      0xff\n        /* \"#utility.yul\":7853:7860   */\n      dup2\n        /* \"#utility.yul\":7850:7867   */\n      sub\n        /* \"#utility.yul\":7847:7890   */\n      tag_346\n      jumpi\n        /* \"#utility.yul\":7870:7888   */\n      tag_346\n      tag_269\n      jump\t// in\n    tag_346:\n        /* \"#utility.yul\":7919:7920   */\n      0x01\n        /* \"#utility.yul\":7906:7921   */\n      add\n      swap3\n        /* \"#utility.yul\":7752:7927   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9218:9628   */\n    tag_235:\n        /* \"#utility.yul\":9420:9422   */\n      0x20\n        /* \"#utility.yul\":9402:9423   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9459:9461   */\n      0x2e\n        /* \"#utility.yul\":9439:9457   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9432:9462   */\n      mstore\n        /* \"#utility.yul\":9498:9532   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":9493:9495   */\n      0x40\n        /* \"#utility.yul\":9478:9496   */\n      dup3\n      add\n        /* \"#utility.yul\":9471:9533   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":9564:9566   */\n      0x60\n        /* \"#utility.yul\":9549:9567   */\n      dup3\n      add\n        /* \"#utility.yul\":9542:9586   */\n      mstore\n        /* \"#utility.yul\":9618:9621   */\n      0x80\n        /* \"#utility.yul\":9603:9622   */\n      add\n      swap1\n        /* \"#utility.yul\":9218:9628   */\n      jump\t// out\n        /* \"#utility.yul\":9633:10040   */\n    tag_242:\n        /* \"#utility.yul\":9835:9837   */\n      0x20\n        /* \"#utility.yul\":9817:9838   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9874:9876   */\n      0x2b\n        /* \"#utility.yul\":9854:9872   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9847:9877   */\n      mstore\n        /* \"#utility.yul\":9913:9947   */\n      0x496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\n        /* \"#utility.yul\":9908:9910   */\n      0x40\n        /* \"#utility.yul\":9893:9911   */\n      dup3\n      add\n        /* \"#utility.yul\":9886:9948   */\n      mstore\n      shl(0xa8, 0x6e697469616c697a696e67)\n        /* \"#utility.yul\":9979:9981   */\n      0x60\n        /* \"#utility.yul\":9964:9982   */\n      dup3\n      add\n        /* \"#utility.yul\":9957:9998   */\n      mstore\n        /* \"#utility.yul\":10030:10033   */\n      0x80\n        /* \"#utility.yul\":10015:10034   */\n      add\n      swap1\n        /* \"#utility.yul\":9633:10040   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220a292f02ecdfa76c83fa0c218cec2aba5c1d199d7dc603af1e56d13848d21ec3264736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_597": {
									"entryPoint": null,
									"id": 597,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_setInitializedVersion_264": {
									"entryPoint": 135,
									"id": 264,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@isContract_283": {
									"entryPoint": 409,
									"id": 283,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:625:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "121:87:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "131:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "143:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "154:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "139:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "139:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "131:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "188:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "196:4:7",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "184:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "184:17:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:36:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "90:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "101:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "112:4:7",
														"type": ""
													}
												],
												"src": "14:194:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "387:236:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "404:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "415:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "397:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "397:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "397:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "438:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "449:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "434:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "434:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "454:2:7",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "427:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "427:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "427:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "477:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "488:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "473:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "473:18:7"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "493:34:7",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "466:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "466:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "466:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "548:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "559:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "544:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "544:18:7"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "564:16:7",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "537:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "537:44:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "537:44:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "590:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "602:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "613:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "598:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "598:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "590:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "364:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "378:4:7",
														"type": ""
													}
												],
												"src": "213:410:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH3 0x20 PUSH1 0x1 PUSH3 0x87 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH3 0x39 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST DUP1 ISZERO PUSH3 0x80 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP PUSH3 0x1A8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x120 JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH3 0xC0 JUMPI POP PUSH3 0xBE ADDRESS PUSH3 0x199 PUSH1 0x20 SHL PUSH3 0xAB3 OR PUSH1 0x20 SHR JUMP JUMPDEST ISZERO JUMPDEST PUSH3 0x118 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x12D4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH3 0x17F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x12D4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x10F JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x111C DUP1 PUSH3 0x1B8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87F049E4 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xCCAD973D GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCCAD973D EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0xE7D325A1 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xF220D16C EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x87F049E4 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x9F7B7EAD EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xC5C66D4D EQ PUSH2 0x1F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0x71BC16B5 EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x73CF25F8 EQ PUSH2 0x17B JUMPI DUP1 PUSH4 0x7BF962DE EQ PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BF9518C EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x4FE01823 EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x5886216F EQ PUSH2 0x122 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xC85 JUMP JUMPDEST PUSH2 0x275 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10D PUSH2 0x11D CALLDATASIZE PUSH1 0x4 PUSH2 0xD90 JUMP JUMPDEST PUSH2 0x2B1 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC5 JUMP JUMPDEST PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10D PUSH2 0x425 JUMP JUMPDEST PUSH2 0x163 PUSH2 0x15E CALLDATASIZE PUSH1 0x4 PUSH2 0xDE9 JUMP JUMPDEST PUSH2 0x45B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13F JUMP JUMPDEST PUSH2 0x10D PUSH2 0x189 CALLDATASIZE PUSH1 0x4 PUSH2 0xE66 JUMP JUMPDEST PUSH2 0x485 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x19C CALLDATASIZE PUSH1 0x4 PUSH2 0xDC5 JUMP JUMPDEST PUSH2 0x68B JUMP JUMPDEST PUSH2 0x163 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0xDE9 JUMP JUMPDEST PUSH2 0x7AA JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x163 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0xECA JUMP JUMPDEST PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0xECA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0xC85 JUMP JUMPDEST PUSH2 0x7BA JUMP JUMPDEST PUSH2 0x10D PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0xF03 JUMP JUMPDEST PUSH2 0x847 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0xDC5 JUMP JUMPDEST PUSH2 0x962 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC5 JUMP JUMPDEST PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x2A8 SWAP1 DUP5 SWAP1 PUSH2 0xF4E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0xF66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x390 JUMPI DUP3 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x309 JUMPI PUSH2 0x309 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x441130D5 PUSH8 0xDE0B6B3A7640000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x346 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x363 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x387 SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2E9 JUMP JUMPDEST POP DUP2 MLOAD PUSH2 0x3A4 SWAP1 PUSH1 0x66 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x2ABC0E25EC4D3CB00CD094F0BCA86E790D0F6455CF9064345274FC97586B31C5 DUP4 PUSH1 0x40 MLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0xFCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3F6 DUP4 PUSH2 0x962 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x403 DUP5 PUSH2 0x68B JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT PUSH2 0x413 JUMPI PUSH1 0x0 PUSH2 0x41D JUMP JUMPDEST PUSH2 0x41D DUP2 DUP4 PUSH2 0x1017 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x44F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0xF66 JUMP JUMPDEST PUSH2 0x459 PUSH1 0x0 PUSH2 0xAC2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x491 PUSH1 0x1 PUSH2 0xB14 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x556 JUMPI DUP5 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x4CE JUMPI PUSH2 0x4CE PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x36B5BC37 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDAD6F0DC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x51F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x543 SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST POP DUP1 PUSH2 0x54E DUP2 PUSH2 0x102E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4AE JUMP JUMPDEST POP DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x60D JUMPI DUP5 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x57C JUMPI PUSH2 0x57C PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x441130D5 PUSH8 0xDE0B6B3A7640000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5B9 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5FA SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST POP DUP1 PUSH2 0x605 DUP2 PUSH2 0x102E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x55C JUMP JUMPDEST POP PUSH2 0x616 PUSH2 0xB9C JUMP JUMPDEST DUP5 MLOAD PUSH2 0x629 SWAP1 PUSH1 0x65 SWAP1 PUSH1 0x20 DUP9 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST POP DUP4 MLOAD PUSH2 0x63D SWAP1 PUSH1 0x66 SWAP1 PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST POP POP POP DUP1 ISZERO PUSH2 0x686 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x7A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x66 DUP1 SLOAD DUP4 SWAP2 SWAP1 PUSH1 0xFF DUP7 AND SWAP1 DUP2 LT PUSH2 0x6D2 JUMPI PUSH2 0x6D2 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 ADD SWAP1 KECCAK256 SLOAD SWAP1 POP DUP1 ISZERO PUSH2 0x798 JUMPI PUSH1 0x66 DUP3 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x715 JUMPI PUSH2 0x715 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x441130D5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x441130D5 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x767 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x78B SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x795 SWAP1 DUP6 PUSH2 0xF4E JUMP JUMPDEST SWAP4 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x695 JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x66 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x819 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x814 SWAP1 DUP3 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x871 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0xF66 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x914 JUMPI DUP3 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x896 JUMPI PUSH2 0x896 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x36B5BC37 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDAD6F0DC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x90B SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x876 JUMP JUMPDEST POP DUP2 MLOAD PUSH2 0x928 SWAP1 PUSH1 0x65 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE1C8F0C34D1EBB59573A7F5D542C350A1762869A702DD1ECEA79C1DC6B44D865 DUP4 PUSH1 0x40 MLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0xFCA JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x7A1 JUMPI PUSH1 0x65 DUP2 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x98D JUMPI PUSH2 0x98D PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x36B5BC37 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xDAD6F0DC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA04 SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0xA0E SWAP1 DUP5 PUSH2 0xF4E JUMP JUMPDEST SWAP3 POP PUSH1 0x1 ADD PUSH2 0x96C JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA42 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0xF66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2DB JUMP JUMPDEST PUSH2 0xAB0 DUP2 PUSH2 0xAC2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xB5B JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xB37 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0xB53 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0x104D JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0xB82 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0x104D JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xBC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH2 0x459 PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xBED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH2 0x459 CALLER PUSH2 0xAC2 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xC4B JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xC4B JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xC16 JUMP JUMPDEST POP PUSH2 0xC57 SWAP3 SWAP2 POP PUSH2 0xC5B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xC57 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xCA3 DUP2 PUSH2 0xC70 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xCF0 JUMPI PUSH2 0xCF0 PUSH2 0xCB1 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xD12 JUMPI PUSH2 0xD12 PUSH2 0xCB1 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xD42 PUSH2 0xD3D DUP4 PUSH2 0xCF8 JUMP JUMPDEST PUSH2 0xCC7 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0xD61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xD85 JUMPI DUP1 CALLDATALOAD PUSH2 0xD78 DUP2 PUSH2 0xC70 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xD65 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41D DUP5 DUP3 DUP6 ADD PUSH2 0xD1C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xDE2 DUP2 PUSH2 0xC70 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xE23 PUSH2 0xD3D DUP4 PUSH2 0xCF8 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xD85 JUMPI DUP1 CALLDATALOAD PUSH2 0xE59 DUP2 PUSH2 0xC70 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xE46 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE9D DUP7 DUP4 DUP8 ADD PUSH2 0xE02 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xEB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC0 DUP6 DUP3 DUP7 ADD PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xEE8 DUP2 PUSH2 0xC70 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xEF8 DUP2 PUSH2 0xC70 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41D DUP5 DUP3 DUP6 ADD PUSH2 0xE02 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xF61 JUMPI PUSH2 0xF61 PUSH2 0xF38 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x100B JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xFE6 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1029 JUMPI PUSH2 0x1029 PUSH2 0xF38 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 SUB PUSH2 0x1044 JUMPI PUSH2 0x1044 PUSH2 0xF38 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 SWAP3 CREATE 0x2E 0xCD STATICCALL PUSH23 0xC83FA0C218CEC2ABA5C1D199D7DC603AF1E56D13848D21 0xEC ORIGIN PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER 0x49 PUSH15 0x697469616C697A61626C653A20636F PUSH15 0x747261637420697320616C72656100 ",
							"sourceMap": "624:4927:4:-:0;;;1054:28;;;;;;;;;-1:-1:-1;3111:19:1;3133:25;3156:1;3133:22;:25::i;:::-;3111:47;;3172:14;3168:65;;;3202:13;:20;;-1:-1:-1;;3202:20:1;;;;;3168:65;3257:14;3253:99;;;3303:5;3287:21;;-1:-1:-1;;3287:21:1;;;3327:14;;-1:-1:-1;166:36:7;;3327:14:1;;154:2:7;139:18;3327:14:1;;;;;;;3253:99;3101:257;624:4927:4;;5287:808:1;5351:4;5684:13;;;;;;;5680:409;;;5738:7;:12;;5749:1;5738:12;:61;;;;;5755:44;5793:4;5755:29;;;;;:44;;:::i;:::-;5754:45;5738:61;5713:166;;;;-1:-1:-1;;;5713:166:1;;415:2:7;5713:166:1;;;397:21:7;454:2;434:18;;;427:30;-1:-1:-1;;;;;;;;;;;473:18:7;;;466:62;-1:-1:-1;;;544:18:7;;;537:44;598:19;;5713:166:1;;;;;;;;;-1:-1:-1;5900:5:1;;5287:808;-1:-1:-1;5287:808:1:o;5680:409::-;5944:12;;:22;;;;:12;;:22;5936:81;;;;-1:-1:-1;;;5936:81:1;;415:2:7;5936:81:1;;;397:21:7;454:2;434:18;;;427:30;-1:-1:-1;;;;;;;;;;;473:18:7;;;466:62;-1:-1:-1;;;544:18:7;;;537:44;598:19;;5936:81:1;213:410:7;5936:81:1;-1:-1:-1;6031:12:1;:22;;-1:-1:-1;;6031:22:1;;;;;;;;;;;;-1:-1:-1;;5287:808:1:o;1186:320:2:-;-1:-1:-1;;;;;1476:19:2;;:23;;;1186:320::o;213:410:7:-;624:4927:4;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__Ownable_init_26": {
									"entryPoint": 2972,
									"id": 26,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_37": {
									"entryPoint": null,
									"id": 37,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_535": {
									"entryPoint": null,
									"id": 535,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_setInitializedVersion_264": {
									"entryPoint": 2836,
									"id": 264,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_transferOwnership_117": {
									"entryPoint": 2754,
									"id": 117,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@availableCredit_807": {
									"entryPoint": 1002,
									"id": 807,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@creditors_581": {
									"entryPoint": 1115,
									"id": 581,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@getUserVaultShares_972": {
									"entryPoint": null,
									"id": 972,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@initialize_676": {
									"entryPoint": 1157,
									"id": 676,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@isContract_283": {
									"entryPoint": 2739,
									"id": 283,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@onDeposit_920": {
									"entryPoint": 629,
									"id": 920,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@onWithdraw_955": {
									"entryPoint": 1978,
									"id": 955,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@owner_46": {
									"entryPoint": null,
									"id": 46,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@privateVaults_585": {
									"entryPoint": 1962,
									"id": 585,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@renounceOwnership_74": {
									"entryPoint": 1061,
									"id": 74,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@setCreditors_902": {
									"entryPoint": 2119,
									"id": 902,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setPrivateVaults_853": {
									"entryPoint": 689,
									"id": 853,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@totalCredit_719": {
									"entryPoint": 2402,
									"id": 719,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@transferOwnership_97": {
									"entryPoint": 2584,
									"id": 97,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@usedCredit_777": {
									"entryPoint": 1675,
									"id": 777,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@userVaultShares_591": {
									"entryPoint": null,
									"id": 591,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_array_contract_ICreditor_dyn": {
									"entryPoint": 3586,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_array_contract_IDeltaNeutralVault_dyn": {
									"entryPoint": 3356,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3525,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3786,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3205,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr": {
									"entryPoint": 3843,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptrt_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr": {
									"entryPoint": 3686,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr": {
									"entryPoint": 3472,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3561,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 4017,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 4042,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_ICreditor_$983__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IDeltaNeutralVault_$993__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1000000000000000000_by_1__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4173,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3942,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4251,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 3271,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_allocation_size_array_contract_IDeltaNeutralVault_dyn": {
									"entryPoint": 3320,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3918,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 4119,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"increment_t_uint8": {
									"entryPoint": 4142,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3896,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 3995,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 3249,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_address": {
									"entryPoint": 3184,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:10042:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:86:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "123:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "135:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "125:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "125:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "82:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "93:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "108:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "113:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "104:3:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "104:11:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "117:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "100:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "100:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "89:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "89:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "79:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "79:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "72:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "72:50:7"
															},
															"nodeType": "YulIf",
															"src": "69:70:7"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "48:5:7",
														"type": ""
													}
												],
												"src": "14:131:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "237:228:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "283:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "292:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "295:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "285:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "285:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "285:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "258:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "267:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "254:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "254:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "279:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "250:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "250:32:7"
															},
															"nodeType": "YulIf",
															"src": "247:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "308:36:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "334:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "321:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "321:23:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "312:5:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "378:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "353:24:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "353:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "353:31:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "393:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "403:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "393:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "417:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "444:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "455:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "440:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "440:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "427:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "427:32:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "417:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "195:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "206:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "218:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "226:6:7",
														"type": ""
													}
												],
												"src": "150:315:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "502:95:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "519:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "526:3:7",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "531:10:7",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "522:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "522:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "512:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "512:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "512:31:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "559:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "562:4:7",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "552:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "552:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "552:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "583:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "586:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "576:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "576:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "576:15:7"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "470:127:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "647:230:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "657:19:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "673:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "667:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "667:9:7"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "657:6:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "685:58:7",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "707:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "size",
																						"nodeType": "YulIdentifier",
																						"src": "723:4:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "729:2:7",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "719:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "719:13:7"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "738:2:7",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "734:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "734:7:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "715:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "715:27:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "703:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "703:40:7"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "689:10:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "818:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "820:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "820:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "820:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "761:10:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "773:18:7",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "758:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "758:34:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "797:10:7"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "809:6:7"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "794:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "794:22:7"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "755:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "755:62:7"
															},
															"nodeType": "YulIf",
															"src": "752:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "856:2:7",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "860:10:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "849:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "849:22:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "849:22:7"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "627:4:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "636:6:7",
														"type": ""
													}
												],
												"src": "602:275:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "971:114:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1015:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1017:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1017:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1017:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "987:6:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "995:18:7",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "984:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "984:30:7"
															},
															"nodeType": "YulIf",
															"src": "981:56:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1046:33:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1062:1:7",
																				"type": "",
																				"value": "5"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1065:6:7"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1058:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1058:14:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1074:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1054:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1054:25:7"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1046:4:7"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_array_contract_IDeltaNeutralVault_dyn",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "951:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "962:4:7",
														"type": ""
													}
												],
												"src": "882:203:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1174:693:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1223:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1232:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1235:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1225:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1225:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1225:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1202:6:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1210:4:7",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1198:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1198:17:7"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "1217:3:7"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "1194:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1194:27:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1187:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1187:35:7"
															},
															"nodeType": "YulIf",
															"src": "1184:55:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1248:30:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1271:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1258:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1258:20:7"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1252:2:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1287:14:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1297:4:7",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "1291:2:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1310:91:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1397:2:7"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_array_contract_IDeltaNeutralVault_dyn",
																			"nodeType": "YulIdentifier",
																			"src": "1337:59:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1337:63:7"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "1321:15:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1321:80:7"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "1314:3:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1410:16:7",
															"value": {
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "1423:3:7"
															},
															"variables": [
																{
																	"name": "dst_1",
																	"nodeType": "YulTypedName",
																	"src": "1414:5:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "1442:3:7"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1447:2:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1435:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1435:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1435:15:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1459:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "1470:3:7"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1475:2:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1466:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1466:12:7"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "1459:3:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1487:46:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1509:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1521:1:7",
																						"type": "",
																						"value": "5"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "1524:2:7"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "1517:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1517:10:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1505:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1505:23:7"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1530:2:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1501:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1501:32:7"
															},
															"variables": [
																{
																	"name": "srcEnd",
																	"nodeType": "YulTypedName",
																	"src": "1491:6:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1561:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1570:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1573:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1563:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1563:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1563:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1548:6:7"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "1556:3:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1545:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1545:15:7"
															},
															"nodeType": "YulIf",
															"src": "1542:35:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1586:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1601:6:7"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1609:2:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1597:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1597:15:7"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "1590:3:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1677:161:7",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1691:30:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "1717:3:7"
																				}
																			],
																			"functionName": {
																				"name": "calldataload",
																				"nodeType": "YulIdentifier",
																				"src": "1704:12:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1704:17:7"
																		},
																		"variables": [
																			{
																				"name": "value",
																				"nodeType": "YulTypedName",
																				"src": "1695:5:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "1759:5:7"
																				}
																			],
																			"functionName": {
																				"name": "validator_revert_address",
																				"nodeType": "YulIdentifier",
																				"src": "1734:24:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1734:31:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1734:31:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "1785:3:7"
																				},
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "1790:5:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1778:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1778:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1778:18:7"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1809:19:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "1820:3:7"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "1825:2:7"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1816:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1816:12:7"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "1809:3:7"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "1632:3:7"
																	},
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1637:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1629:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1629:15:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1645:23:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1647:19:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "1658:3:7"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "1663:2:7"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1654:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1654:12:7"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "1647:3:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1625:3:7",
																"statements": []
															},
															"src": "1621:217:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1847:14:7",
															"value": {
																"name": "dst_1",
																"nodeType": "YulIdentifier",
																"src": "1856:5:7"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1847:5:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_array_contract_IDeltaNeutralVault_dyn",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1148:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1156:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "1164:5:7",
														"type": ""
													}
												],
												"src": "1090:777:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1993:273:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2039:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2048:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2051:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2041:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2041:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2041:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2014:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2023:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2010:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2010:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2035:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2006:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2006:32:7"
															},
															"nodeType": "YulIf",
															"src": "2003:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2064:37:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2091:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2078:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2078:23:7"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2068:6:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2144:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2153:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2156:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2146:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2146:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2146:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2116:6:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2124:18:7",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2113:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2113:30:7"
															},
															"nodeType": "YulIf",
															"src": "2110:50:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2169:91:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2232:9:7"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2243:6:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2228:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2228:22:7"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2252:7:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_contract_IDeltaNeutralVault_dyn",
																	"nodeType": "YulIdentifier",
																	"src": "2179:48:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2179:81:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2169:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1959:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1970:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1982:6:7",
														"type": ""
													}
												],
												"src": "1872:394:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2341:177:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2387:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2396:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2399:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2389:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2389:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2389:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2362:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2371:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2358:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2358:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2383:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2354:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2354:32:7"
															},
															"nodeType": "YulIf",
															"src": "2351:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2412:36:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2438:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2425:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2425:23:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2416:5:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2482:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2457:24:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2457:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2457:31:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2497:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2507:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2497:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2307:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2318:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2330:6:7",
														"type": ""
													}
												],
												"src": "2271:247:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2624:76:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2634:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2646:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2657:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2642:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2642:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2634:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2676:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2687:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2669:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2669:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2669:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2593:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2604:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2615:4:7",
														"type": ""
													}
												],
												"src": "2523:177:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2775:110:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2821:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2830:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2833:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2823:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2823:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2823:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2796:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2805:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2792:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2792:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2817:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2788:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2788:32:7"
															},
															"nodeType": "YulIf",
															"src": "2785:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2846:33:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2869:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2856:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2856:23:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2846:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2741:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2752:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2764:6:7",
														"type": ""
													}
												],
												"src": "2705:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3008:102:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3018:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3030:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3041:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3026:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3026:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3018:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3060:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3075:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3091:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3096:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3087:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3087:11:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3100:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3083:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3083:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3071:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3071:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3053:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3053:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3053:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ICreditor_$983__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2977:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2988:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2999:4:7",
														"type": ""
													}
												],
												"src": "2890:220:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3190:693:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3239:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3248:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3251:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3241:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3241:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3241:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3218:6:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3226:4:7",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3214:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3214:17:7"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "3233:3:7"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3210:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3210:27:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3203:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3203:35:7"
															},
															"nodeType": "YulIf",
															"src": "3200:55:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3264:30:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3287:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3274:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3274:20:7"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3268:2:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3303:14:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3313:4:7",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3307:2:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3326:91:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3413:2:7"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_array_contract_IDeltaNeutralVault_dyn",
																			"nodeType": "YulIdentifier",
																			"src": "3353:59:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3353:63:7"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3337:15:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3337:80:7"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "3330:3:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3426:16:7",
															"value": {
																"name": "dst",
																"nodeType": "YulIdentifier",
																"src": "3439:3:7"
															},
															"variables": [
																{
																	"name": "dst_1",
																	"nodeType": "YulTypedName",
																	"src": "3430:5:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "3458:3:7"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3463:2:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3451:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3451:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3451:15:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3475:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "3486:3:7"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3491:2:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3482:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3482:12:7"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "3475:3:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3503:46:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3525:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3537:1:7",
																						"type": "",
																						"value": "5"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "3540:2:7"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "3533:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3533:10:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3521:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3521:23:7"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3546:2:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3517:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3517:32:7"
															},
															"variables": [
																{
																	"name": "srcEnd",
																	"nodeType": "YulTypedName",
																	"src": "3507:6:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3577:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3586:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3589:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3579:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3579:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3579:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3564:6:7"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "3572:3:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3561:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3561:15:7"
															},
															"nodeType": "YulIf",
															"src": "3558:35:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3602:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3617:6:7"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3625:2:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3613:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3613:15:7"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "3606:3:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3693:161:7",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "3707:30:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "3733:3:7"
																				}
																			],
																			"functionName": {
																				"name": "calldataload",
																				"nodeType": "YulIdentifier",
																				"src": "3720:12:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3720:17:7"
																		},
																		"variables": [
																			{
																				"name": "value",
																				"nodeType": "YulTypedName",
																				"src": "3711:5:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "3775:5:7"
																				}
																			],
																			"functionName": {
																				"name": "validator_revert_address",
																				"nodeType": "YulIdentifier",
																				"src": "3750:24:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3750:31:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3750:31:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "3801:3:7"
																				},
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "3806:5:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3794:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3794:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3794:18:7"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "3825:19:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "3836:3:7"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "3841:2:7"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3832:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3832:12:7"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "3825:3:7"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "3648:3:7"
																	},
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3653:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3645:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3645:15:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "3661:23:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3663:19:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "3674:3:7"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "3679:2:7"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3670:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3670:12:7"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "3663:3:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "3641:3:7",
																"statements": []
															},
															"src": "3637:217:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3863:14:7",
															"value": {
																"name": "dst_1",
																"nodeType": "YulIdentifier",
																"src": "3872:5:7"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "3863:5:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_array_contract_ICreditor_dyn",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3164:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3172:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "3180:5:7",
														"type": ""
													}
												],
												"src": "3115:768:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4068:489:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4114:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4123:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4126:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4116:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4116:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4116:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4089:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4098:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4085:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4085:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4110:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4081:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4081:32:7"
															},
															"nodeType": "YulIf",
															"src": "4078:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4139:37:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4166:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4153:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4153:23:7"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "4143:6:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4185:28:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4195:18:7",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4189:2:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4240:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4249:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4252:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4242:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4242:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4242:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4228:6:7"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4236:2:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4225:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4225:14:7"
															},
															"nodeType": "YulIf",
															"src": "4222:34:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4265:82:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4319:9:7"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "4330:6:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4315:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4315:22:7"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4339:7:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_contract_ICreditor_dyn",
																	"nodeType": "YulIdentifier",
																	"src": "4275:39:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4275:72:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4265:6:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4356:48:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4389:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4400:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4385:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4385:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4372:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4372:32:7"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "4360:8:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4433:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4442:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4445:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4435:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4435:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4435:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "4419:8:7"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4429:2:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4416:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4416:16:7"
															},
															"nodeType": "YulIf",
															"src": "4413:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4458:93:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4521:9:7"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "4532:8:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4517:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4517:24:7"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4543:7:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_contract_IDeltaNeutralVault_dyn",
																	"nodeType": "YulIdentifier",
																	"src": "4468:48:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4468:83:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4458:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptrt_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4026:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4037:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4049:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4057:6:7",
														"type": ""
													}
												],
												"src": "3888:669:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4689:102:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4699:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4711:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4722:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4707:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4707:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4699:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4741:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4756:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4772:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4777:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4768:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4768:11:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4781:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4764:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4764:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4752:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4752:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4734:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4734:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4734:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IDeltaNeutralVault_$993__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4658:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4669:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4680:4:7",
														"type": ""
													}
												],
												"src": "4562:229:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4897:102:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4907:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4919:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4930:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4915:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4915:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4907:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4949:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4964:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4980:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4985:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4976:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4976:11:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4989:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4972:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4972:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4960:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4960:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4942:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4942:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4942:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4866:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4877:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4888:4:7",
														"type": ""
													}
												],
												"src": "4796:203:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5091:301:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5137:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5146:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5149:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5139:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5139:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5139:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5112:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5121:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5108:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5108:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5133:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5104:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5104:32:7"
															},
															"nodeType": "YulIf",
															"src": "5101:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5162:36:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5188:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5175:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5175:23:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5166:5:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5232:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "5207:24:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5207:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5207:31:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5247:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "5257:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5247:6:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5271:47:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5303:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5314:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5299:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5299:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5286:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5286:32:7"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "5275:7:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "5352:7:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "5327:24:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5327:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5327:33:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5369:17:7",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "5379:7:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5369:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5049:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5060:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5072:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5080:6:7",
														"type": ""
													}
												],
												"src": "5004:388:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5509:264:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5555:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5564:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5567:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5557:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5557:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5557:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5530:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5539:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5526:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5526:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5551:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5522:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5522:32:7"
															},
															"nodeType": "YulIf",
															"src": "5519:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5580:37:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5607:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5594:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5594:23:7"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "5584:6:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5660:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5669:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5672:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5662:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5662:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5662:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5632:6:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5640:18:7",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5629:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5629:30:7"
															},
															"nodeType": "YulIf",
															"src": "5626:50:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5685:82:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5739:9:7"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "5750:6:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5735:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5735:22:7"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "5759:7:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_array_contract_ICreditor_dyn",
																	"nodeType": "YulIdentifier",
																	"src": "5695:39:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5695:72:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5685:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5475:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5486:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5498:6:7",
														"type": ""
													}
												],
												"src": "5397:376:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5810:95:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5827:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5834:3:7",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5839:10:7",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5830:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5830:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5820:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5820:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5820:31:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5867:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5870:4:7",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5860:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5860:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5860:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5891:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5894:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5884:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5884:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5884:15:7"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "5778:127:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5958:80:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5985:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "5987:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5987:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5987:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5974:1:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5981:1:7"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5977:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5977:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5971:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5971:13:7"
															},
															"nodeType": "YulIf",
															"src": "5968:39:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6016:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6027:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6030:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6023:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "6016:3:7"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5941:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5944:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5950:3:7",
														"type": ""
													}
												],
												"src": "5910:128:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6217:182:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6234:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6245:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6227:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6227:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6227:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6268:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6279:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6264:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6264:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6284:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6257:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6257:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6257:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6307:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6318:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6303:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6303:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6323:34:7",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6296:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6296:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6296:62:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6367:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6379:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6390:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6375:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6375:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6367:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6194:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6208:4:7",
														"type": ""
													}
												],
												"src": "6043:356:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6436:95:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6453:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6460:3:7",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6465:10:7",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6456:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6456:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6446:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6446:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6446:31:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6493:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6496:4:7",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6486:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6486:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6486:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6517:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6520:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6510:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6510:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6510:15:7"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "6404:127:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6663:76:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6673:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6685:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6696:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6681:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6681:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6673:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6715:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6726:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6708:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6708:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6708:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1000000000000000000_by_1__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6632:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6643:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6654:4:7",
														"type": ""
													}
												],
												"src": "6536:203:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6825:103:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6871:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6880:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6883:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6873:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6873:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6873:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6846:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6855:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6842:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6842:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6867:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6838:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6838:32:7"
															},
															"nodeType": "YulIf",
															"src": "6835:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6896:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6912:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6906:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6906:16:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6896:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6791:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6802:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6814:6:7",
														"type": ""
													}
												],
												"src": "6744:184:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7110:507:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7120:12:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7130:2:7",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7124:2:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7141:32:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7159:9:7"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "7170:2:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7155:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7155:18:7"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "7145:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7189:9:7"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "7200:2:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7182:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7182:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7182:21:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7212:17:7",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "7223:6:7"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "7216:3:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7238:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7258:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7252:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7252:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7242:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "7281:6:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7289:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7274:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7274:22:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7274:22:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7305:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7316:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7327:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7312:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7312:18:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7305:3:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7339:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7357:6:7"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "7365:2:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7353:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7353:15:7"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "7343:6:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7377:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7386:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "7381:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7445:146:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "7466:3:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "srcPtr",
																									"nodeType": "YulIdentifier",
																									"src": "7481:6:7"
																								}
																							],
																							"functionName": {
																								"name": "mload",
																								"nodeType": "YulIdentifier",
																								"src": "7475:5:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7475:13:7"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "7498:3:7",
																											"type": "",
																											"value": "160"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "7503:1:7",
																											"type": "",
																											"value": "1"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "7494:3:7"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "7494:11:7"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "7507:1:7",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "7490:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7490:19:7"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "7471:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7471:39:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7459:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7459:52:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7459:52:7"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7524:19:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "7535:3:7"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "7540:2:7"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7531:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7531:12:7"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "7524:3:7"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7556:25:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "7570:6:7"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "7578:2:7"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7566:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7566:15:7"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7556:6:7"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7407:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7410:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "7404:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7404:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7418:18:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7420:14:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "7429:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7432:1:7",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7425:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7425:9:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "7420:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7400:3:7",
																"statements": []
															},
															"src": "7396:195:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7600:11:7",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "7608:3:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7600:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7079:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7090:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7101:4:7",
														"type": ""
													}
												],
												"src": "6933:684:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7671:76:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7693:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7695:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7695:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7695:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7687:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7690:1:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "7684:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7684:8:7"
															},
															"nodeType": "YulIf",
															"src": "7681:34:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7724:17:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7736:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7739:1:7"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7732:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7732:9:7"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "7724:4:7"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7653:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7656:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "7662:4:7",
														"type": ""
													}
												],
												"src": "7622:125:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7797:130:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7807:31:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7826:5:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7833:4:7",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "7822:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7822:16:7"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "7811:7:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7868:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7870:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7870:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7870:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "7853:7:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7862:4:7",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "7850:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7850:17:7"
															},
															"nodeType": "YulIf",
															"src": "7847:43:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7899:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "7910:7:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7919:1:7",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7906:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7906:15:7"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "7899:3:7"
																}
															]
														}
													]
												},
												"name": "increment_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7779:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "7789:3:7",
														"type": ""
													}
												],
												"src": "7752:175:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8039:87:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8049:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8061:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8072:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8057:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8057:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8049:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8091:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "8106:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8114:4:7",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8102:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8102:17:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8084:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8084:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8084:36:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8008:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8019:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8030:4:7",
														"type": ""
													}
												],
												"src": "7932:194:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8299:507:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8309:12:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8319:2:7",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "8313:2:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8330:32:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8348:9:7"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "8359:2:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8344:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8344:18:7"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "8334:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8378:9:7"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "8389:2:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8371:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8371:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8371:21:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8401:17:7",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "8412:6:7"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "8405:3:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8427:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8447:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8441:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8441:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "8431:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "8470:6:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8478:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8463:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8463:22:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8463:22:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8494:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8505:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8516:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8501:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8501:18:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8494:3:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8528:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8546:6:7"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "8554:2:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8542:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8542:15:7"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "8532:6:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8566:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8575:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "8570:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8634:146:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "8655:3:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "srcPtr",
																									"nodeType": "YulIdentifier",
																									"src": "8670:6:7"
																								}
																							],
																							"functionName": {
																								"name": "mload",
																								"nodeType": "YulIdentifier",
																								"src": "8664:5:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8664:13:7"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "8687:3:7",
																											"type": "",
																											"value": "160"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "8692:1:7",
																											"type": "",
																											"value": "1"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "8683:3:7"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "8683:11:7"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "8696:1:7",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "8679:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8679:19:7"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "8660:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8660:39:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8648:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8648:52:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8648:52:7"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "8713:19:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "8724:3:7"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "8729:2:7"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "8720:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8720:12:7"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "8713:3:7"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "8745:25:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "8759:6:7"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "8767:2:7"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "8755:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8755:15:7"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8745:6:7"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8596:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8599:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "8593:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8593:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "8607:18:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8609:14:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "8618:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8621:1:7",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "8614:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8614:9:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "8609:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "8589:3:7",
																"statements": []
															},
															"src": "8585:195:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8789:11:7",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "8797:3:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8789:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8268:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8279:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8290:4:7",
														"type": ""
													}
												],
												"src": "8131:675:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8985:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9002:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9013:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8995:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8995:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8995:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9036:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9047:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9032:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9032:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9052:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9025:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9025:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9025:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9075:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9086:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9071:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9071:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9091:34:7",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9064:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9064:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9064:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9146:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9157:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9142:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9142:18:7"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9162:8:7",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9135:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9135:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9135:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9180:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9192:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9203:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9188:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9188:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9180:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8962:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8976:4:7",
														"type": ""
													}
												],
												"src": "8811:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9392:236:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9409:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9420:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9402:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9402:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9402:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9443:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9454:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9439:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9439:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9459:2:7",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9432:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9432:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9432:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9482:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9493:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9478:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9478:18:7"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9498:34:7",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9471:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9471:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9471:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9553:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9564:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9549:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9549:18:7"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9569:16:7",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9542:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9542:44:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9542:44:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9595:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9607:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9618:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9603:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9603:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9595:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9369:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9383:4:7",
														"type": ""
													}
												],
												"src": "9218:410:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9807:233:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9824:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9835:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9817:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9817:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9817:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9858:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9869:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9854:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9854:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9874:2:7",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9847:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9847:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9847:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9897:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9908:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9893:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9893:18:7"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9913:34:7",
																		"type": "",
																		"value": "Initializable: contract is not i"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9886:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9886:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9886:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9968:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9979:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9964:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9964:18:7"
																	},
																	{
																		"hexValue": "6e697469616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9984:13:7",
																		"type": "",
																		"value": "nitializing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9957:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9957:41:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9957:41:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10007:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10019:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10030:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10015:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10015:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10007:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9784:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9798:4:7",
														"type": ""
													}
												],
												"src": "9633:407:7"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_contract_IDeltaNeutralVault_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_contract_IDeltaNeutralVault_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_contract_IDeltaNeutralVault_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let value := calldataload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_array_contract_IDeltaNeutralVault_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_contract$_ICreditor_$983__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_array_contract_ICreditor_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_contract_IDeltaNeutralVault_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let value := calldataload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptrt_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_contract_ICreditor_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_contract_IDeltaNeutralVault_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_tuple_t_contract$_IDeltaNeutralVault_$993__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_array_contract_ICreditor_dyn(add(headStart, offset), dataEnd)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_rational_1000000000000000000_by_1__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function increment_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if eq(value_1, 0xff) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87F049E4 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xCCAD973D GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCCAD973D EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0xE7D325A1 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xF220D16C EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x87F049E4 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x9F7B7EAD EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xC5C66D4D EQ PUSH2 0x1F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0x71BC16B5 EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x73CF25F8 EQ PUSH2 0x17B JUMPI DUP1 PUSH4 0x7BF962DE EQ PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BF9518C EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x4FE01823 EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x5886216F EQ PUSH2 0x122 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xC85 JUMP JUMPDEST PUSH2 0x275 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10D PUSH2 0x11D CALLDATASIZE PUSH1 0x4 PUSH2 0xD90 JUMP JUMPDEST PUSH2 0x2B1 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC5 JUMP JUMPDEST PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10D PUSH2 0x425 JUMP JUMPDEST PUSH2 0x163 PUSH2 0x15E CALLDATASIZE PUSH1 0x4 PUSH2 0xDE9 JUMP JUMPDEST PUSH2 0x45B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13F JUMP JUMPDEST PUSH2 0x10D PUSH2 0x189 CALLDATASIZE PUSH1 0x4 PUSH2 0xE66 JUMP JUMPDEST PUSH2 0x485 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x19C CALLDATASIZE PUSH1 0x4 PUSH2 0xDC5 JUMP JUMPDEST PUSH2 0x68B JUMP JUMPDEST PUSH2 0x163 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0xDE9 JUMP JUMPDEST PUSH2 0x7AA JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x163 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0xECA JUMP JUMPDEST PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0xECA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0xC85 JUMP JUMPDEST PUSH2 0x7BA JUMP JUMPDEST PUSH2 0x10D PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0xF03 JUMP JUMPDEST PUSH2 0x847 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0xDC5 JUMP JUMPDEST PUSH2 0x962 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC5 JUMP JUMPDEST PUSH2 0xA18 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x2A8 SWAP1 DUP5 SWAP1 PUSH2 0xF4E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0xF66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x390 JUMPI DUP3 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x309 JUMPI PUSH2 0x309 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x441130D5 PUSH8 0xDE0B6B3A7640000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x346 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x363 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x387 SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2E9 JUMP JUMPDEST POP DUP2 MLOAD PUSH2 0x3A4 SWAP1 PUSH1 0x66 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x2ABC0E25EC4D3CB00CD094F0BCA86E790D0F6455CF9064345274FC97586B31C5 DUP4 PUSH1 0x40 MLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0xFCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3F6 DUP4 PUSH2 0x962 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x403 DUP5 PUSH2 0x68B JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT PUSH2 0x413 JUMPI PUSH1 0x0 PUSH2 0x41D JUMP JUMPDEST PUSH2 0x41D DUP2 DUP4 PUSH2 0x1017 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x44F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0xF66 JUMP JUMPDEST PUSH2 0x459 PUSH1 0x0 PUSH2 0xAC2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x491 PUSH1 0x1 PUSH2 0xB14 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x556 JUMPI DUP5 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x4CE JUMPI PUSH2 0x4CE PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x36B5BC37 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDAD6F0DC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x51F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x543 SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST POP DUP1 PUSH2 0x54E DUP2 PUSH2 0x102E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4AE JUMP JUMPDEST POP DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x60D JUMPI DUP5 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x57C JUMPI PUSH2 0x57C PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x441130D5 PUSH8 0xDE0B6B3A7640000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5B9 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5FA SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST POP DUP1 PUSH2 0x605 DUP2 PUSH2 0x102E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x55C JUMP JUMPDEST POP PUSH2 0x616 PUSH2 0xB9C JUMP JUMPDEST DUP5 MLOAD PUSH2 0x629 SWAP1 PUSH1 0x65 SWAP1 PUSH1 0x20 DUP9 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST POP DUP4 MLOAD PUSH2 0x63D SWAP1 PUSH1 0x66 SWAP1 PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST POP POP POP DUP1 ISZERO PUSH2 0x686 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x7A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x66 DUP1 SLOAD DUP4 SWAP2 SWAP1 PUSH1 0xFF DUP7 AND SWAP1 DUP2 LT PUSH2 0x6D2 JUMPI PUSH2 0x6D2 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 ADD SWAP1 KECCAK256 SLOAD SWAP1 POP DUP1 ISZERO PUSH2 0x798 JUMPI PUSH1 0x66 DUP3 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x715 JUMPI PUSH2 0x715 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x441130D5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x441130D5 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x767 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x78B SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0x795 SWAP1 DUP6 PUSH2 0xF4E JUMP JUMPDEST SWAP4 POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x695 JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x66 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x819 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x814 SWAP1 DUP3 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x67 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x871 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0xF66 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x914 JUMPI DUP3 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x896 JUMPI PUSH2 0x896 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x36B5BC37 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDAD6F0DC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x90B SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x876 JUMP JUMPDEST POP DUP2 MLOAD PUSH2 0x928 SWAP1 PUSH1 0x65 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xBF6 JUMP JUMPDEST POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE1C8F0C34D1EBB59573A7F5D542C350A1762869A702DD1ECEA79C1DC6B44D865 DUP4 PUSH1 0x40 MLOAD PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0xFCA JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 JUMPDEST DUP2 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x7A1 JUMPI PUSH1 0x65 DUP2 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x98D JUMPI PUSH2 0x98D PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x36B5BC37 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xDAD6F0DC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA04 SWAP2 SWAP1 PUSH2 0xFB1 JUMP JUMPDEST PUSH2 0xA0E SWAP1 DUP5 PUSH2 0xF4E JUMP JUMPDEST SWAP3 POP PUSH1 0x1 ADD PUSH2 0x96C JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA42 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0xF66 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xAA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2DB JUMP JUMPDEST PUSH2 0xAB0 DUP2 PUSH2 0xAC2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xB5B JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xB37 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0xB53 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0x104D JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0xB82 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0x104D JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xBC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH2 0x459 PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xBED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DB SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH2 0x459 CALLER PUSH2 0xAC2 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xC4B JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xC4B JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xC16 JUMP JUMPDEST POP PUSH2 0xC57 SWAP3 SWAP2 POP PUSH2 0xC5B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xC57 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xCA3 DUP2 PUSH2 0xC70 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xCF0 JUMPI PUSH2 0xCF0 PUSH2 0xCB1 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xD12 JUMPI PUSH2 0xD12 PUSH2 0xCB1 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xD42 PUSH2 0xD3D DUP4 PUSH2 0xCF8 JUMP JUMPDEST PUSH2 0xCC7 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0xD61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xD85 JUMPI DUP1 CALLDATALOAD PUSH2 0xD78 DUP2 PUSH2 0xC70 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xD65 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41D DUP5 DUP3 DUP6 ADD PUSH2 0xD1C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xDE2 DUP2 PUSH2 0xC70 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xE23 PUSH2 0xD3D DUP4 PUSH2 0xCF8 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0xE42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xD85 JUMPI DUP1 CALLDATALOAD PUSH2 0xE59 DUP2 PUSH2 0xC70 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xE46 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE9D DUP7 DUP4 DUP8 ADD PUSH2 0xE02 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xEB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC0 DUP6 DUP3 DUP7 ADD PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xEE8 DUP2 PUSH2 0xC70 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xEF8 DUP2 PUSH2 0xC70 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41D DUP5 DUP3 DUP6 ADD PUSH2 0xE02 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xF61 JUMPI PUSH2 0xF61 PUSH2 0xF38 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x100B JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xFE6 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1029 JUMPI PUSH2 0x1029 PUSH2 0xF38 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 SUB PUSH2 0x1044 JUMPI PUSH2 0x1044 PUSH2 0xF38 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 SWAP3 CREATE 0x2E 0xCD STATICCALL PUSH23 0xC83FA0C218CEC2ABA5C1D199D7DC603AF1E56D13848D21 0xEC ORIGIN PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "624:4927:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4697:174;;;;;;:::i;:::-;;:::i;:::-;;3475:499;;;;;;:::i;:::-;;:::i;3153:207::-;;;;;;:::i;:::-;;:::i;:::-;;;2669:25:7;;;2657:2;2642:18;3153:207:4;;;;;;;;1908:101:0;;;:::i;898:28:4:-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3071:32:7;;;3053:51;;3041:2;3026:18;898:28:4;2890:220:7;1251:599:4;;;;;;:::i;:::-;;:::i;2538:464::-;;;;;;:::i;:::-;;:::i;931:41::-;;;;;;:::i;:::-;;:::i;1276:85:0:-;1348:6;;-1:-1:-1;;;;;1348:6:0;1276:85;;977:70:4;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;5407:141;;;;;;:::i;:::-;-1:-1:-1;;;;;5512:22:4;;;5489:7;5512:22;;;:15;:22;;;;;;;;:30;;;;;;;;;;;;;5407:141;5049:236;;;;;;:::i;:::-;;:::i;4075:457::-;;;;;;:::i;:::-;;:::i;1988:362::-;;;;;;:::i;:::-;;:::i;2158:198:0:-;;;;;;:::i;:::-;;:::i;4697:174:4:-;-1:-1:-1;;;;;4815:22:4;;;;;;:15;:22;;;;;;;;4838:10;4815:34;;;;;;;:50;;4853:12;;4815:22;:50;;4853:12;;4815:50;:::i;:::-;;;;-1:-1:-1;;;;4697:174:4:o;3475:499::-;1348:6:0;;-1:-1:-1;;;;;1348:6:0;929:10:3;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;;;;;;;;;3628:24:4;;3595:30:::1;3659:189;3683:22;3678:2;:27;;;3659:189;;;3718:17;3736:2;3718:21;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1::0;;;;;3718:34:4::1;;3753:4;3718:40;;;;;;;;;;;;;2669:25:7::0;;2657:2;2642:18;;2523:177;3718:40:4::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;3827:4:4::1;;3659:189;;;-1:-1:-1::0;3871:33:4;;::::1;::::0;:13:::1;::::0;:33:::1;::::0;::::1;::::0;::::1;:::i;:::-;;3938:10;-1:-1:-1::0;;;;;3918:50:4::1;;3950:17;3918:50;;;;;;:::i;:::-;;;;;;;;3567:407;3475:499:::0;:::o;3153:207::-;3214:7;3230:14;3247:18;3259:5;3247:11;:18::i;:::-;3230:35;;3272:13;3288:17;3299:5;3288:10;:17::i;:::-;3272:33;;3328:5;3319:6;:14;:35;;3353:1;3319:35;;;3336:14;3345:5;3336:6;:14;:::i;:::-;3312:42;3153:207;-1:-1:-1;;;;3153:207:4:o;1908:101:0:-;1348:6;;-1:-1:-1;;;;;1348:6:0;929:10:3;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;1972:30:::1;1999:1;1972:18;:30::i;:::-;1908:101::o:0;898:28:4:-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;898:28:4;;-1:-1:-1;898:28:4;:::o;1251:599::-;3111:19:1;3133:25;3156:1;3133:22;:25::i;:::-;3111:47;;3172:14;3168:65;;;3202:13;:20;;-1:-1:-1;;3202:20:1;;;;;3168:65;1421:17:4;;1395:23:::1;1445:104;1469:15;1464:2;:20;;;1445:104;;;1501:10;1512:2;1501:14;;;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;;:40:::1;::::0;-1:-1:-1;;;1501:40:4;;1538:1:::1;1501:40;::::0;::::1;3053:51:7::0;-1:-1:-1;;;;;1501:28:4;;::::1;::::0;::::1;::::0;3026:18:7;;1501:40:4::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;1486:4:4;::::1;::::0;::::1;:::i;:::-;;;;1445:104;;;-1:-1:-1::0;1587:21:4;;1557:27:::1;1615:105;1639:19;1634:2;:24;;;1615:105;;;1675:14;1690:2;1675:18;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1::0;;;;;1675:31:4::1;;1707:4;1675:37;;;;;;;;;;;;;2669:25:7::0;;2657:2;2642:18;;2523:177;1675:37:4::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;1660:4:4;::::1;::::0;::::1;:::i;:::-;;;;1615:105;;;;1743:35;:33;:35::i;:::-;1785:22:::0;;::::1;::::0;:9:::1;::::0;:22:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;1814:30:4;;::::1;::::0;:13:::1;::::0;:30:::1;::::0;::::1;::::0;::::1;:::i;:::-;;1367:483;;3257:14:1::0;3253:99;;;3303:5;3287:21;;-1:-1:-1;;3287:21:1;;;3327:14;;-1:-1:-1;8084:36:7;;3327:14:1;;8072:2:7;8057:18;3327:14:1;;;;;;;3253:99;3101:257;1251:599:4;;:::o;2538:464::-;2661:13;:20;2594:7;;;;;2688:287;2712:19;2707:2;:24;;;2688:287;;;-1:-1:-1;;;;;2761:22:4;;2744:14;2761:22;;;:15;:22;;;;;2792:13;:17;;2744:14;;2792:13;:17;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;2792:17:4;2761:50;;;;;;;;;;;;;;-1:-1:-1;2824:11:4;;2820:65;;2847:13;2861:2;2847:17;;;;;;;;;;:::i;:::-;;;;;;;;;;;:38;;-1:-1:-1;;;2847:38:4;;;;;2669:25:7;;;-1:-1:-1;;;;;2847:17:4;;;;:30;;2642:18:7;;2847:38:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2837:48;;;;:::i;:::-;;;2820:65;-1:-1:-1;2954:4:4;;2688:287;;;-1:-1:-1;2990:6:4;;2538:464;-1:-1:-1;;;2538:464:4:o;931:41::-;;;;;;;;;;;;5049:236;-1:-1:-1;;;;;5159:22:4;;;;;;:15;:22;;;;;;;;5182:10;5159:34;;;;;;;;:50;-1:-1:-1;5159:50:4;:120;;-1:-1:-1;;;;;5230:22:4;;;;;;:15;:22;;;;;;;;5253:10;5230:34;;;;;;;;:49;;5267:12;;5230:49;:::i;:::-;5159:120;;;5219:1;5159:120;-1:-1:-1;;;;;5122:22:4;;;;;;;:15;:22;;;;;;;;5145:10;5122:34;;;;;;;:157;;;;-1:-1:-1;5049:236:4:o;4075:457::-;1348:6:0;;-1:-1:-1;;;;;1348:6:0;929:10:3;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;4207:20:4;;4178:26:::1;4234:188;4258:18;4253:2;:23;;;4234:188;;;4289:13;4303:2;4289:17;;;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;;:43:::1;::::0;-1:-1:-1;;;4289:43:4;;4329:1:::1;4289:43;::::0;::::1;3053:51:7::0;-1:-1:-1;;;;;4289:31:4;;::::1;::::0;::::1;::::0;3026:18:7;;4289:43:4::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;4401:4:4::1;;4234:188;;;-1:-1:-1::0;4445:25:4;;::::1;::::0;:9:::1;::::0;:25:::1;::::0;::::1;::::0;::::1;:::i;:::-;;4500:10;-1:-1:-1::0;;;;;4484:42:4::1;;4512:13;4484:42;;;;;;:::i;1988:362::-:0;2108:9;:16;2045:7;;;;;2131:194;2155:15;2150:2;:20;;;2131:194;;;2201:9;2211:2;2201:13;;;;;;;;;;:::i;:::-;;;;;;;;;;;:34;;-1:-1:-1;;;2201:34:4;;-1:-1:-1;;;;;3071:32:7;;;2201:34:4;;;3053:51:7;2201:13:4;;;;:27;;3026:18:7;;2201:34:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2192:43;;:6;:43;:::i;:::-;2183:52;-1:-1:-1;2304:4:4;;2131:194;;2158:198:0;1348:6;;-1:-1:-1;;;;;1348:6:0;929:10:3;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2246:22:0;::::1;2238:73;;;::::0;-1:-1:-1;;;2238:73:0;;9013:2:7;2238:73:0::1;::::0;::::1;8995:21:7::0;9052:2;9032:18;;;9025:30;9091:34;9071:18;;;9064:62;-1:-1:-1;;;9142:18:7;;;9135:36;9188:19;;2238:73:0::1;8811:402:7::0;2238:73:0::1;2321:28;2340:8;2321:18;:28::i;:::-;2158:198:::0;:::o;1186:320:2:-;-1:-1:-1;;;;;1476:19:2;;:23;;;1186:320::o;2510:187:0:-;2602:6;;;-1:-1:-1;;;;;2618:17:0;;;-1:-1:-1;;;;;;2618:17:0;;;;;;;2650:40;;2602:6;;;2618:17;2602:6;;2650:40;;2583:16;;2650:40;2573:124;2510:187;:::o;5287:808:1:-;5351:4;5684:13;;;;;;;5680:409;;;5738:7;:12;;5749:1;5738:12;:61;;;;-1:-1:-1;5793:4:1;1476:19:2;:23;5738:61:1;5713:166;;;;-1:-1:-1;;;5713:166:1;;;;;;;:::i;:::-;-1:-1:-1;5900:5:1;;5287:808;-1:-1:-1;5287:808:1:o;5680:409::-;5944:12;;:22;;;;:12;;:22;5936:81;;;;-1:-1:-1;;;5936:81:1;;;;;;;:::i;:::-;-1:-1:-1;6031:12:1;:22;;-1:-1:-1;;6031:22:1;;;;;;;;;;;;-1:-1:-1;;5287:808:1:o;988:95:0:-;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1050:26:0::1;4698:13:1::0;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1161:32:0::1;929:10:3::0;1161:18:0::1;:32::i;-1:-1:-1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:7;-1:-1:-1;;;;;89:31:7;;79:42;;69:70;;135:1;132;125:12;150:315;218:6;226;279:2;267:9;258:7;254:23;250:32;247:52;;;295:1;292;285:12;247:52;334:9;321:23;353:31;378:5;353:31;:::i;:::-;403:5;455:2;440:18;;;;427:32;;-1:-1:-1;;;150:315:7:o;470:127::-;531:10;526:3;522:20;519:1;512:31;562:4;559:1;552:15;586:4;583:1;576:15;602:275;673:2;667:9;738:2;719:13;;-1:-1:-1;;715:27:7;703:40;;773:18;758:34;;794:22;;;755:62;752:88;;;820:18;;:::i;:::-;856:2;849:22;602:275;;-1:-1:-1;602:275:7:o;882:203::-;962:4;995:18;987:6;984:30;981:56;;;1017:18;;:::i;:::-;-1:-1:-1;1062:1:7;1058:14;1074:4;1054:25;;882:203::o;1090:777::-;1164:5;1217:3;1210:4;1202:6;1198:17;1194:27;1184:55;;1235:1;1232;1225:12;1184:55;1271:6;1258:20;1297:4;1321:80;1337:63;1397:2;1337:63;:::i;:::-;1321:80;:::i;:::-;1435:15;;;1521:1;1517:10;;;;1505:23;;1501:32;;;1466:12;;;;1545:15;;;1542:35;;;1573:1;1570;1563:12;1542:35;1609:2;1601:6;1597:15;1621:217;1637:6;1632:3;1629:15;1621:217;;;1717:3;1704:17;1734:31;1759:5;1734:31;:::i;:::-;1778:18;;1816:12;;;;1654;;1621:217;;;-1:-1:-1;1856:5:7;1090:777;-1:-1:-1;;;;;;1090:777:7:o;1872:394::-;1982:6;2035:2;2023:9;2014:7;2010:23;2006:32;2003:52;;;2051:1;2048;2041:12;2003:52;2091:9;2078:23;2124:18;2116:6;2113:30;2110:50;;;2156:1;2153;2146:12;2110:50;2179:81;2252:7;2243:6;2232:9;2228:22;2179:81;:::i;2271:247::-;2330:6;2383:2;2371:9;2362:7;2358:23;2354:32;2351:52;;;2399:1;2396;2389:12;2351:52;2438:9;2425:23;2457:31;2482:5;2457:31;:::i;:::-;2507:5;2271:247;-1:-1:-1;;;2271:247:7:o;2705:180::-;2764:6;2817:2;2805:9;2796:7;2792:23;2788:32;2785:52;;;2833:1;2830;2823:12;2785:52;-1:-1:-1;2856:23:7;;2705:180;-1:-1:-1;2705:180:7:o;3115:768::-;3180:5;3233:3;3226:4;3218:6;3214:17;3210:27;3200:55;;3251:1;3248;3241:12;3200:55;3287:6;3274:20;3313:4;3337:80;3353:63;3413:2;3353:63;:::i;3337:80::-;3451:15;;;3537:1;3533:10;;;;3521:23;;3517:32;;;3482:12;;;;3561:15;;;3558:35;;;3589:1;3586;3579:12;3558:35;3625:2;3617:6;3613:15;3637:217;3653:6;3648:3;3645:15;3637:217;;;3733:3;3720:17;3750:31;3775:5;3750:31;:::i;:::-;3794:18;;3832:12;;;;3670;;3637:217;;3888:669;4049:6;4057;4110:2;4098:9;4089:7;4085:23;4081:32;4078:52;;;4126:1;4123;4116:12;4078:52;4166:9;4153:23;4195:18;4236:2;4228:6;4225:14;4222:34;;;4252:1;4249;4242:12;4222:34;4275:72;4339:7;4330:6;4319:9;4315:22;4275:72;:::i;:::-;4265:82;;4400:2;4389:9;4385:18;4372:32;4356:48;;4429:2;4419:8;4416:16;4413:36;;;4445:1;4442;4435:12;4413:36;;4468:83;4543:7;4532:8;4521:9;4517:24;4468:83;:::i;:::-;4458:93;;;3888:669;;;;;:::o;5004:388::-;5072:6;5080;5133:2;5121:9;5112:7;5108:23;5104:32;5101:52;;;5149:1;5146;5139:12;5101:52;5188:9;5175:23;5207:31;5232:5;5207:31;:::i;:::-;5257:5;-1:-1:-1;5314:2:7;5299:18;;5286:32;5327:33;5286:32;5327:33;:::i;:::-;5379:7;5369:17;;;5004:388;;;;;:::o;5397:376::-;5498:6;5551:2;5539:9;5530:7;5526:23;5522:32;5519:52;;;5567:1;5564;5557:12;5519:52;5607:9;5594:23;5640:18;5632:6;5629:30;5626:50;;;5672:1;5669;5662:12;5626:50;5695:72;5759:7;5750:6;5739:9;5735:22;5695:72;:::i;5778:127::-;5839:10;5834:3;5830:20;5827:1;5820:31;5870:4;5867:1;5860:15;5894:4;5891:1;5884:15;5910:128;5950:3;5981:1;5977:6;5974:1;5971:13;5968:39;;;5987:18;;:::i;:::-;-1:-1:-1;6023:9:7;;5910:128::o;6043:356::-;6245:2;6227:21;;;6264:18;;;6257:30;6323:34;6318:2;6303:18;;6296:62;6390:2;6375:18;;6043:356::o;6404:127::-;6465:10;6460:3;6456:20;6453:1;6446:31;6496:4;6493:1;6486:15;6520:4;6517:1;6510:15;6744:184;6814:6;6867:2;6855:9;6846:7;6842:23;6838:32;6835:52;;;6883:1;6880;6873:12;6835:52;-1:-1:-1;6906:16:7;;6744:184;-1:-1:-1;6744:184:7:o;6933:684::-;7130:2;7182:21;;;7252:13;;7155:18;;;7274:22;;;7101:4;;7130:2;7353:15;;;;7327:2;7312:18;;;7101:4;7396:195;7410:6;7407:1;7404:13;7396:195;;;7475:13;;-1:-1:-1;;;;;7471:39:7;7459:52;;7566:15;;;;7531:12;;;;7507:1;7425:9;7396:195;;;-1:-1:-1;7608:3:7;;6933:684;-1:-1:-1;;;;;;6933:684:7:o;7622:125::-;7662:4;7690:1;7687;7684:8;7681:34;;;7695:18;;:::i;:::-;-1:-1:-1;7732:9:7;;7622:125::o;7752:175::-;7789:3;7833:4;7826:5;7822:16;7862:4;7853:7;7850:17;7847:43;;7870:18;;:::i;:::-;7919:1;7906:15;;7752:175;-1:-1:-1;;7752:175:7:o;9218:410::-;9420:2;9402:21;;;9459:2;9439:18;;;9432:30;9498:34;9493:2;9478:18;;9471:62;-1:-1:-1;;;9564:2:7;9549:18;;9542:44;9618:3;9603:19;;9218:410::o;9633:407::-;9835:2;9817:21;;;9874:2;9854:18;;;9847:30;9913:34;9908:2;9893:18;;9886:62;-1:-1:-1;;;9979:2:7;9964:18;;9957:41;10030:3;10015:19;;9633:407::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "876000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"availableCredit(address)": "infinite",
								"creditors(uint256)": "4659",
								"getUserVaultShares(address,address)": "infinite",
								"initialize(address[],address[])": "infinite",
								"onDeposit(address,uint256)": "24801",
								"onWithdraw(address,uint256)": "27240",
								"owner()": "2376",
								"privateVaults(uint256)": "4637",
								"renounceOwnership()": "28140",
								"setCreditors(address[])": "infinite",
								"setPrivateVaults(address[])": "infinite",
								"totalCredit(address)": "infinite",
								"transferOwnership(address)": "infinite",
								"usedCredit(address)": "infinite",
								"userVaultShares(address,address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 624,
									"end": 5551,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1054,
									"end": 1082,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 1054,
									"end": 1082,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1054,
									"end": 1082,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 1054,
									"end": 1082,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 1054,
									"end": 1082,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 1054,
									"end": 1082,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1054,
									"end": 1082,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1054,
									"end": 1082,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 1054,
									"end": 1082,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 1054,
									"end": 1082,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3111,
									"end": 3130,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3133,
									"end": 3158,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 3156,
									"end": 3157,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 3133,
									"end": 3155,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "5"
								},
								{
									"begin": 3133,
									"end": 3158,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 3133,
									"end": 3158,
									"name": "tag",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 3133,
									"end": 3158,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3111,
									"end": 3158,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3111,
									"end": 3158,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3172,
									"end": 3186,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3168,
									"end": 3233,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 3168,
									"end": 3233,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 3168,
									"end": 3233,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 3202,
									"end": 3215,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3202,
									"end": 3222,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3202,
									"end": 3222,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF00"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3202,
									"end": 3222,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3202,
									"end": 3222,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 3202,
									"end": 3222,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 3202,
									"end": 3222,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3202,
									"end": 3222,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 3168,
									"end": 3233,
									"name": "tag",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 3168,
									"end": 3233,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3257,
									"end": 3271,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3253,
									"end": 3352,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 3253,
									"end": 3352,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 3253,
									"end": 3352,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 3303,
									"end": 3308,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3287,
									"end": 3308,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3287,
									"end": 3308,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF00"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3287,
									"end": 3308,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3287,
									"end": 3308,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3287,
									"end": 3308,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": 166,
									"end": 202,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 166,
									"end": 202,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "PUSH",
									"source": 1,
									"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 154,
									"end": 156,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 139,
									"end": 157,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3327,
									"end": 3341,
									"name": "LOG1",
									"source": 1
								},
								{
									"begin": 3253,
									"end": 3352,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 3253,
									"end": 3352,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3101,
									"end": 3358,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 5287,
									"end": 6095,
									"name": "tag",
									"source": 1,
									"value": "5"
								},
								{
									"begin": 5287,
									"end": 6095,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5351,
									"end": 5355,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 5684,
									"end": 5697,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 5684,
									"end": 5697,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 5684,
									"end": 5697,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 5684,
									"end": 5697,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 5684,
									"end": 5697,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 5684,
									"end": 5697,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 5684,
									"end": 5697,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 5680,
									"end": 6089,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 5680,
									"end": 6089,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 5680,
									"end": 6089,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 5738,
									"end": 5745,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 5738,
									"end": 5750,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 5738,
									"end": 5750,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 5749,
									"end": 5750,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 5738,
									"end": 5750,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 5738,
									"end": 5799,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 5738,
									"end": 5799,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 5738,
									"end": 5799,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 5738,
									"end": 5799,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 5738,
									"end": 5799,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5755,
									"end": 5799,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "15"
								},
								{
									"begin": 5793,
									"end": 5797,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 5755,
									"end": 5784,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 5755,
									"end": 5784,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 5755,
									"end": 5784,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 5755,
									"end": 5784,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "18446744073709551699"
								},
								{
									"begin": 5755,
									"end": 5784,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 5755,
									"end": 5799,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 5755,
									"end": 5799,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 5755,
									"end": 5799,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 5755,
									"end": 5799,
									"name": "tag",
									"source": 1,
									"value": "15"
								},
								{
									"begin": 5755,
									"end": 5799,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5754,
									"end": 5799,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 5738,
									"end": 5799,
									"name": "tag",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 5738,
									"end": 5799,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "17"
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 415,
									"end": 417,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 397,
									"end": 418,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 454,
									"end": 456,
									"name": "PUSH",
									"source": 7,
									"value": "2E"
								},
								{
									"begin": 434,
									"end": 452,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 434,
									"end": 452,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 434,
									"end": 452,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 427,
									"end": 457,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "1E93930C6875183D88CD66E10DF1F1E695D60226FF9068840C89B95F525592B2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP4",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP2",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP2",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 473,
									"end": 491,
									"name": "PUSH",
									"source": 7,
									"value": "44"
								},
								{
									"begin": 473,
									"end": 491,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 473,
									"end": 491,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 466,
									"end": 528,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "191E481A5B9A5D1A585B1A5E9959"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "92"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 544,
									"end": 562,
									"name": "PUSH",
									"source": 7,
									"value": "64"
								},
								{
									"begin": 544,
									"end": 562,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 544,
									"end": 562,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 537,
									"end": 581,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 598,
									"end": 617,
									"name": "PUSH",
									"source": 7,
									"value": "84"
								},
								{
									"begin": 598,
									"end": 617,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "tag",
									"source": 1,
									"value": "18"
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "tag",
									"source": 1,
									"value": "17"
								},
								{
									"begin": 5713,
									"end": 5879,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 5900,
									"end": 5905,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 5900,
									"end": 5905,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 5287,
									"end": 6095,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 5287,
									"end": 6095,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 5680,
									"end": 6089,
									"name": "tag",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 5680,
									"end": 6089,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5944,
									"end": 5956,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 5944,
									"end": 5956,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 5944,
									"end": 5966,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 5944,
									"end": 5966,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 5944,
									"end": 5966,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 5944,
									"end": 5966,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 5944,
									"end": 5956,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 5944,
									"end": 5956,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 5944,
									"end": 5966,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "21"
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 415,
									"end": 417,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 397,
									"end": 418,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 454,
									"end": 456,
									"name": "PUSH",
									"source": 7,
									"value": "2E"
								},
								{
									"begin": 434,
									"end": 452,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 434,
									"end": 452,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 434,
									"end": 452,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 427,
									"end": 457,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP1",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH data",
									"source": -1,
									"value": "1E93930C6875183D88CD66E10DF1F1E695D60226FF9068840C89B95F525592B2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP4",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "CODECOPY",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "DUP2",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MLOAD",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP2",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "MSTORE",
									"source": -1
								},
								{
									"begin": 473,
									"end": 491,
									"name": "PUSH",
									"source": 7,
									"value": "44"
								},
								{
									"begin": 473,
									"end": 491,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 473,
									"end": 491,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 466,
									"end": 528,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "191E481A5B9A5D1A585B1A5E9959"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "92"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 544,
									"end": 562,
									"name": "PUSH",
									"source": 7,
									"value": "64"
								},
								{
									"begin": 544,
									"end": 562,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 544,
									"end": 562,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 537,
									"end": 581,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 598,
									"end": 617,
									"name": "PUSH",
									"source": 7,
									"value": "84"
								},
								{
									"begin": 598,
									"end": 617,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "18"
								},
								{
									"begin": 213,
									"end": 623,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "tag",
									"source": 1,
									"value": "21"
								},
								{
									"begin": 5936,
									"end": 6017,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6031,
									"end": 6043,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6031,
									"end": 6053,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP1",
									"source": -1
								},
								{
									"begin": 5287,
									"end": 6095,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 1186,
									"end": 1506,
									"name": "tag",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1186,
									"end": 1506,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1476,
									"end": 1495,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1476,
									"end": 1495,
									"name": "EXTCODESIZE",
									"source": 2
								},
								{
									"begin": 1476,
									"end": 1499,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1476,
									"end": 1499,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1476,
									"end": 1499,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1186,
									"end": 1506,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 213,
									"end": 623,
									"name": "tag",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 213,
									"end": 623,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 624,
									"end": 5551,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a292f02ecdfa76c83fa0c218cec2aba5c1d199d7dc603af1e56d13848d21ec3264736f6c634300080d0033",
									".code": [
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "tag",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "87F049E4"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "CCAD973D"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "CCAD973D"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "E7D325A1"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "F220D16C"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "F2FDE38B"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "tag",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "87F049E4"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "8DA5CB5B"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "9F7B7EAD"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "C5C66D4D"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "tag",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "715018A6"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "715018A6"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "71BC16B5"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "73CF25F8"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "7BF962DE"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "2BF9518C"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "4FE01823"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "5886216F"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 624,
											"end": 5551,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "tag",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "tag",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "tag",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "tag",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "tag",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2669,
											"end": 2694,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2669,
											"end": 2694,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2669,
											"end": 2694,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2657,
											"end": 2659,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2642,
											"end": 2660,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "tag",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "tag",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "tag",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3071,
											"end": 3103,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3071,
											"end": 3103,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3071,
											"end": 3103,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3053,
											"end": 3104,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3053,
											"end": 3104,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3041,
											"end": 3043,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3026,
											"end": 3044,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 2890,
											"end": 3110,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "tag",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "tag",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "tag",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "tag",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "tag",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "53"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "tag",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "PUSH",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 977,
											"end": 1047,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "tag",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "tag",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5489,
											"end": 5496,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5527,
											"name": "PUSH",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5534,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5512,
											"end": 5542,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5407,
											"end": 5548,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "tag",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "tag",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "tag",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "75"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "tag",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "tag",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4830,
											"name": "PUSH",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4838,
											"end": 4848,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4849,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4849,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4849,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4849,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4849,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4849,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4849,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 4853,
											"end": 4865,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4853,
											"end": 4865,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4837,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "85"
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4853,
											"end": 4865,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4853,
											"end": 4865,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "tag",
											"source": 4,
											"value": "85"
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4815,
											"end": 4865,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4697,
											"end": 4871,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "tag",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3652,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3628,
											"end": 3652,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3595,
											"end": 3625,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3659,
											"end": 3848,
											"name": "tag",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 3659,
											"end": 3848,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3683,
											"end": 3705,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3680,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3705,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 3678,
											"end": 3705,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3705,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 3659,
											"end": 3848,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3659,
											"end": 3848,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 3659,
											"end": 3848,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3735,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3736,
											"end": 3738,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "tag",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3739,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3718,
											"end": 3752,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3752,
											"name": "PUSH",
											"source": 4,
											"value": "441130D5"
										},
										{
											"begin": 3753,
											"end": 3757,
											"name": "PUSH",
											"source": 4,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "101"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2669,
											"end": 2694,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2669,
											"end": 2694,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2657,
											"end": 2659,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2642,
											"end": 2660,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2642,
											"end": 2660,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2523,
											"end": 2700,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "tag",
											"source": 4,
											"value": "101"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "104"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "tag",
											"source": 4,
											"value": "104"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "tag",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 3718,
											"end": 3758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3827,
											"end": 3831,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3827,
											"end": 3831,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3659,
											"end": 3848,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 3659,
											"end": 3848,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3659,
											"end": 3848,
											"name": "tag",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 3659,
											"end": 3848,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3884,
											"name": "PUSH",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 3871,
											"end": 3884,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "108"
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "tag",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3871,
											"end": 3904,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3938,
											"end": 3948,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "PUSH",
											"source": 4,
											"value": "2ABC0E25EC4D3CB00CD094F0BCA86E790D0F6455CF9064345274FC97586B31C5"
										},
										{
											"begin": 3950,
											"end": 3967,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "tag",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3918,
											"end": 3968,
											"name": "LOG2",
											"source": 4
										},
										{
											"begin": 3567,
											"end": 3974,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3475,
											"end": 3974,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "tag",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3214,
											"end": 3221,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3230,
											"end": 3244,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3247,
											"end": 3265,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 3259,
											"end": 3264,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3247,
											"end": 3258,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 3247,
											"end": 3265,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3247,
											"end": 3265,
											"name": "tag",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 3247,
											"end": 3265,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3230,
											"end": 3265,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3230,
											"end": 3265,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3272,
											"end": 3285,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3288,
											"end": 3305,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 3299,
											"end": 3304,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 3288,
											"end": 3298,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 3288,
											"end": 3305,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3288,
											"end": 3305,
											"name": "tag",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 3288,
											"end": 3305,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3272,
											"end": 3305,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3272,
											"end": 3305,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3328,
											"end": 3333,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3319,
											"end": 3325,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3319,
											"end": 3333,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 3319,
											"end": 3354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 3319,
											"end": 3354,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3353,
											"end": 3354,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3319,
											"end": 3354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 3319,
											"end": 3354,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3319,
											"end": 3354,
											"name": "tag",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 3319,
											"end": 3354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3350,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 3345,
											"end": 3350,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3342,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3350,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 3336,
											"end": 3350,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3336,
											"end": 3350,
											"name": "tag",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 3336,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3312,
											"end": 3354,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3153,
											"end": 3360,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1999,
											"end": 2000,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1972,
											"end": 1990,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "tag",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "tag",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 898,
											"end": 926,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 898,
											"end": 926,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 898,
											"end": 926,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 898,
											"end": 926,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "tag",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3111,
											"end": 3130,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 3156,
											"end": 3157,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3133,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "tag",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3111,
											"end": 3158,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3111,
											"end": 3158,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3172,
											"end": 3186,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "131"
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3215,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "tag",
											"source": 1,
											"value": "131"
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1421,
											"end": 1438,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1421,
											"end": 1438,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1395,
											"end": 1418,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1445,
											"end": 1549,
											"name": "tag",
											"source": 4,
											"value": "133"
										},
										{
											"begin": 1445,
											"end": 1549,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1469,
											"end": 1484,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1464,
											"end": 1466,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1464,
											"end": 1484,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 1464,
											"end": 1484,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1464,
											"end": 1484,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1445,
											"end": 1549,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1445,
											"end": 1549,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 1445,
											"end": 1549,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1511,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1512,
											"end": 1514,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "tag",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1515,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "36B5BC37"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1538,
											"end": 1539,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3053,
											"end": 3104,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1501,
											"end": 1529,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1529,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1529,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1529,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1529,
											"name": "PUSH",
											"source": 4,
											"value": "DAD6F0DC"
										},
										{
											"begin": 1501,
											"end": 1529,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3026,
											"end": 3044,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3026,
											"end": 3044,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "tag",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "tag",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 1501,
											"end": 1541,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "tag",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1445,
											"end": 1549,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "133"
										},
										{
											"begin": 1445,
											"end": 1549,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1445,
											"end": 1549,
											"name": "tag",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 1445,
											"end": 1549,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1587,
											"end": 1608,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1587,
											"end": 1608,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1557,
											"end": 1584,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1615,
											"end": 1720,
											"name": "tag",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 1615,
											"end": 1720,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1639,
											"end": 1658,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1634,
											"end": 1636,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1634,
											"end": 1658,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 1634,
											"end": 1658,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1634,
											"end": 1658,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1615,
											"end": 1720,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1615,
											"end": 1720,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "145"
										},
										{
											"begin": 1615,
											"end": 1720,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1689,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1690,
											"end": 1692,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "tag",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1693,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1675,
											"end": 1706,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1706,
											"name": "PUSH",
											"source": 4,
											"value": "441130D5"
										},
										{
											"begin": 1707,
											"end": 1711,
											"name": "PUSH",
											"source": 4,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "149"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2669,
											"end": 2694,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2669,
											"end": 2694,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2657,
											"end": 2659,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2642,
											"end": 2660,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2642,
											"end": 2660,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2523,
											"end": 2700,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "tag",
											"source": 4,
											"value": "149"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "151"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "tag",
											"source": 4,
											"value": "151"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "152"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "tag",
											"source": 4,
											"value": "152"
										},
										{
											"begin": 1675,
											"end": 1712,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1660,
											"end": 1664,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1660,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 1660,
											"end": 1664,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1660,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 1660,
											"end": 1664,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1660,
											"end": 1664,
											"name": "tag",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 1660,
											"end": 1664,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1660,
											"end": 1664,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1660,
											"end": 1664,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1660,
											"end": 1664,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1615,
											"end": 1720,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 1615,
											"end": 1720,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1615,
											"end": 1720,
											"name": "tag",
											"source": 4,
											"value": "145"
										},
										{
											"begin": 1615,
											"end": 1720,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1615,
											"end": 1720,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1743,
											"end": 1778,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "154"
										},
										{
											"begin": 1743,
											"end": 1776,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "155"
										},
										{
											"begin": 1743,
											"end": 1778,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1743,
											"end": 1778,
											"name": "tag",
											"source": 4,
											"value": "154"
										},
										{
											"begin": 1743,
											"end": 1778,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1785,
											"end": 1794,
											"name": "PUSH",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 1785,
											"end": 1794,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "108"
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "tag",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 1785,
											"end": 1807,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "158"
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1814,
											"end": 1827,
											"name": "PUSH",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 1814,
											"end": 1827,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "108"
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "tag",
											"source": 4,
											"value": "158"
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1814,
											"end": 1844,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1367,
											"end": 1850,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1367,
											"end": 1850,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3257,
											"end": 3271,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "159"
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3303,
											"end": 3308,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 8084,
											"end": 8120,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8084,
											"end": 8120,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8072,
											"end": 8074,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8057,
											"end": 8075,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "tag",
											"source": 1,
											"value": "159"
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3101,
											"end": 3358,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1251,
											"end": 1850,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "tag",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2661,
											"end": 2674,
											"name": "PUSH",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 2661,
											"end": 2681,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2594,
											"end": 2601,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2594,
											"end": 2601,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2594,
											"end": 2601,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2594,
											"end": 2601,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2594,
											"end": 2601,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2688,
											"end": 2975,
											"name": "tag",
											"source": 4,
											"value": "163"
										},
										{
											"begin": 2688,
											"end": 2975,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2712,
											"end": 2731,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2709,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2731,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 2707,
											"end": 2731,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2707,
											"end": 2731,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 2688,
											"end": 2975,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2688,
											"end": 2975,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 2688,
											"end": 2975,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2761,
											"end": 2783,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2783,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2744,
											"end": 2758,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2761,
											"end": 2783,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2783,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2783,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2776,
											"name": "PUSH",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 2761,
											"end": 2783,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2761,
											"end": 2783,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2783,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2761,
											"end": 2783,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2783,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2805,
											"name": "PUSH",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2744,
											"end": 2758,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2744,
											"end": 2758,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2805,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "tag",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2792,
											"end": 2809,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2761,
											"end": 2811,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2824,
											"end": 2835,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2824,
											"end": 2835,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2820,
											"end": 2885,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "169"
										},
										{
											"begin": 2820,
											"end": 2885,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2860,
											"name": "PUSH",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 2861,
											"end": 2863,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "171"
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "171"
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "tag",
											"source": 4,
											"value": "171"
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "441130D5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2669,
											"end": 2694,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2669,
											"end": 2694,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2669,
											"end": 2694,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2864,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2877,
											"name": "PUSH",
											"source": 4,
											"value": "441130D5"
										},
										{
											"begin": 2847,
											"end": 2877,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2642,
											"end": 2660,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2642,
											"end": 2660,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "175"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "tag",
											"source": 4,
											"value": "175"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "176"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "tag",
											"source": 4,
											"value": "176"
										},
										{
											"begin": 2847,
											"end": 2885,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2837,
											"end": 2885,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "177"
										},
										{
											"begin": 2837,
											"end": 2885,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2837,
											"end": 2885,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 2837,
											"end": 2885,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 2837,
											"end": 2885,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2837,
											"end": 2885,
											"name": "tag",
											"source": 4,
											"value": "177"
										},
										{
											"begin": 2837,
											"end": 2885,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2837,
											"end": 2885,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 2837,
											"end": 2885,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2820,
											"end": 2885,
											"name": "tag",
											"source": 4,
											"value": "169"
										},
										{
											"begin": 2820,
											"end": 2885,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2954,
											"end": 2958,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 2954,
											"end": 2958,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2688,
											"end": 2975,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "163"
										},
										{
											"begin": 2688,
											"end": 2975,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2688,
											"end": 2975,
											"name": "tag",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 2688,
											"end": 2975,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2990,
											"end": 2996,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2990,
											"end": 2996,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2538,
											"end": 3002,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "tag",
											"source": 4,
											"value": "53"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "PUSH",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 931,
											"end": 972,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 931,
											"end": 972,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "tag",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5174,
											"name": "PUSH",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5181,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5182,
											"end": 5192,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5193,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5193,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5193,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5193,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5193,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5193,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5193,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5193,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5209,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 5159,
											"end": 5209,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5279,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "183"
										},
										{
											"begin": 5159,
											"end": 5279,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5245,
											"name": "PUSH",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5252,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5253,
											"end": 5263,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5264,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5264,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5264,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5264,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5264,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5264,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5264,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5264,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5279,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "184"
										},
										{
											"begin": 5230,
											"end": 5279,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5267,
											"end": 5279,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5267,
											"end": 5279,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5230,
											"end": 5279,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 5230,
											"end": 5279,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5230,
											"end": 5279,
											"name": "tag",
											"source": 4,
											"value": "184"
										},
										{
											"begin": 5230,
											"end": 5279,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5279,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 5159,
											"end": 5279,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5159,
											"end": 5279,
											"name": "tag",
											"source": 4,
											"value": "183"
										},
										{
											"begin": 5159,
											"end": 5279,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5219,
											"end": 5220,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5159,
											"end": 5279,
											"name": "tag",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 5159,
											"end": 5279,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5137,
											"name": "PUSH",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5155,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5156,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5156,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5156,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5156,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5156,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5156,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5156,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5279,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5279,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5279,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5122,
											"end": 5279,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5049,
											"end": 5285,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "tag",
											"source": 4,
											"value": "75"
										},
										{
											"begin": 4075,
											"end": 4532,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4207,
											"end": 4227,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4207,
											"end": 4227,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4178,
											"end": 4204,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4234,
											"end": 4422,
											"name": "tag",
											"source": 4,
											"value": "192"
										},
										{
											"begin": 4234,
											"end": 4422,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4258,
											"end": 4276,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4253,
											"end": 4255,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4253,
											"end": 4276,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 4253,
											"end": 4276,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4253,
											"end": 4276,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 4234,
											"end": 4422,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4234,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "193"
										},
										{
											"begin": 4234,
											"end": 4422,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4302,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4303,
											"end": 4305,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "196"
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "196"
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "tag",
											"source": 4,
											"value": "196"
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4306,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "36B5BC37"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4329,
											"end": 4330,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3053,
											"end": 3104,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4289,
											"end": 4320,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4320,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4320,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4320,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4320,
											"name": "PUSH",
											"source": 4,
											"value": "DAD6F0DC"
										},
										{
											"begin": 4289,
											"end": 4320,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3026,
											"end": 3044,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3026,
											"end": 3044,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "199"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "tag",
											"source": 4,
											"value": "199"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "200"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "tag",
											"source": 4,
											"value": "200"
										},
										{
											"begin": 4289,
											"end": 4332,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4401,
											"end": 4405,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 4401,
											"end": 4405,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4234,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "192"
										},
										{
											"begin": 4234,
											"end": 4422,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4234,
											"end": 4422,
											"name": "tag",
											"source": 4,
											"value": "193"
										},
										{
											"begin": 4234,
											"end": 4422,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4445,
											"end": 4454,
											"name": "PUSH",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 4445,
											"end": 4454,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "108"
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "tag",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4445,
											"end": 4470,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4500,
											"end": 4510,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4484,
											"end": 4526,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4484,
											"end": 4526,
											"name": "PUSH",
											"source": 4,
											"value": "E1C8F0C34D1EBB59573A7F5D542C350A1762869A702DD1ECEA79C1DC6B44D865"
										},
										{
											"begin": 4512,
											"end": 4525,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4484,
											"end": 4526,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4484,
											"end": 4526,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4484,
											"end": 4526,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 4484,
											"end": 4526,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4484,
											"end": 4526,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4484,
											"end": 4526,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 4484,
											"end": 4526,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "tag",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 1988,
											"end": 2350,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2108,
											"end": 2117,
											"name": "PUSH",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 2108,
											"end": 2124,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2045,
											"end": 2052,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2045,
											"end": 2052,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2045,
											"end": 2052,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2045,
											"end": 2052,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2045,
											"end": 2052,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2131,
											"end": 2325,
											"name": "tag",
											"source": 4,
											"value": "205"
										},
										{
											"begin": 2131,
											"end": 2325,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2155,
											"end": 2170,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2150,
											"end": 2152,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2150,
											"end": 2170,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 2150,
											"end": 2170,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2150,
											"end": 2170,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 2131,
											"end": 2325,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2131,
											"end": 2325,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 2131,
											"end": 2325,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2210,
											"name": "PUSH",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 2211,
											"end": 2213,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "209"
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "209"
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "tag",
											"source": 4,
											"value": "209"
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "36B5BC37"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3071,
											"end": 3103,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 3071,
											"end": 3103,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3071,
											"end": 3103,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3053,
											"end": 3104,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2214,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2228,
											"name": "PUSH",
											"source": 4,
											"value": "DAD6F0DC"
										},
										{
											"begin": 2201,
											"end": 2228,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3026,
											"end": 3044,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3026,
											"end": 3044,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "213"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "tag",
											"source": 4,
											"value": "213"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "214"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "tag",
											"source": 4,
											"value": "214"
										},
										{
											"begin": 2201,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2192,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "215"
										},
										{
											"begin": 2192,
											"end": 2235,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2192,
											"end": 2198,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2192,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 2192,
											"end": 2235,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2192,
											"end": 2235,
											"name": "tag",
											"source": 4,
											"value": "215"
										},
										{
											"begin": 2192,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2183,
											"end": 2235,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2304,
											"end": 2308,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 2304,
											"end": 2308,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2131,
											"end": 2325,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "205"
										},
										{
											"begin": 2131,
											"end": 2325,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2246,
											"end": 2268,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2246,
											"end": 2268,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9013,
											"end": 9015,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8995,
											"end": 9016,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9052,
											"end": 9054,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 9032,
											"end": 9050,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 9032,
											"end": 9050,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9032,
											"end": 9050,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9025,
											"end": 9055,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9091,
											"end": 9125,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 9071,
											"end": 9089,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 9071,
											"end": 9089,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9071,
											"end": 9089,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9064,
											"end": 9126,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9142,
											"end": 9160,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 9142,
											"end": 9160,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9142,
											"end": 9160,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9135,
											"end": 9171,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9188,
											"end": 9207,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 9188,
											"end": 9207,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 8811,
											"end": 9213,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "tag",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 2340,
											"end": 2348,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "tag",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2583,
											"end": 2599,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2583,
											"end": 2599,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2697,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "tag",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5351,
											"end": 5355,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "230"
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5745,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5750,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5738,
											"end": 5750,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5749,
											"end": 5750,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5738,
											"end": 5750,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "231"
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5793,
											"end": 5797,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "tag",
											"source": 1,
											"value": "231"
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "235"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "tag",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5900,
											"end": 5905,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5900,
											"end": 5905,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "tag",
											"source": 1,
											"value": "230"
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "237"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "235"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "tag",
											"source": 1,
											"value": "237"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6031,
											"end": 6043,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 988,
											"end": 1083,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 988,
											"end": 1083,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "240"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "242"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "tag",
											"source": 1,
											"value": "240"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1050,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "247"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "242"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "tag",
											"source": 1,
											"value": "247"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1161,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1161,
											"end": 1193,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "108"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "254"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "253"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "254"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "253"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "254"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "255"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "256"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "255"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "256"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "261"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "255"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "261"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 145,
											"name": "tag",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 89,
											"end": 120,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 89,
											"end": 120,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 79,
											"end": 121,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 79,
											"end": 121,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 69,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "225"
										},
										{
											"begin": 69,
											"end": 139,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 135,
											"end": 136,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 125,
											"end": 137,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 150,
											"end": 465,
											"name": "tag",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 150,
											"end": 465,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 218,
											"end": 224,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 226,
											"end": 232,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 279,
											"end": 281,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 267,
											"end": 276,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 258,
											"end": 265,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 254,
											"end": 277,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 250,
											"end": 282,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 299,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 247,
											"end": 299,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "274"
										},
										{
											"begin": 247,
											"end": 299,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 295,
											"end": 296,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 292,
											"end": 293,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 285,
											"end": 297,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 247,
											"end": 299,
											"name": "tag",
											"source": 7,
											"value": "274"
										},
										{
											"begin": 247,
											"end": 299,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 334,
											"end": 343,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 321,
											"end": 344,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 353,
											"end": 384,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 378,
											"end": 383,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 353,
											"end": 384,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 353,
											"end": 384,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 353,
											"end": 384,
											"name": "tag",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 353,
											"end": 384,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 403,
											"end": 408,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 455,
											"end": 457,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 440,
											"end": 458,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 440,
											"end": 458,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 440,
											"end": 458,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 440,
											"end": 458,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 427,
											"end": 459,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 427,
											"end": 459,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 150,
											"end": 465,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 470,
											"end": 597,
											"name": "tag",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 470,
											"end": 597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 531,
											"end": 541,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 526,
											"end": 529,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 522,
											"end": 542,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 519,
											"end": 520,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 512,
											"end": 543,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 562,
											"end": 566,
											"name": "PUSH",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 559,
											"end": 560,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 552,
											"end": 567,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 586,
											"end": 590,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 583,
											"end": 584,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 576,
											"end": 591,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 602,
											"end": 877,
											"name": "tag",
											"source": 7,
											"value": "265"
										},
										{
											"begin": 602,
											"end": 877,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 673,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 667,
											"end": 676,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 738,
											"end": 740,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 719,
											"end": 732,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 719,
											"end": 732,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 715,
											"end": 742,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 703,
											"end": 743,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 703,
											"end": 743,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 773,
											"end": 791,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 758,
											"end": 792,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 758,
											"end": 792,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 794,
											"end": 816,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 794,
											"end": 816,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 794,
											"end": 816,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 755,
											"end": 817,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 752,
											"end": 840,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 752,
											"end": 840,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 752,
											"end": 840,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 820,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 820,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 820,
											"end": 838,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 820,
											"end": 838,
											"name": "tag",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 820,
											"end": 838,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 856,
											"end": 858,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 849,
											"end": 871,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 602,
											"end": 877,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 602,
											"end": 877,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 602,
											"end": 877,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 882,
											"end": 1085,
											"name": "tag",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 882,
											"end": 1085,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 962,
											"end": 966,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 995,
											"end": 1013,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 987,
											"end": 993,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 984,
											"end": 1014,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 981,
											"end": 1037,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 981,
											"end": 1037,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 981,
											"end": 1037,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1035,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 1017,
											"end": 1035,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 1017,
											"end": 1035,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1017,
											"end": 1035,
											"name": "tag",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 1017,
											"end": 1035,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1062,
											"end": 1063,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 1058,
											"end": 1072,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 1074,
											"end": 1078,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1054,
											"end": 1079,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1054,
											"end": 1079,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 882,
											"end": 1085,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1090,
											"end": 1867,
											"name": "tag",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 1090,
											"end": 1867,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1164,
											"end": 1169,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1217,
											"end": 1220,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1210,
											"end": 1214,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1202,
											"end": 1208,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1198,
											"end": 1215,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1194,
											"end": 1221,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1184,
											"end": 1239,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 1184,
											"end": 1239,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1235,
											"end": 1236,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1232,
											"end": 1233,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1225,
											"end": 1237,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1184,
											"end": 1239,
											"name": "tag",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 1184,
											"end": 1239,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1271,
											"end": 1277,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1258,
											"end": 1278,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1297,
											"end": 1301,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1321,
											"end": 1401,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 1337,
											"end": 1400,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 1397,
											"end": 1399,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1337,
											"end": 1400,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 1337,
											"end": 1400,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1337,
											"end": 1400,
											"name": "tag",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 1337,
											"end": 1400,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1321,
											"end": 1401,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "265"
										},
										{
											"begin": 1321,
											"end": 1401,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1321,
											"end": 1401,
											"name": "tag",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 1321,
											"end": 1401,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1435,
											"end": 1450,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1435,
											"end": 1450,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1435,
											"end": 1450,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1521,
											"end": 1522,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 1517,
											"end": 1527,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1517,
											"end": 1527,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1517,
											"end": 1527,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1517,
											"end": 1527,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 1505,
											"end": 1528,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1505,
											"end": 1528,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1501,
											"end": 1533,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1501,
											"end": 1533,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1501,
											"end": 1533,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1466,
											"end": 1478,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1466,
											"end": 1478,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1466,
											"end": 1478,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1466,
											"end": 1478,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1545,
											"end": 1560,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1545,
											"end": 1560,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1545,
											"end": 1560,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1542,
											"end": 1577,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1542,
											"end": 1577,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 1542,
											"end": 1577,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1573,
											"end": 1574,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1570,
											"end": 1571,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1563,
											"end": 1575,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1542,
											"end": 1577,
											"name": "tag",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 1542,
											"end": 1577,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1601,
											"end": 1607,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1597,
											"end": 1612,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1621,
											"end": 1838,
											"name": "tag",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 1621,
											"end": 1838,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1637,
											"end": 1643,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1632,
											"end": 1635,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1629,
											"end": 1644,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1621,
											"end": 1838,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1621,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "290"
										},
										{
											"begin": 1621,
											"end": 1838,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1717,
											"end": 1720,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1704,
											"end": 1721,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1734,
											"end": 1765,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "291"
										},
										{
											"begin": 1759,
											"end": 1764,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1734,
											"end": 1765,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 1734,
											"end": 1765,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1734,
											"end": 1765,
											"name": "tag",
											"source": 7,
											"value": "291"
										},
										{
											"begin": 1734,
											"end": 1765,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1778,
											"end": 1796,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1778,
											"end": 1796,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1816,
											"end": 1828,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1816,
											"end": 1828,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1816,
											"end": 1828,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1816,
											"end": 1828,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1654,
											"end": 1666,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1654,
											"end": 1666,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1621,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 1621,
											"end": 1838,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1621,
											"end": 1838,
											"name": "tag",
											"source": 7,
											"value": "290"
										},
										{
											"begin": 1621,
											"end": 1838,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1856,
											"end": 1861,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": 1090,
											"end": 1867,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1090,
											"end": 1867,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1872,
											"end": 2266,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 1872,
											"end": 2266,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1982,
											"end": 1988,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2035,
											"end": 2037,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2023,
											"end": 2032,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2014,
											"end": 2021,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2010,
											"end": 2033,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2006,
											"end": 2038,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 2003,
											"end": 2055,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2003,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "293"
										},
										{
											"begin": 2003,
											"end": 2055,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2051,
											"end": 2052,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2048,
											"end": 2049,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2041,
											"end": 2053,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2003,
											"end": 2055,
											"name": "tag",
											"source": 7,
											"value": "293"
										},
										{
											"begin": 2003,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2091,
											"end": 2100,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2078,
											"end": 2101,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2124,
											"end": 2142,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2116,
											"end": 2122,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2113,
											"end": 2143,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2110,
											"end": 2160,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2110,
											"end": 2160,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "294"
										},
										{
											"begin": 2110,
											"end": 2160,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2156,
											"end": 2157,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2153,
											"end": 2154,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2146,
											"end": 2158,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2110,
											"end": 2160,
											"name": "tag",
											"source": 7,
											"value": "294"
										},
										{
											"begin": 2110,
											"end": 2160,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2179,
											"end": 2260,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "116"
										},
										{
											"begin": 2252,
											"end": 2259,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2243,
											"end": 2249,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2232,
											"end": 2241,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2228,
											"end": 2250,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2179,
											"end": 2260,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 2179,
											"end": 2260,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2271,
											"end": 2518,
											"name": "tag",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 2271,
											"end": 2518,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2330,
											"end": 2336,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2383,
											"end": 2385,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2371,
											"end": 2380,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2362,
											"end": 2369,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2358,
											"end": 2381,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2354,
											"end": 2386,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 2351,
											"end": 2403,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2351,
											"end": 2403,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "297"
										},
										{
											"begin": 2351,
											"end": 2403,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2399,
											"end": 2400,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2396,
											"end": 2397,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2389,
											"end": 2401,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2351,
											"end": 2403,
											"name": "tag",
											"source": 7,
											"value": "297"
										},
										{
											"begin": 2351,
											"end": 2403,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2438,
											"end": 2447,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2425,
											"end": 2448,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2457,
											"end": 2488,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 2482,
											"end": 2487,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2457,
											"end": 2488,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 2457,
											"end": 2488,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2457,
											"end": 2488,
											"name": "tag",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 2457,
											"end": 2488,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2507,
											"end": 2512,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2271,
											"end": 2518,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2271,
											"end": 2518,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2705,
											"end": 2885,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 2705,
											"end": 2885,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2764,
											"end": 2770,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2817,
											"end": 2819,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2805,
											"end": 2814,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2796,
											"end": 2803,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2792,
											"end": 2815,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2788,
											"end": 2820,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 2785,
											"end": 2837,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2785,
											"end": 2837,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 2785,
											"end": 2837,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2833,
											"end": 2834,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2830,
											"end": 2831,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2823,
											"end": 2835,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2785,
											"end": 2837,
											"name": "tag",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 2785,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2856,
											"end": 2879,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2856,
											"end": 2879,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2885,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2705,
											"end": 2885,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3115,
											"end": 3883,
											"name": "tag",
											"source": 7,
											"value": "268"
										},
										{
											"begin": 3115,
											"end": 3883,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3180,
											"end": 3185,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3233,
											"end": 3236,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3226,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 3218,
											"end": 3224,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3214,
											"end": 3231,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3210,
											"end": 3237,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 3200,
											"end": 3255,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "304"
										},
										{
											"begin": 3200,
											"end": 3255,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3251,
											"end": 3252,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3248,
											"end": 3249,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3241,
											"end": 3253,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3200,
											"end": 3255,
											"name": "tag",
											"source": 7,
											"value": "304"
										},
										{
											"begin": 3200,
											"end": 3255,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3287,
											"end": 3293,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3274,
											"end": 3294,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 3313,
											"end": 3317,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3337,
											"end": 3417,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "305"
										},
										{
											"begin": 3353,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 3413,
											"end": 3415,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3353,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 3353,
											"end": 3416,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3337,
											"end": 3417,
											"name": "tag",
											"source": 7,
											"value": "305"
										},
										{
											"begin": 3337,
											"end": 3417,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3451,
											"end": 3466,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3451,
											"end": 3466,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3451,
											"end": 3466,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3537,
											"end": 3538,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 3533,
											"end": 3543,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3533,
											"end": 3543,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3533,
											"end": 3543,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3533,
											"end": 3543,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 3521,
											"end": 3544,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3521,
											"end": 3544,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3549,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3549,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3549,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3482,
											"end": 3494,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3482,
											"end": 3494,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3482,
											"end": 3494,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3482,
											"end": 3494,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3576,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3576,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3576,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3558,
											"end": 3593,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3558,
											"end": 3593,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "307"
										},
										{
											"begin": 3558,
											"end": 3593,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3589,
											"end": 3590,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3586,
											"end": 3587,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3591,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3558,
											"end": 3593,
											"name": "tag",
											"source": 7,
											"value": "307"
										},
										{
											"begin": 3558,
											"end": 3593,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3625,
											"end": 3627,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3617,
											"end": 3623,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3613,
											"end": 3628,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3637,
											"end": 3854,
											"name": "tag",
											"source": 7,
											"value": "308"
										},
										{
											"begin": 3637,
											"end": 3854,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3659,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3648,
											"end": 3651,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3645,
											"end": 3660,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 3637,
											"end": 3854,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3637,
											"end": 3854,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "290"
										},
										{
											"begin": 3637,
											"end": 3854,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3733,
											"end": 3736,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3720,
											"end": 3737,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 3750,
											"end": 3781,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "311"
										},
										{
											"begin": 3775,
											"end": 3780,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3750,
											"end": 3781,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 3750,
											"end": 3781,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3750,
											"end": 3781,
											"name": "tag",
											"source": 7,
											"value": "311"
										},
										{
											"begin": 3750,
											"end": 3781,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3794,
											"end": 3812,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3794,
											"end": 3812,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3832,
											"end": 3844,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3832,
											"end": 3844,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3832,
											"end": 3844,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3832,
											"end": 3844,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3670,
											"end": 3682,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3670,
											"end": 3682,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3637,
											"end": 3854,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "308"
										},
										{
											"begin": 3637,
											"end": 3854,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3888,
											"end": 4557,
											"name": "tag",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 3888,
											"end": 4557,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4049,
											"end": 4055,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4057,
											"end": 4063,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4110,
											"end": 4112,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4098,
											"end": 4107,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4089,
											"end": 4096,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4085,
											"end": 4108,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4081,
											"end": 4113,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 4078,
											"end": 4130,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4078,
											"end": 4130,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "313"
										},
										{
											"begin": 4078,
											"end": 4130,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4126,
											"end": 4127,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4123,
											"end": 4124,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4128,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4078,
											"end": 4130,
											"name": "tag",
											"source": 7,
											"value": "313"
										},
										{
											"begin": 4078,
											"end": 4130,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4166,
											"end": 4175,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4153,
											"end": 4176,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 4195,
											"end": 4213,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4236,
											"end": 4238,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4228,
											"end": 4234,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4225,
											"end": 4239,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4256,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4256,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "314"
										},
										{
											"begin": 4222,
											"end": 4256,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4252,
											"end": 4253,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4249,
											"end": 4250,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4242,
											"end": 4254,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4256,
											"name": "tag",
											"source": 7,
											"value": "314"
										},
										{
											"begin": 4222,
											"end": 4256,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4275,
											"end": 4347,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "315"
										},
										{
											"begin": 4339,
											"end": 4346,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4330,
											"end": 4336,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4319,
											"end": 4328,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 4315,
											"end": 4337,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4275,
											"end": 4347,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "268"
										},
										{
											"begin": 4275,
											"end": 4347,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4275,
											"end": 4347,
											"name": "tag",
											"source": 7,
											"value": "315"
										},
										{
											"begin": 4275,
											"end": 4347,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4265,
											"end": 4347,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 4265,
											"end": 4347,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4400,
											"end": 4402,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4389,
											"end": 4398,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4385,
											"end": 4403,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4372,
											"end": 4404,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 4356,
											"end": 4404,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4356,
											"end": 4404,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4429,
											"end": 4431,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4419,
											"end": 4427,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4416,
											"end": 4432,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 4413,
											"end": 4449,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4413,
											"end": 4449,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "316"
										},
										{
											"begin": 4413,
											"end": 4449,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4445,
											"end": 4446,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4442,
											"end": 4443,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4435,
											"end": 4447,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4413,
											"end": 4449,
											"name": "tag",
											"source": 7,
											"value": "316"
										},
										{
											"begin": 4413,
											"end": 4449,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4413,
											"end": 4449,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4468,
											"end": 4551,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "317"
										},
										{
											"begin": 4543,
											"end": 4550,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4532,
											"end": 4540,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4521,
											"end": 4530,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4517,
											"end": 4541,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4468,
											"end": 4551,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 4468,
											"end": 4551,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4468,
											"end": 4551,
											"name": "tag",
											"source": 7,
											"value": "317"
										},
										{
											"begin": 4468,
											"end": 4551,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4458,
											"end": 4551,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4458,
											"end": 4551,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4458,
											"end": 4551,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3888,
											"end": 4557,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3888,
											"end": 4557,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3888,
											"end": 4557,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3888,
											"end": 4557,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3888,
											"end": 4557,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3888,
											"end": 4557,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5004,
											"end": 5392,
											"name": "tag",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 5004,
											"end": 5392,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5072,
											"end": 5078,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5080,
											"end": 5086,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5133,
											"end": 5135,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5121,
											"end": 5130,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5112,
											"end": 5119,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5108,
											"end": 5131,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5104,
											"end": 5136,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 5101,
											"end": 5153,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5101,
											"end": 5153,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "321"
										},
										{
											"begin": 5101,
											"end": 5153,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5149,
											"end": 5150,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5146,
											"end": 5147,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5139,
											"end": 5151,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5101,
											"end": 5153,
											"name": "tag",
											"source": 7,
											"value": "321"
										},
										{
											"begin": 5101,
											"end": 5153,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5197,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5175,
											"end": 5198,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 5207,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "322"
										},
										{
											"begin": 5232,
											"end": 5237,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5207,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 5207,
											"end": 5238,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5207,
											"end": 5238,
											"name": "tag",
											"source": 7,
											"value": "322"
										},
										{
											"begin": 5207,
											"end": 5238,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5257,
											"end": 5262,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5314,
											"end": 5316,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5299,
											"end": 5317,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5299,
											"end": 5317,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5286,
											"end": 5318,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 5327,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "323"
										},
										{
											"begin": 5286,
											"end": 5318,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5327,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 5327,
											"end": 5360,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5327,
											"end": 5360,
											"name": "tag",
											"source": 7,
											"value": "323"
										},
										{
											"begin": 5327,
											"end": 5360,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5379,
											"end": 5386,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5369,
											"end": 5386,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5369,
											"end": 5386,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5369,
											"end": 5386,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5004,
											"end": 5392,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5004,
											"end": 5392,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5004,
											"end": 5392,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5004,
											"end": 5392,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5004,
											"end": 5392,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5004,
											"end": 5392,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5397,
											"end": 5773,
											"name": "tag",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 5397,
											"end": 5773,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5498,
											"end": 5504,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5551,
											"end": 5553,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5539,
											"end": 5548,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5530,
											"end": 5537,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5526,
											"end": 5549,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5522,
											"end": 5554,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 5519,
											"end": 5571,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5519,
											"end": 5571,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "325"
										},
										{
											"begin": 5519,
											"end": 5571,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5567,
											"end": 5568,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5564,
											"end": 5565,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5557,
											"end": 5569,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5519,
											"end": 5571,
											"name": "tag",
											"source": 7,
											"value": "325"
										},
										{
											"begin": 5519,
											"end": 5571,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5616,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5594,
											"end": 5617,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 5640,
											"end": 5658,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5632,
											"end": 5638,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5629,
											"end": 5659,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 5626,
											"end": 5676,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5626,
											"end": 5676,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "326"
										},
										{
											"begin": 5626,
											"end": 5676,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5672,
											"end": 5673,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5669,
											"end": 5670,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5662,
											"end": 5674,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5626,
											"end": 5676,
											"name": "tag",
											"source": 7,
											"value": "326"
										},
										{
											"begin": 5626,
											"end": 5676,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5695,
											"end": 5767,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "116"
										},
										{
											"begin": 5759,
											"end": 5766,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5750,
											"end": 5756,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5739,
											"end": 5748,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5735,
											"end": 5757,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5695,
											"end": 5767,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "268"
										},
										{
											"begin": 5695,
											"end": 5767,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5778,
											"end": 5905,
											"name": "tag",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 5778,
											"end": 5905,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5839,
											"end": 5849,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 5834,
											"end": 5837,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 5830,
											"end": 5850,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 5827,
											"end": 5828,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5820,
											"end": 5851,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5870,
											"end": 5874,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 5867,
											"end": 5868,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5860,
											"end": 5875,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5894,
											"end": 5898,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5891,
											"end": 5892,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5884,
											"end": 5899,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5910,
											"end": 6038,
											"name": "tag",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 5910,
											"end": 6038,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5950,
											"end": 5953,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5981,
											"end": 5982,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5977,
											"end": 5983,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 5974,
											"end": 5975,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5971,
											"end": 5984,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 5968,
											"end": 6007,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5968,
											"end": 6007,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "331"
										},
										{
											"begin": 5968,
											"end": 6007,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5987,
											"end": 6005,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "331"
										},
										{
											"begin": 5987,
											"end": 6005,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 5987,
											"end": 6005,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5987,
											"end": 6005,
											"name": "tag",
											"source": 7,
											"value": "331"
										},
										{
											"begin": 5987,
											"end": 6005,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6023,
											"end": 6032,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6023,
											"end": 6032,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5910,
											"end": 6038,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6043,
											"end": 6399,
											"name": "tag",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 6043,
											"end": 6399,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6245,
											"end": 6247,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6227,
											"end": 6248,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6227,
											"end": 6248,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6227,
											"end": 6248,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6264,
											"end": 6282,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6264,
											"end": 6282,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6264,
											"end": 6282,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6257,
											"end": 6287,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6323,
											"end": 6357,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 6318,
											"end": 6320,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6303,
											"end": 6321,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6303,
											"end": 6321,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6296,
											"end": 6358,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6390,
											"end": 6392,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 6375,
											"end": 6393,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6393,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6043,
											"end": 6399,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6404,
											"end": 6531,
											"name": "tag",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 6404,
											"end": 6531,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6465,
											"end": 6475,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 6460,
											"end": 6463,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 6456,
											"end": 6476,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 6453,
											"end": 6454,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6446,
											"end": 6477,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6496,
											"end": 6500,
											"name": "PUSH",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 6493,
											"end": 6494,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6486,
											"end": 6501,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6520,
											"end": 6524,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6517,
											"end": 6518,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6510,
											"end": 6525,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6744,
											"end": 6928,
											"name": "tag",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 6744,
											"end": 6928,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6814,
											"end": 6820,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6867,
											"end": 6869,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6855,
											"end": 6864,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6846,
											"end": 6853,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6842,
											"end": 6865,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6838,
											"end": 6870,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 6835,
											"end": 6887,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6835,
											"end": 6887,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "336"
										},
										{
											"begin": 6835,
											"end": 6887,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6883,
											"end": 6884,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6880,
											"end": 6881,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6873,
											"end": 6885,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6835,
											"end": 6887,
											"name": "tag",
											"source": 7,
											"value": "336"
										},
										{
											"begin": 6835,
											"end": 6887,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6906,
											"end": 6922,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6906,
											"end": 6922,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6744,
											"end": 6928,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6744,
											"end": 6928,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6933,
											"end": 7617,
											"name": "tag",
											"source": 7,
											"value": "110"
										},
										{
											"begin": 6933,
											"end": 7617,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7130,
											"end": 7132,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7182,
											"end": 7203,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7182,
											"end": 7203,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7182,
											"end": 7203,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7252,
											"end": 7265,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7252,
											"end": 7265,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7155,
											"end": 7173,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7155,
											"end": 7173,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7155,
											"end": 7173,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7274,
											"end": 7296,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7274,
											"end": 7296,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7274,
											"end": 7296,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7101,
											"end": 7105,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7101,
											"end": 7105,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7130,
											"end": 7132,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7353,
											"end": 7368,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7353,
											"end": 7368,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7353,
											"end": 7368,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7353,
											"end": 7368,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7327,
											"end": 7329,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7312,
											"end": 7330,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 7312,
											"end": 7330,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7312,
											"end": 7330,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7101,
											"end": 7105,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7396,
											"end": 7591,
											"name": "tag",
											"source": 7,
											"value": "338"
										},
										{
											"begin": 7396,
											"end": 7591,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7410,
											"end": 7416,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7407,
											"end": 7408,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7404,
											"end": 7417,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 7396,
											"end": 7591,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7396,
											"end": 7591,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "340"
										},
										{
											"begin": 7396,
											"end": 7591,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7475,
											"end": 7488,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7475,
											"end": 7488,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7471,
											"end": 7510,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7459,
											"end": 7511,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7459,
											"end": 7511,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7566,
											"end": 7581,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7566,
											"end": 7581,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7566,
											"end": 7581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7566,
											"end": 7581,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7531,
											"end": 7543,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7531,
											"end": 7543,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7531,
											"end": 7543,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7531,
											"end": 7543,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7507,
											"end": 7508,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 7425,
											"end": 7434,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7396,
											"end": 7591,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "338"
										},
										{
											"begin": 7396,
											"end": 7591,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7396,
											"end": 7591,
											"name": "tag",
											"source": 7,
											"value": "340"
										},
										{
											"begin": 7396,
											"end": 7591,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7608,
											"end": 7611,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7608,
											"end": 7611,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": 6933,
											"end": 7617,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6933,
											"end": 7617,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7622,
											"end": 7747,
											"name": "tag",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 7622,
											"end": 7747,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7662,
											"end": 7666,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7690,
											"end": 7691,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7687,
											"end": 7688,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7684,
											"end": 7692,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 7681,
											"end": 7715,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7681,
											"end": 7715,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "343"
										},
										{
											"begin": 7681,
											"end": 7715,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7695,
											"end": 7713,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "343"
										},
										{
											"begin": 7695,
											"end": 7713,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 7695,
											"end": 7713,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7695,
											"end": 7713,
											"name": "tag",
											"source": 7,
											"value": "343"
										},
										{
											"begin": 7695,
											"end": 7713,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7732,
											"end": 7741,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7732,
											"end": 7741,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7622,
											"end": 7747,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7752,
											"end": 7927,
											"name": "tag",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 7752,
											"end": 7927,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7789,
											"end": 7792,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7833,
											"end": 7837,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 7826,
											"end": 7831,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7822,
											"end": 7838,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7862,
											"end": 7866,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 7853,
											"end": 7860,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7850,
											"end": 7867,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7847,
											"end": 7890,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "346"
										},
										{
											"begin": 7847,
											"end": 7890,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7870,
											"end": 7888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "346"
										},
										{
											"begin": 7870,
											"end": 7888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 7870,
											"end": 7888,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7870,
											"end": 7888,
											"name": "tag",
											"source": 7,
											"value": "346"
										},
										{
											"begin": 7870,
											"end": 7888,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7919,
											"end": 7920,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 7906,
											"end": 7921,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7906,
											"end": 7921,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7752,
											"end": 7927,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7752,
											"end": 7927,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9218,
											"end": 9628,
											"name": "tag",
											"source": 7,
											"value": "235"
										},
										{
											"begin": 9218,
											"end": 9628,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9420,
											"end": 9422,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9402,
											"end": 9423,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9402,
											"end": 9423,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9402,
											"end": 9423,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9459,
											"end": 9461,
											"name": "PUSH",
											"source": 7,
											"value": "2E"
										},
										{
											"begin": 9439,
											"end": 9457,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9439,
											"end": 9457,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9439,
											"end": 9457,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9432,
											"end": 9462,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9498,
											"end": 9532,
											"name": "PUSH",
											"source": 7,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 9493,
											"end": 9495,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9478,
											"end": 9496,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9478,
											"end": 9496,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9471,
											"end": 9533,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9564,
											"end": 9566,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 9549,
											"end": 9567,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9549,
											"end": 9567,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9542,
											"end": 9586,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9618,
											"end": 9621,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 9603,
											"end": 9622,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9603,
											"end": 9622,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9218,
											"end": 9628,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9633,
											"end": 10040,
											"name": "tag",
											"source": 7,
											"value": "242"
										},
										{
											"begin": 9633,
											"end": 10040,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9835,
											"end": 9837,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9817,
											"end": 9838,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9817,
											"end": 9838,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9817,
											"end": 9838,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9874,
											"end": 9876,
											"name": "PUSH",
											"source": 7,
											"value": "2B"
										},
										{
											"begin": 9854,
											"end": 9872,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9854,
											"end": 9872,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9854,
											"end": 9872,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9847,
											"end": 9877,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9913,
											"end": 9947,
											"name": "PUSH",
											"source": 7,
											"value": "496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
										},
										{
											"begin": 9908,
											"end": 9910,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9893,
											"end": 9911,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9893,
											"end": 9911,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9886,
											"end": 9948,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E697469616C697A696E67"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9979,
											"end": 9981,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 9964,
											"end": 9982,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9964,
											"end": 9982,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9957,
											"end": 9998,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10030,
											"end": 10033,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 10015,
											"end": 10034,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10015,
											"end": 10034,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9633,
											"end": 10040,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										}
									]
								},
								"1E93930C6875183D88CD66E10DF1F1E695D60226FF9068840C89B95F525592B2": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561"
							}
						},
						"methodIdentifiers": {
							"availableCredit(address)": "5886216f",
							"creditors(uint256)": "71bc16b5",
							"getUserVaultShares(address,address)": "c5c66d4d",
							"initialize(address[],address[])": "73cf25f8",
							"onDeposit(address,uint256)": "2bf9518c",
							"onWithdraw(address,uint256)": "ccad973d",
							"owner()": "8da5cb5b",
							"privateVaults(uint256)": "87f049e4",
							"renounceOwnership()": "715018a6",
							"setCreditors(address[])": "e7d325a1",
							"setPrivateVaults(address[])": "4fe01823",
							"totalCredit(address)": "f220d16c",
							"transferOwnership(address)": "f2fde38b",
							"usedCredit(address)": "7bf962de",
							"userVaultShares(address,address)": "9f7b7ead"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ICreditor[]\",\"name\":\"_creditors\",\"type\":\"address[]\"}],\"name\":\"LogSetCreditors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IDeltaNeutralVault[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"LogSetPrivateVaults\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"availableCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditors\",\"outputs\":[{\"internalType\":\"contract ICreditor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getUserVaultShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICreditor[]\",\"name\":\"_creditors\",\"type\":\"address[]\"},{\"internalType\":\"contract IDeltaNeutralVault[]\",\"name\":\"_privateVaults\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"privateVaults\",\"outputs\":[{\"internalType\":\"contract IDeltaNeutralVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICreditor[]\",\"name\":\"_newCreditors\",\"type\":\"address[]\"}],\"name\":\"setCreditors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDeltaNeutralVault[]\",\"name\":\"_newPrivateVaults\",\"type\":\"address[]\"}],\"name\":\"setPrivateVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"usedCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userVaultShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"availableCredit(address)\":{\"params\":{\"_user\":\"address of user.\"},\"returns\":{\"_0\":\"_total remaining credit of this user\"}},\"getUserVaultShares(address,address)\":{\"params\":{\"_user\":\"share owner\",\"_vault\":\"delta vault\"}},\"initialize(address[],address[])\":{\"params\":{\"_creditors\":\"list of credit sources\",\"_privateVaults\":\"list of private automated vaults\"}},\"onDeposit(address,uint256)\":{\"params\":{\"_shareAmount\":\"amount of automated vault's share\",\"_user\":\"share owner\"}},\"onWithdraw(address,uint256)\":{\"params\":{\"_shareAmount\":\"amount of automated vault's share withdrawn\",\"_user\":\"share owner\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCreditors(address[])\":{\"params\":{\"_newCreditors\":\"list of credit sources\"}},\"setPrivateVaults(address[])\":{\"params\":{\"_newPrivateVaults\":\"list of private automated vaults\"}},\"totalCredit(address)\":{\"params\":{\"_user\":\"address of user.\"},\"returns\":{\"_0\":\"_total user's credit in USD value\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"usedCredit(address)\":{\"params\":{\"_user\":\"address of user.\"},\"returns\":{\"_0\":\"_total user's used credit in USD value from depositing into private automated vaults\"}}},\"title\":\"AutomatedVaultController - Controller how much investor can invest in the private automated vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"availableCredit(address)\":{\"notice\":\"Get availableCredit credit for this user\"},\"getUserVaultShares(address,address)\":{\"notice\":\"Return share of user of given vault\"},\"initialize(address[],address[])\":{\"notice\":\"Initialize Automated Vault Controller\"},\"onDeposit(address,uint256)\":{\"notice\":\"record user's automated vault's share from deposit\"},\"onWithdraw(address,uint256)\":{\"notice\":\"update user's automated vault's share from withdrawal\"},\"setCreditors(address[])\":{\"notice\":\"set private automated vaults\"},\"setPrivateVaults(address[])\":{\"notice\":\"set private automated vaults\"},\"totalCredit(address)\":{\"notice\":\"Get total credit for this user\"},\"usedCredit(address)\":{\"notice\":\"Get used credit for this user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AutomatedVaultController.sol\":\"AutomatedVaultController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7\",\"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"contracts/AutomatedVaultController.sol\":{\"keccak256\":\"0x6fe0d9315f17f9ed6d0397dee7f950adea85d4e24cb424061b26569c114d9918\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://7ed4f1c151659aa58067c7fbae6c54e615ae3e45abfccb108ef0607d43b88756\",\"dweb:/ipfs/QmPFmEZDy32eSvdA1tJDBCAeGj5FN37uZgfAAHMmN6djuv\"]},\"contracts/interfaces/ICreditor.sol\":{\"keccak256\":\"0x5f5e9528faf0ae9dc328edc68b638867f95db583b288eb60192f60dcb0c1369e\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://1e84626e63a7e69bac1f51c3c76ab340fc88f1b02a13902cc5ebb08cec20b3bc\",\"dweb:/ipfs/QmTaYsCrakjuobfW5JhyunCWW1KgvhANJRCh1tBjShx4AX\"]},\"contracts/interfaces/IDeltaNeutralVault.sol\":{\"keccak256\":\"0xeedd6aff61bb0055264bd5ddbb4bd0fc500213d110f3b8950277758888fa32f9\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://60d57c6587f68636cddba9f321d39068a0b4aee0c139afa25f104f8704f7439c\",\"dweb:/ipfs/QmZVfPax2yqboy6MPktmTMgggfasfpdad7hRE3CzygJYHk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "contracts/AutomatedVaultController.sol:AutomatedVaultController",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "contracts/AutomatedVaultController.sol:AutomatedVaultController",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 549,
								"contract": "contracts/AutomatedVaultController.sol:AutomatedVaultController",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "contracts/AutomatedVaultController.sol:AutomatedVaultController",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 122,
								"contract": "contracts/AutomatedVaultController.sol:AutomatedVaultController",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 581,
								"contract": "contracts/AutomatedVaultController.sol:AutomatedVaultController",
								"label": "creditors",
								"offset": 0,
								"slot": "101",
								"type": "t_array(t_contract(ICreditor)983)dyn_storage"
							},
							{
								"astId": 585,
								"contract": "contracts/AutomatedVaultController.sol:AutomatedVaultController",
								"label": "privateVaults",
								"offset": 0,
								"slot": "102",
								"type": "t_array(t_contract(IDeltaNeutralVault)993)dyn_storage"
							},
							{
								"astId": 591,
								"contract": "contracts/AutomatedVaultController.sol:AutomatedVaultController",
								"label": "userVaultShares",
								"offset": 0,
								"slot": "103",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_contract(ICreditor)983)dyn_storage": {
								"base": "t_contract(ICreditor)983",
								"encoding": "dynamic_array",
								"label": "contract ICreditor[]",
								"numberOfBytes": "32"
							},
							"t_array(t_contract(IDeltaNeutralVault)993)dyn_storage": {
								"base": "t_contract(IDeltaNeutralVault)993",
								"encoding": "dynamic_array",
								"label": "contract IDeltaNeutralVault[]",
								"numberOfBytes": "32"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(ICreditor)983": {
								"encoding": "inplace",
								"label": "contract ICreditor",
								"numberOfBytes": "20"
							},
							"t_contract(IDeltaNeutralVault)993": {
								"encoding": "inplace",
								"label": "contract IDeltaNeutralVault",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"availableCredit(address)": {
								"notice": "Get availableCredit credit for this user"
							},
							"getUserVaultShares(address,address)": {
								"notice": "Return share of user of given vault"
							},
							"initialize(address[],address[])": {
								"notice": "Initialize Automated Vault Controller"
							},
							"onDeposit(address,uint256)": {
								"notice": "record user's automated vault's share from deposit"
							},
							"onWithdraw(address,uint256)": {
								"notice": "update user's automated vault's share from withdrawal"
							},
							"setCreditors(address[])": {
								"notice": "set private automated vaults"
							},
							"setPrivateVaults(address[])": {
								"notice": "set private automated vaults"
							},
							"totalCredit(address)": {
								"notice": "Get total credit for this user"
							},
							"usedCredit(address)": {
								"notice": "Get used credit for this user"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/interfaces/ICreditor.sol": {
				"ICreditor": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "getUserCredit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getUserCredit(address)": "dad6f0dc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ICreditor.sol\":\"ICreditor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ICreditor.sol\":{\"keccak256\":\"0x5f5e9528faf0ae9dc328edc68b638867f95db583b288eb60192f60dcb0c1369e\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://1e84626e63a7e69bac1f51c3c76ab340fc88f1b02a13902cc5ebb08cec20b3bc\",\"dweb:/ipfs/QmTaYsCrakjuobfW5JhyunCWW1KgvhANJRCh1tBjShx4AX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/IDeltaNeutralVault.sol": {
				"IDeltaNeutralVault": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_shareAmount",
									"type": "uint256"
								}
							],
							"name": "shareToValue",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"shareToValue(uint256)": "441130d5"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"name\":\"shareToValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IDeltaNeutralVault.sol\":\"IDeltaNeutralVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IDeltaNeutralVault.sol\":{\"keccak256\":\"0xeedd6aff61bb0055264bd5ddbb4bd0fc500213d110f3b8950277758888fa32f9\",\"license\":\"BUSL\",\"urls\":[\"bzz-raw://60d57c6587f68636cddba9f321d39068a0b4aee0c139afa25f104f8704f7439c\",\"dweb:/ipfs/QmZVfPax2yqboy6MPktmTMgggfasfpdad7hRE3CzygJYHk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							508
						],
						"ContextUpgradeable": [
							550
						],
						"Initializable": [
							265
						],
						"OwnableUpgradeable": [
							123
						]
					},
					"id": 124,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 124,
							"sourceUnit": 551,
							"src": "112:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 124,
							"sourceUnit": 266,
							"src": "154:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 265,
										"src": "733:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "733:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 550,
										"src": "748:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "748:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "198:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 123,
							"linearizedBaseContracts": [
								123,
								550,
								265
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "711:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "789:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 123,
									"src": "773:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "773:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 16,
									"name": "OwnershipTransferred",
									"nameLocation": "808:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "845:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "829:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "876:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "860:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "828:57:0"
									},
									"src": "802:84:0"
								},
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "1040:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 37,
														"src": "1050:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1050:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "892:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 19,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "1023:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1023:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "997:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1011:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:0"
									},
									"scope": 123,
									"src": "988:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 36,
										"nodeType": "Block",
										"src": "1151:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 32,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 535,
																"src": "1180:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1180:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 31,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "1161:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1161:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "1161:32:0"
											}
										]
									},
									"id": 37,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 29,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 28,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "1134:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1134:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1098:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1122:2:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1151:0:0"
									},
									"scope": 123,
									"src": "1089:111:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1331:30:0",
										"statements": [
											{
												"expression": {
													"id": 43,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1348:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 42,
												"id": 44,
												"nodeType": "Return",
												"src": "1341:13:0"
											}
										]
									},
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "1206:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 46,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1285:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1290:2:0"
									},
									"returnParameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "1322:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 40,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1322:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1321:9:0"
									},
									"scope": 123,
									"src": "1276:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1470:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 50,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 46,
																	"src": "1488:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1488:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 52,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 535,
																	"src": "1499:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 53,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1499:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1488:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 55,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1513:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 49,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1480:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 56,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1480:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 57,
												"nodeType": "ExpressionStatement",
												"src": "1480:68:0"
											},
											{
												"id": 58,
												"nodeType": "PlaceholderStatement",
												"src": "1558:1:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1367:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 60,
									"name": "onlyOwner",
									"nameLocation": "1458:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1467:2:0"
									},
									"src": "1449:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "1962:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 69,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1999:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1991:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 67,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1991:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 70,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1991:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 66,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "1972:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1972:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 72,
												"nodeType": "ExpressionStatement",
												"src": "1972:30:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1572:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 74,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 64,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 63,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "1952:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1952:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1917:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1934:2:0"
									},
									"returnParameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1962:0:0"
									},
									"scope": 123,
									"src": "1908:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "2228:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 88,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 83,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 77,
																"src": "2246:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 86,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2266:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 85,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2258:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 84,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2258:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 87,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2258:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2246:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 89,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2270:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 82,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2238:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2238:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 91,
												"nodeType": "ExpressionStatement",
												"src": "2238:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 93,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "2340:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 92,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "2321:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2321:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 95,
												"nodeType": "ExpressionStatement",
												"src": "2321:28:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "2015:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 80,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 79,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "2218:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2218:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2167:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2193:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "2185:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 76,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2185:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2184:18:0"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2228:0:0"
									},
									"scope": 123,
									"src": "2158:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 116,
										"nodeType": "Block",
										"src": "2573:124:0",
										"statements": [
											{
												"assignments": [
													104
												],
												"declarations": [
													{
														"constant": false,
														"id": 104,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2591:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 116,
														"src": "2583:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 103,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2583:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 106,
												"initialValue": {
													"id": 105,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2602:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2583:25:0"
											},
											{
												"expression": {
													"id": 109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 107,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2618:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 108,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 100,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2618:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 110,
												"nodeType": "ExpressionStatement",
												"src": "2618:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 112,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 104,
															"src": "2671:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 113,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "2681:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 111,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2650:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 115,
												"nodeType": "EmitStatement",
												"src": "2645:45:0"
											}
										]
									},
									"documentation": {
										"id": 98,
										"nodeType": "StructuredDocumentation",
										"src": "2362:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2519:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2546:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "2538:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 99,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2538:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2537:18:0"
									},
									"returnParameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2573:0:0"
									},
									"scope": 123,
									"src": "2510:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 118,
										"nodeType": "StructuredDocumentation",
										"src": "2703:254:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 122,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "2982:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 123,
									"src": "2962:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 119,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2962:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 121,
										"length": {
											"hexValue": "3439",
											"id": 120,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2970:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "2962:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 124,
							"src": "693:2297:0",
							"usedErrors": []
						}
					],
					"src": "87:2904:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							508
						],
						"Initializable": [
							265
						]
					},
					"id": 266,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 125,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 126,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 266,
							"sourceUnit": 509,
							"src": "138:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 127,
								"nodeType": "StructuredDocumentation",
								"src": "184:2198:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 265,
							"linearizedBaseContracts": [
								265
							],
							"name": "Initializable",
							"nameLocation": "2401:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "2421:109:1",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 130,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2549:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "2535:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 129,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2535:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "2568:91:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 133,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2677:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "2664:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 132,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2664:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "2697:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
									"id": 138,
									"name": "Initialized",
									"nameLocation": "2798:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2816:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "2810:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 135,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2810:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:15:1"
									},
									"src": "2792:33:1"
								},
								{
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "3101:257:1",
										"statements": [
											{
												"assignments": [
													142
												],
												"declarations": [
													{
														"constant": false,
														"id": 142,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3116:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 166,
														"src": "3111:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 141,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3111:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 146,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31",
															"id": 144,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3156:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 143,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "3133:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3133:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3111:47:1"
											},
											{
												"condition": {
													"id": 147,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 142,
													"src": "3172:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 153,
												"nodeType": "IfStatement",
												"src": "3168:65:1",
												"trueBody": {
													"id": 152,
													"nodeType": "Block",
													"src": "3188:45:1",
													"statements": [
														{
															"expression": {
																"id": 150,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 148,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "3202:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 149,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3218:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3202:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 151,
															"nodeType": "ExpressionStatement",
															"src": "3202:20:1"
														}
													]
												}
											},
											{
												"id": 154,
												"nodeType": "PlaceholderStatement",
												"src": "3242:1:1"
											},
											{
												"condition": {
													"id": 155,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 142,
													"src": "3257:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 165,
												"nodeType": "IfStatement",
												"src": "3253:99:1",
												"trueBody": {
													"id": 164,
													"nodeType": "Block",
													"src": "3273:79:1",
													"statements": [
														{
															"expression": {
																"id": 158,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 156,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "3287:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3303:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3287:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 159,
															"nodeType": "ExpressionStatement",
															"src": "3287:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3339:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 160,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "3327:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3327:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 163,
															"nodeType": "EmitStatement",
															"src": "3322:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "2831:242:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`."
									},
									"id": 167,
									"name": "initializer",
									"nameLocation": "3087:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3098:2:1"
									},
									"src": "3078:280:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 197,
										"nodeType": "Block",
										"src": "4173:269:1",
										"statements": [
											{
												"assignments": [
													173
												],
												"declarations": [
													{
														"constant": false,
														"id": 173,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4188:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 197,
														"src": "4183:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 172,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4183:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 177,
												"initialValue": {
													"arguments": [
														{
															"id": 175,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 170,
															"src": "4228:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 174,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "4205:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4205:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4183:53:1"
											},
											{
												"condition": {
													"id": 178,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 173,
													"src": "4250:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 184,
												"nodeType": "IfStatement",
												"src": "4246:65:1",
												"trueBody": {
													"id": 183,
													"nodeType": "Block",
													"src": "4266:45:1",
													"statements": [
														{
															"expression": {
																"id": 181,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 179,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "4280:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 180,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4296:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "4280:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 182,
															"nodeType": "ExpressionStatement",
															"src": "4280:20:1"
														}
													]
												}
											},
											{
												"id": 185,
												"nodeType": "PlaceholderStatement",
												"src": "4320:1:1"
											},
											{
												"condition": {
													"id": 186,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 173,
													"src": "4335:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 196,
												"nodeType": "IfStatement",
												"src": "4331:105:1",
												"trueBody": {
													"id": 195,
													"nodeType": "Block",
													"src": "4351:85:1",
													"statements": [
														{
															"expression": {
																"id": 189,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 187,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "4365:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 188,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4381:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "4365:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 190,
															"nodeType": "ExpressionStatement",
															"src": "4365:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 192,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 170,
																		"src": "4417:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 191,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "4405:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4405:20:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 194,
															"nodeType": "EmitStatement",
															"src": "4400:25:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "3364:766:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n initialization step. This is essential to configure modules that are added through upgrades and that require\n initialization.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator."
									},
									"id": 198,
									"name": "reinitializer",
									"nameLocation": "4144:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4164:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "4158:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 169,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4158:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4157:15:1"
									},
									"src": "4135:307:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 207,
										"nodeType": "Block",
										"src": "4680:97:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 202,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "4698:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4713:45:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 201,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4690:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4690:69:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 205,
												"nodeType": "ExpressionStatement",
												"src": "4690:69:1"
											},
											{
												"id": 206,
												"nodeType": "PlaceholderStatement",
												"src": "4769:1:1"
											}
										]
									},
									"documentation": {
										"id": 199,
										"nodeType": "StructuredDocumentation",
										"src": "4448:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 208,
									"name": "onlyInitializing",
									"nameLocation": "4661:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4677:2:1"
									},
									"src": "4652:125:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 220,
										"nodeType": "Block",
										"src": "5225:56:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 215,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5263:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		},
																		"typeName": {
																			"id": 214,
																			"name": "uint8",
																			"nodeType": "ElementaryTypeName",
																			"src": "5263:5:1",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		}
																	],
																	"id": 213,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "5258:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 216,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5258:11:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint8",
																	"typeString": "type(uint8)"
																}
															},
															"id": 217,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "5258:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 212,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "5235:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5235:39:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 219,
												"nodeType": "ExpressionStatement",
												"src": "5235:39:1"
											}
										]
									},
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "4783:388:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies."
									},
									"id": 221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5185:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5205:2:1"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5225:0:1"
									},
									"scope": 265,
									"src": "5176:105:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 263,
										"nodeType": "Block",
										"src": "5357:738:1",
										"statements": [
											{
												"condition": {
													"id": 228,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 133,
													"src": "5684:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 261,
													"nodeType": "Block",
													"src": "5922:167:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		"id": 251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 249,
																			"name": "_initialized",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 130,
																			"src": "5944:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 250,
																			"name": "version",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 223,
																			"src": "5959:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"src": "5944:22:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
																		"id": 252,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5968:48:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		},
																		"value": "Initializable: contract is already initialized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		}
																	],
																	"id": 248,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5936:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 253,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5936:81:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 254,
															"nodeType": "ExpressionStatement",
															"src": "5936:81:1"
														},
														{
															"expression": {
																"id": 257,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 255,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "6031:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 256,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 223,
																	"src": "6046:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6031:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 258,
															"nodeType": "ExpressionStatement",
															"src": "6031:22:1"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 259,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6074:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 227,
															"id": 260,
															"nodeType": "Return",
															"src": "6067:11:1"
														}
													]
												},
												"id": 262,
												"nodeType": "IfStatement",
												"src": "5680:409:1",
												"trueBody": {
													"id": 247,
													"nodeType": "Block",
													"src": "5699:217:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 241,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 232,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 230,
																				"name": "version",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 223,
																				"src": "5738:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 231,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5749:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "5738:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"id": 240,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "5754:45:1",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 237,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "5793:4:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$265",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$265",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 236,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "5785:7:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 235,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "5785:7:1",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 238,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "5785:13:1",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 233,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 508,
																						"src": "5755:18:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$508_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 234,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 283,
																					"src": "5755:29:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 239,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5755:44:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "5738:61:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
																		"id": 242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5817:48:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		},
																		"value": "Initializable: contract is already initialized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		}
																	],
																	"id": 229,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5713:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 243,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5713:166:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 244,
															"nodeType": "ExpressionStatement",
															"src": "5713:166:1"
														},
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 245,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5900:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 227,
															"id": 246,
															"nodeType": "Return",
															"src": "5893:12:1"
														}
													]
												}
											}
										]
									},
									"id": 264,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setInitializedVersion",
									"nameLocation": "5296:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5325:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "5319:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 222,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5319:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5318:15:1"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "5351:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 225,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5351:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5350:6:1"
									},
									"scope": 265,
									"src": "5287:808:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 266,
							"src": "2383:3714:1",
							"usedErrors": []
						}
					],
					"src": "113:5985:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							508
						]
					},
					"id": 509,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 267,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AddressUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 268,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:2",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 508,
							"linearizedBaseContracts": [
								508
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 282,
										"nodeType": "Block",
										"src": "1252:254:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 276,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 271,
																"src": "1476:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1476:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 278,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1476:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 279,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1498:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1476:23:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 275,
												"id": 281,
												"nodeType": "Return",
												"src": "1469:30:2"
											}
										]
									},
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "227:954:2",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 283,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1195:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1214:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "1206:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 270,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1205:17:2"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "1246:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 273,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1246:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1245:6:2"
									},
									"scope": 508,
									"src": "1186:320:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 316,
										"nodeType": "Block",
										"src": "2494:241:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 298,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 294,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2520:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$508",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$508",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2512:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 292,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2512:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 295,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2512:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 296,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2512:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 297,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 288,
																"src": "2537:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2512:31:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 299,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2545:31:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 291,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2504:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2504:73:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 301,
												"nodeType": "ExpressionStatement",
												"src": "2504:73:2"
											},
											{
												"assignments": [
													303,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 303,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2594:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 316,
														"src": "2589:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 302,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2589:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 310,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2637:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 304,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 286,
																"src": "2607:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2607:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 307,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 306,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 288,
																"src": "2629:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2607:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:33:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2588:52:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 312,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "2658:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 313,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2667:60:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 311,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2650:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:78:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 315,
												"nodeType": "ExpressionStatement",
												"src": "2650:78:2"
											}
										]
									},
									"documentation": {
										"id": 284,
										"nodeType": "StructuredDocumentation",
										"src": "1512:906:2",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2432:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2458:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "2442:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2442:15:2",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2477:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "2469:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2441:43:2"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2494:0:2"
									},
									"scope": 508,
									"src": "2423:312:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 333,
										"nodeType": "Block",
										"src": "3566:84:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 328,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 320,
															"src": "3596:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 329,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "3604:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3610:32:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 327,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															334,
															354
														],
														"referencedDeclaration": 354,
														"src": "3583:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3583:60:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 326,
												"id": 332,
												"nodeType": "Return",
												"src": "3576:67:2"
											}
										]
									},
									"documentation": {
										"id": 318,
										"nodeType": "StructuredDocumentation",
										"src": "2741:731:2",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3486:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3507:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3499:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 319,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3499:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3528:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3515:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 321,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3515:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:35:2"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "3552:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 324,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3552:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3551:14:2"
									},
									"scope": 508,
									"src": "3477:173:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "4019:76:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 337,
															"src": "4058:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 348,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "4066:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4072:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 350,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "4075:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 346,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															374,
															424
														],
														"referencedDeclaration": 424,
														"src": "4036:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4036:52:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 345,
												"id": 352,
												"nodeType": "Return",
												"src": "4029:59:2"
											}
										]
									},
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "3656:211:2",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3881:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3911:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3903:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3903:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3940:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3927:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 338,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3927:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3968:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "3954:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 340,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3954:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:93:2"
									},
									"returnParameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "4005:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 343,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4005:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4004:14:2"
									},
									"scope": 508,
									"src": "3872:223:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 373,
										"nodeType": "Block",
										"src": "4600:111:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 367,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "4639:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 368,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "4647:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 369,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "4653:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 370,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4660:43:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 366,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															374,
															424
														],
														"referencedDeclaration": 424,
														"src": "4617:21:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4617:87:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 365,
												"id": 372,
												"nodeType": "Return",
												"src": "4610:94:2"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "4101:351:2",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 374,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4466:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4505:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4497:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4497:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4534:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4521:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 358,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4521:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4556:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4548:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4548:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4487:80:2"
									},
									"returnParameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "4586:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 363,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4586:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4585:14:2"
									},
									"scope": 508,
									"src": "4457:254:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 423,
										"nodeType": "Block",
										"src": "5138:320:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 391,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5164:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$508",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$508",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5156:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 389,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5156:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 392,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5156:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 393,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5156:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 394,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 381,
																"src": "5181:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5156:30:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5188:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 388,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5148:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5148:81:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 398,
												"nodeType": "ExpressionStatement",
												"src": "5148:81:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 401,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 377,
																	"src": "5258:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 400,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 283,
																"src": "5247:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5247:18:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5267:31:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 399,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5239:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5239:60:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 405,
												"nodeType": "ExpressionStatement",
												"src": "5239:60:2"
											},
											{
												"assignments": [
													407,
													409
												],
												"declarations": [
													{
														"constant": false,
														"id": 407,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5316:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 423,
														"src": "5311:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 406,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5311:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 409,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5338:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 423,
														"src": "5325:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 408,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5325:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 416,
												"initialValue": {
													"arguments": [
														{
															"id": 414,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 379,
															"src": "5378:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 410,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 377,
																"src": "5352:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5352:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 413,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 412,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 381,
																"src": "5371:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5352:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5352:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5310:73:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 418,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "5417:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 419,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "5426:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 420,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 383,
															"src": "5438:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 417,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "5400:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5400:51:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 387,
												"id": 422,
												"nodeType": "Return",
												"src": "5393:58:2"
											}
										]
									},
									"documentation": {
										"id": 375,
										"nodeType": "StructuredDocumentation",
										"src": "4717:237:2",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 424,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4968:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5007:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "4999:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4999:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 379,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5036:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5023:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 378,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5023:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5058:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5050:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5050:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5087:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5073:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 382,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5073:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4989:116:2"
									},
									"returnParameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "5124:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 385,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5124:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5123:14:2"
									},
									"scope": 508,
									"src": "4959:499:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 440,
										"nodeType": "Block",
										"src": "5735:97:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 435,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "5771:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 436,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "5779:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5785:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 434,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															441,
															476
														],
														"referencedDeclaration": 476,
														"src": "5752:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5752:73:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 433,
												"id": 439,
												"nodeType": "Return",
												"src": "5745:80:2"
											}
										]
									},
									"documentation": {
										"id": 425,
										"nodeType": "StructuredDocumentation",
										"src": "5464:166:2",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 441,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5644:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5671:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5663:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 426,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5692:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5679:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 428,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5679:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5662:35:2"
									},
									"returnParameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "5721:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 431,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5721:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5720:14:2"
									},
									"scope": 508,
									"src": "5635:197:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 475,
										"nodeType": "Block",
										"src": "6174:228:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 455,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 444,
																	"src": "6203:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 454,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 283,
																"src": "6192:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6192:18:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6212:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 453,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6184:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6184:67:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 459,
												"nodeType": "ExpressionStatement",
												"src": "6184:67:2"
											},
											{
												"assignments": [
													461,
													463
												],
												"declarations": [
													{
														"constant": false,
														"id": 461,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6268:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 475,
														"src": "6263:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 460,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6263:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 463,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6290:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 475,
														"src": "6277:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 462,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6277:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 468,
												"initialValue": {
													"arguments": [
														{
															"id": 466,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "6322:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 464,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 444,
															"src": "6304:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 465,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6304:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6304:23:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6262:65:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 470,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "6361:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 471,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "6370:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 472,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 448,
															"src": "6382:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 469,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "6344:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6344:51:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 452,
												"id": 474,
												"nodeType": "Return",
												"src": "6337:58:2"
											}
										]
									},
									"documentation": {
										"id": 442,
										"nodeType": "StructuredDocumentation",
										"src": "5838:173:2",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6025:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6061:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6053:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6053:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6090:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6077:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 445,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6077:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6118:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6104:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 447,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6104:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6043:93:2"
									},
									"returnParameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "6160:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 450,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6160:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6159:14:2"
									},
									"scope": 508,
									"src": "6016:386:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "6782:532:2",
										"statements": [
											{
												"condition": {
													"id": 488,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 479,
													"src": "6796:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 504,
													"nodeType": "Block",
													"src": "6853:455:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 492,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 481,
																		"src": "6937:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 493,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6937:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 494,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6957:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6937:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 502,
																"nodeType": "Block",
																"src": "7245:53:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 499,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 483,
																					"src": "7270:12:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 498,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "7263:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7263:20:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 501,
																		"nodeType": "ExpressionStatement",
																		"src": "7263:20:2"
																	}
																]
															},
															"id": 503,
															"nodeType": "IfStatement",
															"src": "6933:365:2",
															"trueBody": {
																"id": 497,
																"nodeType": "Block",
																"src": "6960:279:2",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7080:145:2",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7102:40:2",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7131:10:2"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7125:5:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7125:17:2"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7106:15:2",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7174:2:2",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7178:10:2"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7170:3:2"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7170:19:2"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7191:15:2"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7163:6:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7163:44:2"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7163:44:2"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 481,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7131:10:2",
																				"valueSize": 1
																			},
																			{
																				"declaration": 481,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7178:10:2",
																				"valueSize": 1
																			}
																		],
																		"id": 496,
																		"nodeType": "InlineAssembly",
																		"src": "7071:154:2"
																	}
																]
															}
														}
													]
												},
												"id": 505,
												"nodeType": "IfStatement",
												"src": "6792:516:2",
												"trueBody": {
													"id": 491,
													"nodeType": "Block",
													"src": "6805:42:2",
													"statements": [
														{
															"expression": {
																"id": 489,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 481,
																"src": "6826:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 487,
															"id": 490,
															"nodeType": "Return",
															"src": "6819:17:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 477,
										"nodeType": "StructuredDocumentation",
										"src": "6408:209:2",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "6631:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6662:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6657:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 478,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6657:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6692:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6679:23:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 480,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6679:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6726:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6712:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 482,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6712:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6647:97:2"
									},
									"returnParameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "6768:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 485,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:14:2"
									},
									"scope": 508,
									"src": "6622:692:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 509,
							"src": "194:7122:2",
							"usedErrors": []
						}
					],
					"src": "101:7216:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							508
						],
						"ContextUpgradeable": [
							550
						],
						"Initializable": [
							265
						]
					},
					"id": 551,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 510,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 511,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 551,
							"sourceUnit": 266,
							"src": "110:42:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 513,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 265,
										"src": "691:13:3"
									},
									"id": 514,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:3"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 512,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:3",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 550,
							"linearizedBaseContracts": [
								550,
								265
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 519,
										"nodeType": "Block",
										"src": "763:7:3",
										"statements": []
									},
									"id": 520,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 517,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 516,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "746:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:3"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 515,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:3"
									},
									"returnParameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:3"
									},
									"scope": 550,
									"src": "711:59:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 525,
										"nodeType": "Block",
										"src": "838:7:3",
										"statements": []
									},
									"id": 526,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 523,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 522,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "821:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:3"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:3"
									},
									"returnParameters": {
										"id": 524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:3"
									},
									"scope": 550,
									"src": "776:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "912:34:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 531,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 530,
												"id": 533,
												"nodeType": "Return",
												"src": "922:17:3"
											}
										]
									},
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:3"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "903:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:3"
									},
									"scope": 550,
									"src": "850:96:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 543,
										"nodeType": "Block",
										"src": "1019:32:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 540,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 539,
												"id": 542,
												"nodeType": "Return",
												"src": "1029:15:3"
											}
										]
									},
									"id": 544,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:3"
									},
									"returnParameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 544,
												"src": "1003:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 537,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:3"
									},
									"scope": 550,
									"src": "952:99:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 545,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:3",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 549,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 550,
									"src": "1316:25:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 546,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 548,
										"length": {
											"hexValue": "3530",
											"id": 547,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:3",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:3",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 551,
							"src": "651:693:3",
							"usedErrors": []
						}
					],
					"src": "86:1259:3"
				},
				"id": 3
			},
			"contracts/AutomatedVaultController.sol": {
				"ast": {
					"absolutePath": "contracts/AutomatedVaultController.sol",
					"exportedSymbols": {
						"AutomatedVaultController": [
							973
						],
						"ICreditor": [
							983
						],
						"IDeltaNeutralVault": [
							993
						],
						"OwnableUpgradeable": [
							123
						]
					},
					"id": 974,
					"license": "BUSL",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 552,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "246:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 554,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 974,
							"sourceUnit": 124,
							"src": "273:103:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 553,
										"name": "OwnableUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 123,
										"src": "282:18:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/ICreditor.sol",
							"file": "./interfaces/ICreditor.sol",
							"id": 556,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 974,
							"sourceUnit": 984,
							"src": "380:55:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 555,
										"name": "ICreditor",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 983,
										"src": "389:9:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IDeltaNeutralVault.sol",
							"file": "./interfaces/IDeltaNeutralVault.sol",
							"id": 558,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 974,
							"sourceUnit": 994,
							"src": "437:73:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 557,
										"name": "IDeltaNeutralVault",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 993,
										"src": "446:18:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 560,
										"name": "OwnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 123,
										"src": "661:18:4"
									},
									"id": 561,
									"nodeType": "InheritanceSpecifier",
									"src": "661:18:4"
								}
							],
							"canonicalName": "AutomatedVaultController",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 559,
								"nodeType": "StructuredDocumentation",
								"src": "514:110:4",
								"text": "@title AutomatedVaultController - Controller how much investor can invest in the private automated vault"
							},
							"fullyImplemented": true,
							"id": 973,
							"linearizedBaseContracts": [
								973,
								123,
								550,
								265
							],
							"name": "AutomatedVaultController",
							"nameLocation": "633:24:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "2abc0e25ec4d3cb00cd094f0bca86e790d0f6455cf9064345274fc97586b31c5",
									"id": 569,
									"name": "LogSetPrivateVaults",
									"nameLocation": "712:19:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 563,
												"indexed": true,
												"mutability": "mutable",
												"name": "_caller",
												"nameLocation": "748:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "732:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 562,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "732:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 567,
												"indexed": false,
												"mutability": "mutable",
												"name": "_vaults",
												"nameLocation": "778:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "757:28:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
													"typeString": "contract IDeltaNeutralVault[]"
												},
												"typeName": {
													"baseType": {
														"id": 565,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 564,
															"name": "IDeltaNeutralVault",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 993,
															"src": "757:18:4"
														},
														"referencedDeclaration": 993,
														"src": "757:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IDeltaNeutralVault_$993",
															"typeString": "contract IDeltaNeutralVault"
														}
													},
													"id": 566,
													"nodeType": "ArrayTypeName",
													"src": "757:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage_ptr",
														"typeString": "contract IDeltaNeutralVault[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "731:55:4"
									},
									"src": "706:81:4"
								},
								{
									"anonymous": false,
									"eventSelector": "e1c8f0c34d1ebb59573a7f5d542c350a1762869a702dd1ecea79c1dc6b44d865",
									"id": 577,
									"name": "LogSetCreditors",
									"nameLocation": "797:15:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"indexed": true,
												"mutability": "mutable",
												"name": "_caller",
												"nameLocation": "829:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "813:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 570,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "813:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 575,
												"indexed": false,
												"mutability": "mutable",
												"name": "_creditors",
												"nameLocation": "850:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "838:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
													"typeString": "contract ICreditor[]"
												},
												"typeName": {
													"baseType": {
														"id": 573,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 572,
															"name": "ICreditor",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 983,
															"src": "838:9:4"
														},
														"referencedDeclaration": 983,
														"src": "838:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ICreditor_$983",
															"typeString": "contract ICreditor"
														}
													},
													"id": 574,
													"nodeType": "ArrayTypeName",
													"src": "838:11:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage_ptr",
														"typeString": "contract ICreditor[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "812:49:4"
									},
									"src": "791:71:4"
								},
								{
									"constant": false,
									"functionSelector": "71bc16b5",
									"id": 581,
									"mutability": "mutable",
									"name": "creditors",
									"nameLocation": "917:9:4",
									"nodeType": "VariableDeclaration",
									"scope": 973,
									"src": "898:28:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage",
										"typeString": "contract ICreditor[]"
									},
									"typeName": {
										"baseType": {
											"id": 579,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 578,
												"name": "ICreditor",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 983,
												"src": "898:9:4"
											},
											"referencedDeclaration": 983,
											"src": "898:9:4",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ICreditor_$983",
												"typeString": "contract ICreditor"
											}
										},
										"id": 580,
										"nodeType": "ArrayTypeName",
										"src": "898:11:4",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage_ptr",
											"typeString": "contract ICreditor[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "87f049e4",
									"id": 585,
									"mutability": "mutable",
									"name": "privateVaults",
									"nameLocation": "959:13:4",
									"nodeType": "VariableDeclaration",
									"scope": 973,
									"src": "931:41:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage",
										"typeString": "contract IDeltaNeutralVault[]"
									},
									"typeName": {
										"baseType": {
											"id": 583,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 582,
												"name": "IDeltaNeutralVault",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 993,
												"src": "931:18:4"
											},
											"referencedDeclaration": 993,
											"src": "931:18:4",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IDeltaNeutralVault_$993",
												"typeString": "contract IDeltaNeutralVault"
											}
										},
										"id": 584,
										"nodeType": "ArrayTypeName",
										"src": "931:20:4",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage_ptr",
											"typeString": "contract IDeltaNeutralVault[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9f7b7ead",
									"id": 591,
									"mutability": "mutable",
									"name": "userVaultShares",
									"nameLocation": "1032:15:4",
									"nodeType": "VariableDeclaration",
									"scope": 973,
									"src": "977:70:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 590,
										"keyType": {
											"id": 586,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "985:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "977:47:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 589,
											"keyType": {
												"id": 587,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1004:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "996:27:4",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 588,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1015:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 596,
										"nodeType": "Block",
										"src": "1080:2:4",
										"statements": []
									},
									"id": 597,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"id": 594,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 593,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 167,
												"src": "1068:11:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1068:11:4"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1065:2:4"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1080:0:4"
									},
									"scope": 973,
									"src": "1054:28:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 675,
										"nodeType": "Block",
										"src": "1367:483:4",
										"statements": [
											{
												"assignments": [
													612
												],
												"declarations": [
													{
														"constant": false,
														"id": 612,
														"mutability": "mutable",
														"name": "_creditorLength",
														"nameLocation": "1403:15:4",
														"nodeType": "VariableDeclaration",
														"scope": 675,
														"src": "1395:23:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 611,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1395:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 615,
												"initialValue": {
													"expression": {
														"id": 613,
														"name": "_creditors",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 602,
														"src": "1421:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
															"typeString": "contract ICreditor[] memory"
														}
													},
													"id": 614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "1421:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1395:43:4"
											},
											{
												"body": {
													"id": 636,
													"nodeType": "Block",
													"src": "1492:57:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 632,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1538:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 631,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1530:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 630,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1530:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 633,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1530:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"baseExpression": {
																			"id": 626,
																			"name": "_creditors",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 602,
																			"src": "1501:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
																				"typeString": "contract ICreditor[] memory"
																			}
																		},
																		"id": 628,
																		"indexExpression": {
																			"id": 627,
																			"name": "_i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 617,
																			"src": "1512:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1501:14:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ICreditor_$983",
																			"typeString": "contract ICreditor"
																		}
																	},
																	"id": 629,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "getUserCredit",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 982,
																	"src": "1501:28:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view external returns (uint256)"
																	}
																},
																"id": 634,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1501:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 635,
															"nodeType": "ExpressionStatement",
															"src": "1501:40:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 620,
														"name": "_i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 617,
														"src": "1464:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 621,
														"name": "_creditorLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 612,
														"src": "1469:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1464:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 637,
												"initializationExpression": {
													"assignments": [
														617
													],
													"declarations": [
														{
															"constant": false,
															"id": 617,
															"mutability": "mutable",
															"name": "_i",
															"nameLocation": "1456:2:4",
															"nodeType": "VariableDeclaration",
															"scope": 637,
															"src": "1450:8:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 616,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "1450:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 619,
													"initialValue": {
														"hexValue": "30",
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1461:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1450:12:4"
												},
												"loopExpression": {
													"expression": {
														"id": 624,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1486:4:4",
														"subExpression": {
															"id": 623,
															"name": "_i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 617,
															"src": "1486:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 625,
													"nodeType": "ExpressionStatement",
													"src": "1486:4:4"
												},
												"nodeType": "ForStatement",
												"src": "1445:104:4"
											},
											{
												"assignments": [
													639
												],
												"declarations": [
													{
														"constant": false,
														"id": 639,
														"mutability": "mutable",
														"name": "_privateVaultLength",
														"nameLocation": "1565:19:4",
														"nodeType": "VariableDeclaration",
														"scope": 675,
														"src": "1557:27:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 638,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1557:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 642,
												"initialValue": {
													"expression": {
														"id": 640,
														"name": "_privateVaults",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "1587:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
															"typeString": "contract IDeltaNeutralVault[] memory"
														}
													},
													"id": 641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "1587:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1557:51:4"
											},
											{
												"body": {
													"id": 660,
													"nodeType": "Block",
													"src": "1666:54:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "31653138",
																		"id": 657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1707:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1000000000000000000_by_1",
																			"typeString": "int_const 1000000000000000000"
																		},
																		"value": "1e18"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1000000000000000000_by_1",
																			"typeString": "int_const 1000000000000000000"
																		}
																	],
																	"expression": {
																		"baseExpression": {
																			"id": 653,
																			"name": "_privateVaults",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 606,
																			"src": "1675:14:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
																				"typeString": "contract IDeltaNeutralVault[] memory"
																			}
																		},
																		"id": 655,
																		"indexExpression": {
																			"id": 654,
																			"name": "_i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 644,
																			"src": "1690:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1675:18:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IDeltaNeutralVault_$993",
																			"typeString": "contract IDeltaNeutralVault"
																		}
																	},
																	"id": 656,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "shareToValue",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 992,
																	"src": "1675:31:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view external returns (uint256)"
																	}
																},
																"id": 658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1675:37:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 659,
															"nodeType": "ExpressionStatement",
															"src": "1675:37:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 647,
														"name": "_i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 644,
														"src": "1634:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 648,
														"name": "_privateVaultLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "1639:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1634:24:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 661,
												"initializationExpression": {
													"assignments": [
														644
													],
													"declarations": [
														{
															"constant": false,
															"id": 644,
															"mutability": "mutable",
															"name": "_i",
															"nameLocation": "1626:2:4",
															"nodeType": "VariableDeclaration",
															"scope": 661,
															"src": "1620:8:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 643,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "1620:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 646,
													"initialValue": {
														"hexValue": "30",
														"id": 645,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1631:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1620:12:4"
												},
												"loopExpression": {
													"expression": {
														"id": 651,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1660:4:4",
														"subExpression": {
															"id": 650,
															"name": "_i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "1660:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 652,
													"nodeType": "ExpressionStatement",
													"src": "1660:4:4"
												},
												"nodeType": "ForStatement",
												"src": "1615:105:4"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 662,
															"name": "OwnableUpgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 123,
															"src": "1743:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_OwnableUpgradeable_$123_$",
																"typeString": "type(contract OwnableUpgradeable)"
															}
														},
														"id": 664,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "__Ownable_init",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 26,
														"src": "1743:33:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1743:35:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 666,
												"nodeType": "ExpressionStatement",
												"src": "1743:35:4"
											},
											{
												"expression": {
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 667,
														"name": "creditors",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 581,
														"src": "1785:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage",
															"typeString": "contract ICreditor[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 668,
														"name": "_creditors",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 602,
														"src": "1797:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
															"typeString": "contract ICreditor[] memory"
														}
													},
													"src": "1785:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage",
														"typeString": "contract ICreditor[] storage ref"
													}
												},
												"id": 670,
												"nodeType": "ExpressionStatement",
												"src": "1785:22:4"
											},
											{
												"expression": {
													"id": 673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 671,
														"name": "privateVaults",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 585,
														"src": "1814:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage",
															"typeString": "contract IDeltaNeutralVault[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 672,
														"name": "_privateVaults",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "1830:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
															"typeString": "contract IDeltaNeutralVault[] memory"
														}
													},
													"src": "1814:30:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage",
														"typeString": "contract IDeltaNeutralVault[] storage ref"
													}
												},
												"id": 674,
												"nodeType": "ExpressionStatement",
												"src": "1814:30:4"
											}
										]
									},
									"documentation": {
										"id": 598,
										"nodeType": "StructuredDocumentation",
										"src": "1088:159:4",
										"text": "@notice Initialize Automated Vault Controller\n @param _creditors list of credit sources\n @param _privateVaults list of private automated vaults"
									},
									"functionSelector": "73cf25f8",
									"id": 676,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 609,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 608,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 167,
												"src": "1355:11:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1355:11:4"
										}
									],
									"name": "initialize",
									"nameLocation": "1260:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "_creditors",
												"nameLocation": "1290:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "1271:29:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
													"typeString": "contract ICreditor[]"
												},
												"typeName": {
													"baseType": {
														"id": 600,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 599,
															"name": "ICreditor",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 983,
															"src": "1271:9:4"
														},
														"referencedDeclaration": 983,
														"src": "1271:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ICreditor_$983",
															"typeString": "contract ICreditor"
														}
													},
													"id": 601,
													"nodeType": "ArrayTypeName",
													"src": "1271:11:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage_ptr",
														"typeString": "contract ICreditor[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "_privateVaults",
												"nameLocation": "1330:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "1302:42:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
													"typeString": "contract IDeltaNeutralVault[]"
												},
												"typeName": {
													"baseType": {
														"id": 604,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 603,
															"name": "IDeltaNeutralVault",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 993,
															"src": "1302:18:4"
														},
														"referencedDeclaration": 993,
														"src": "1302:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IDeltaNeutralVault_$993",
															"typeString": "contract IDeltaNeutralVault"
														}
													},
													"id": 605,
													"nodeType": "ArrayTypeName",
													"src": "1302:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage_ptr",
														"typeString": "contract IDeltaNeutralVault[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1270:75:4"
									},
									"returnParameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1367:0:4"
									},
									"scope": 973,
									"src": "1251:599:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 718,
										"nodeType": "Block",
										"src": "2054:296:4",
										"statements": [
											{
												"assignments": [
													685
												],
												"declarations": [
													{
														"constant": false,
														"id": 685,
														"mutability": "mutable",
														"name": "_total",
														"nameLocation": "2069:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 718,
														"src": "2061:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 684,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2061:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 686,
												"nodeType": "VariableDeclarationStatement",
												"src": "2061:14:4"
											},
											{
												"assignments": [
													688
												],
												"declarations": [
													{
														"constant": false,
														"id": 688,
														"mutability": "mutable",
														"name": "_creditorLength",
														"nameLocation": "2090:15:4",
														"nodeType": "VariableDeclaration",
														"scope": 718,
														"src": "2082:23:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 687,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2082:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 691,
												"initialValue": {
													"expression": {
														"id": 689,
														"name": "creditors",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 581,
														"src": "2108:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage",
															"typeString": "contract ICreditor[] storage ref"
														}
													},
													"id": 690,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "2108:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2082:42:4"
											},
											{
												"body": {
													"id": 714,
													"nodeType": "Block",
													"src": "2174:151:4",
													"statements": [
														{
															"expression": {
																"id": 708,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 699,
																	"name": "_total",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 685,
																	"src": "2183:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 707,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 700,
																		"name": "_total",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 685,
																		"src": "2192:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 705,
																				"name": "_user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 679,
																				"src": "2229:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"expression": {
																				"baseExpression": {
																					"id": 701,
																					"name": "creditors",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 581,
																					"src": "2201:9:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage",
																						"typeString": "contract ICreditor[] storage ref"
																					}
																				},
																				"id": 703,
																				"indexExpression": {
																					"id": 702,
																					"name": "_i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 693,
																					"src": "2211:2:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2201:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ICreditor_$983",
																					"typeString": "contract ICreditor"
																				}
																			},
																			"id": 704,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "getUserCredit",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 982,
																			"src": "2201:27:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																				"typeString": "function (address) view external returns (uint256)"
																			}
																		},
																		"id": 706,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2201:34:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2192:43:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2183:52:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 709,
															"nodeType": "ExpressionStatement",
															"src": "2183:52:4"
														},
														{
															"id": 713,
															"nodeType": "UncheckedBlock",
															"src": "2283:35:4",
															"statements": [
																{
																	"expression": {
																		"id": 711,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "2304:4:4",
																		"subExpression": {
																			"id": 710,
																			"name": "_i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 693,
																			"src": "2304:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"id": 712,
																	"nodeType": "ExpressionStatement",
																	"src": "2304:4:4"
																}
															]
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 696,
														"name": "_i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 693,
														"src": "2150:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 697,
														"name": "_creditorLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 688,
														"src": "2155:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2150:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 715,
												"initializationExpression": {
													"assignments": [
														693
													],
													"declarations": [
														{
															"constant": false,
															"id": 693,
															"mutability": "mutable",
															"name": "_i",
															"nameLocation": "2142:2:4",
															"nodeType": "VariableDeclaration",
															"scope": 715,
															"src": "2136:8:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 692,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "2136:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 695,
													"initialValue": {
														"hexValue": "30",
														"id": 694,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2147:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2136:12:4"
												},
												"nodeType": "ForStatement",
												"src": "2131:194:4"
											},
											{
												"expression": {
													"id": 716,
													"name": "_total",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 685,
													"src": "2338:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 683,
												"id": 717,
												"nodeType": "Return",
												"src": "2331:13:4"
											}
										]
									},
									"documentation": {
										"id": 677,
										"nodeType": "StructuredDocumentation",
										"src": "1856:128:4",
										"text": "@notice Get total credit for this user\n @param _user address of user.\n @return _total user's credit in USD value"
									},
									"functionSelector": "f220d16c",
									"id": 719,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalCredit",
									"nameLocation": "1997:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "2017:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "2009:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2009:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2008:15:4"
									},
									"returnParameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 719,
												"src": "2045:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 681,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2045:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2044:9:4"
									},
									"scope": 973,
									"src": "1988:362:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 776,
										"nodeType": "Block",
										"src": "2603:399:4",
										"statements": [
											{
												"assignments": [
													728
												],
												"declarations": [
													{
														"constant": false,
														"id": 728,
														"mutability": "mutable",
														"name": "_total",
														"nameLocation": "2618:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 776,
														"src": "2610:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 727,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2610:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 729,
												"nodeType": "VariableDeclarationStatement",
												"src": "2610:14:4"
											},
											{
												"assignments": [
													731
												],
												"declarations": [
													{
														"constant": false,
														"id": 731,
														"mutability": "mutable",
														"name": "_privateVaultLength",
														"nameLocation": "2639:19:4",
														"nodeType": "VariableDeclaration",
														"scope": 776,
														"src": "2631:27:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 730,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2631:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 734,
												"initialValue": {
													"expression": {
														"id": 732,
														"name": "privateVaults",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 585,
														"src": "2661:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage",
															"typeString": "contract IDeltaNeutralVault[] storage ref"
														}
													},
													"id": 733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "2661:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2631:50:4"
											},
											{
												"body": {
													"id": 772,
													"nodeType": "Block",
													"src": "2735:240:4",
													"statements": [
														{
															"assignments": [
																743
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 743,
																	"mutability": "mutable",
																	"name": "_share",
																	"nameLocation": "2752:6:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 772,
																	"src": "2744:14:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 742,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2744:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 754,
															"initialValue": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 744,
																		"name": "userVaultShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 591,
																		"src": "2761:15:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(address => uint256))"
																		}
																	},
																	"id": 746,
																	"indexExpression": {
																		"id": 745,
																		"name": "_user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "2777:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2761:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 753,
																"indexExpression": {
																	"arguments": [
																		{
																			"baseExpression": {
																				"id": 749,
																				"name": "privateVaults",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 585,
																				"src": "2792:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage",
																					"typeString": "contract IDeltaNeutralVault[] storage ref"
																				}
																			},
																			"id": 751,
																			"indexExpression": {
																				"id": 750,
																				"name": "_i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 736,
																				"src": "2806:2:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2792:17:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IDeltaNeutralVault_$993",
																				"typeString": "contract IDeltaNeutralVault"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IDeltaNeutralVault_$993",
																				"typeString": "contract IDeltaNeutralVault"
																			}
																		],
																		"id": 748,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2784:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 747,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2784:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 752,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2784:26:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2761:50:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "2744:67:4"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 757,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 755,
																	"name": "_share",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 743,
																	"src": "2824:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 756,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2834:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "2824:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 767,
															"nodeType": "IfStatement",
															"src": "2820:65:4",
															"trueBody": {
																"expression": {
																	"id": 765,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 758,
																		"name": "_total",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 728,
																		"src": "2837:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "+=",
																	"rightHandSide": {
																		"arguments": [
																			{
																				"id": 763,
																				"name": "_share",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 743,
																				"src": "2878:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"baseExpression": {
																					"id": 759,
																					"name": "privateVaults",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 585,
																					"src": "2847:13:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage",
																						"typeString": "contract IDeltaNeutralVault[] storage ref"
																					}
																				},
																				"id": 761,
																				"indexExpression": {
																					"id": 760,
																					"name": "_i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 736,
																					"src": "2861:2:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2847:17:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IDeltaNeutralVault_$993",
																					"typeString": "contract IDeltaNeutralVault"
																				}
																			},
																			"id": 762,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "shareToValue",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 992,
																			"src": "2847:30:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) view external returns (uint256)"
																			}
																		},
																		"id": 764,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2847:38:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2837:48:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 766,
																"nodeType": "ExpressionStatement",
																"src": "2837:48:4"
															}
														},
														{
															"id": 771,
															"nodeType": "UncheckedBlock",
															"src": "2933:35:4",
															"statements": [
																{
																	"expression": {
																		"id": 769,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "2954:4:4",
																		"subExpression": {
																			"id": 768,
																			"name": "_i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 736,
																			"src": "2954:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"id": 770,
																	"nodeType": "ExpressionStatement",
																	"src": "2954:4:4"
																}
															]
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 739,
														"name": "_i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 736,
														"src": "2707:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 740,
														"name": "_privateVaultLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 731,
														"src": "2712:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2707:24:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 773,
												"initializationExpression": {
													"assignments": [
														736
													],
													"declarations": [
														{
															"constant": false,
															"id": 736,
															"mutability": "mutable",
															"name": "_i",
															"nameLocation": "2699:2:4",
															"nodeType": "VariableDeclaration",
															"scope": 773,
															"src": "2693:8:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 735,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "2693:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 738,
													"initialValue": {
														"hexValue": "30",
														"id": 737,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2704:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2693:12:4"
												},
												"nodeType": "ForStatement",
												"src": "2688:287:4"
											},
											{
												"expression": {
													"id": 774,
													"name": "_total",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 728,
													"src": "2990:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 726,
												"id": 775,
												"nodeType": "Return",
												"src": "2983:13:4"
											}
										]
									},
									"documentation": {
										"id": 720,
										"nodeType": "StructuredDocumentation",
										"src": "2356:178:4",
										"text": "@notice Get used credit for this user\n @param _user address of user.\n @return _total user's used credit in USD value from depositing into private automated vaults"
									},
									"functionSelector": "7bf962de",
									"id": 777,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "usedCredit",
									"nameLocation": "2547:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "2566:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "2558:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 721,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2558:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2557:15:4"
									},
									"returnParameters": {
										"id": 726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 725,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "2594:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 724,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2594:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2593:9:4"
									},
									"scope": 973,
									"src": "2538:464:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 806,
										"nodeType": "Block",
										"src": "3223:137:4",
										"statements": [
											{
												"assignments": [
													786
												],
												"declarations": [
													{
														"constant": false,
														"id": 786,
														"mutability": "mutable",
														"name": "_total",
														"nameLocation": "3238:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 806,
														"src": "3230:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 785,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3230:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 790,
												"initialValue": {
													"arguments": [
														{
															"id": 788,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 780,
															"src": "3259:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 787,
														"name": "totalCredit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 719,
														"src": "3247:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3247:18:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3230:35:4"
											},
											{
												"assignments": [
													792
												],
												"declarations": [
													{
														"constant": false,
														"id": 792,
														"mutability": "mutable",
														"name": "_used",
														"nameLocation": "3280:5:4",
														"nodeType": "VariableDeclaration",
														"scope": 806,
														"src": "3272:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 791,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3272:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 796,
												"initialValue": {
													"arguments": [
														{
															"id": 794,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 780,
															"src": "3299:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 793,
														"name": "usedCredit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 777,
														"src": "3288:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3288:17:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3272:33:4"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 799,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 797,
															"name": "_total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 786,
															"src": "3319:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 798,
															"name": "_used",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 792,
															"src": "3328:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3319:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "30",
														"id": 803,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3353:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"id": 804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3319:35:4",
													"trueExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 802,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 800,
															"name": "_total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 786,
															"src": "3336:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 801,
															"name": "_used",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 792,
															"src": "3345:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3336:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 784,
												"id": 805,
												"nodeType": "Return",
												"src": "3312:42:4"
											}
										]
									},
									"documentation": {
										"id": 778,
										"nodeType": "StructuredDocumentation",
										"src": "3008:141:4",
										"text": "@notice Get availableCredit credit for this user\n @param _user address of user.\n @return _total remaining credit of this user"
									},
									"functionSelector": "5886216f",
									"id": 807,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "availableCredit",
									"nameLocation": "3162:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 781,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "3186:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "3178:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 779,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3178:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3177:15:4"
									},
									"returnParameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "3214:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 782,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3214:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3213:9:4"
									},
									"scope": 973,
									"src": "3153:207:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 852,
										"nodeType": "Block",
										"src": "3567:407:4",
										"statements": [
											{
												"assignments": [
													818
												],
												"declarations": [
													{
														"constant": false,
														"id": 818,
														"mutability": "mutable",
														"name": "_newPrivateVaultLength",
														"nameLocation": "3603:22:4",
														"nodeType": "VariableDeclaration",
														"scope": 852,
														"src": "3595:30:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 817,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3595:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 821,
												"initialValue": {
													"expression": {
														"id": 819,
														"name": "_newPrivateVaults",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 812,
														"src": "3628:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
															"typeString": "contract IDeltaNeutralVault[] memory"
														}
													},
													"id": 820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "3628:24:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3595:57:4"
											},
											{
												"body": {
													"id": 840,
													"nodeType": "Block",
													"src": "3709:139:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "31653138",
																		"id": 833,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3753:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1000000000000000000_by_1",
																			"typeString": "int_const 1000000000000000000"
																		},
																		"value": "1e18"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1000000000000000000_by_1",
																			"typeString": "int_const 1000000000000000000"
																		}
																	],
																	"expression": {
																		"baseExpression": {
																			"id": 829,
																			"name": "_newPrivateVaults",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 812,
																			"src": "3718:17:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
																				"typeString": "contract IDeltaNeutralVault[] memory"
																			}
																		},
																		"id": 831,
																		"indexExpression": {
																			"id": 830,
																			"name": "_i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 823,
																			"src": "3736:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3718:21:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IDeltaNeutralVault_$993",
																			"typeString": "contract IDeltaNeutralVault"
																		}
																	},
																	"id": 832,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "shareToValue",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 992,
																	"src": "3718:34:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view external returns (uint256)"
																	}
																},
																"id": 834,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3718:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 835,
															"nodeType": "ExpressionStatement",
															"src": "3718:40:4"
														},
														{
															"id": 839,
															"nodeType": "UncheckedBlock",
															"src": "3806:35:4",
															"statements": [
																{
																	"expression": {
																		"id": 837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "3827:4:4",
																		"subExpression": {
																			"id": 836,
																			"name": "_i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 823,
																			"src": "3827:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"id": 838,
																	"nodeType": "ExpressionStatement",
																	"src": "3827:4:4"
																}
															]
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 828,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 826,
														"name": "_i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "3678:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 827,
														"name": "_newPrivateVaultLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 818,
														"src": "3683:22:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3678:27:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 841,
												"initializationExpression": {
													"assignments": [
														823
													],
													"declarations": [
														{
															"constant": false,
															"id": 823,
															"mutability": "mutable",
															"name": "_i",
															"nameLocation": "3670:2:4",
															"nodeType": "VariableDeclaration",
															"scope": 841,
															"src": "3664:8:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 822,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "3664:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 825,
													"initialValue": {
														"hexValue": "30",
														"id": 824,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3675:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "3664:12:4"
												},
												"nodeType": "ForStatement",
												"src": "3659:189:4"
											},
											{
												"expression": {
													"id": 844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 842,
														"name": "privateVaults",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 585,
														"src": "3871:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage",
															"typeString": "contract IDeltaNeutralVault[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 843,
														"name": "_newPrivateVaults",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 812,
														"src": "3887:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
															"typeString": "contract IDeltaNeutralVault[] memory"
														}
													},
													"src": "3871:33:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage",
														"typeString": "contract IDeltaNeutralVault[] storage ref"
													}
												},
												"id": 845,
												"nodeType": "ExpressionStatement",
												"src": "3871:33:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 847,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3938:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3938:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 849,
															"name": "_newPrivateVaults",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 812,
															"src": "3950:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
																"typeString": "contract IDeltaNeutralVault[] memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
																"typeString": "contract IDeltaNeutralVault[] memory"
															}
														],
														"id": 846,
														"name": "LogSetPrivateVaults",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 569,
														"src": "3918:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr_$returns$__$",
															"typeString": "function (address,contract IDeltaNeutralVault[] memory)"
														}
													},
													"id": 850,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3918:50:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 851,
												"nodeType": "EmitStatement",
												"src": "3913:55:4"
											}
										]
									},
									"documentation": {
										"id": 808,
										"nodeType": "StructuredDocumentation",
										"src": "3366:105:4",
										"text": "@notice set private automated vaults\n @param _newPrivateVaults list of private automated vaults"
									},
									"functionSelector": "4fe01823",
									"id": 853,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 815,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 814,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "3557:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "3557:9:4"
										}
									],
									"name": "setPrivateVaults",
									"nameLocation": "3484:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 812,
												"mutability": "mutable",
												"name": "_newPrivateVaults",
												"nameLocation": "3529:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 853,
												"src": "3501:45:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_memory_ptr",
													"typeString": "contract IDeltaNeutralVault[]"
												},
												"typeName": {
													"baseType": {
														"id": 810,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 809,
															"name": "IDeltaNeutralVault",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 993,
															"src": "3501:18:4"
														},
														"referencedDeclaration": 993,
														"src": "3501:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IDeltaNeutralVault_$993",
															"typeString": "contract IDeltaNeutralVault"
														}
													},
													"id": 811,
													"nodeType": "ArrayTypeName",
													"src": "3501:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IDeltaNeutralVault_$993_$dyn_storage_ptr",
														"typeString": "contract IDeltaNeutralVault[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:47:4"
									},
									"returnParameters": {
										"id": 816,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3567:0:4"
									},
									"scope": 973,
									"src": "3475:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 901,
										"nodeType": "Block",
										"src": "4150:382:4",
										"statements": [
											{
												"assignments": [
													864
												],
												"declarations": [
													{
														"constant": false,
														"id": 864,
														"mutability": "mutable",
														"name": "_newCreditorLength",
														"nameLocation": "4186:18:4",
														"nodeType": "VariableDeclaration",
														"scope": 901,
														"src": "4178:26:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 863,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4178:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 867,
												"initialValue": {
													"expression": {
														"id": 865,
														"name": "_newCreditors",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "4207:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
															"typeString": "contract ICreditor[] memory"
														}
													},
													"id": 866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4207:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4178:49:4"
											},
											{
												"body": {
													"id": 889,
													"nodeType": "Block",
													"src": "4280:142:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 881,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4329:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 880,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4321:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 879,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4321:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4321:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"baseExpression": {
																			"id": 875,
																			"name": "_newCreditors",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 858,
																			"src": "4289:13:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
																				"typeString": "contract ICreditor[] memory"
																			}
																		},
																		"id": 877,
																		"indexExpression": {
																			"id": 876,
																			"name": "_i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 869,
																			"src": "4303:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4289:17:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ICreditor_$983",
																			"typeString": "contract ICreditor"
																		}
																	},
																	"id": 878,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "getUserCredit",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 982,
																	"src": "4289:31:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view external returns (uint256)"
																	}
																},
																"id": 883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4289:43:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 884,
															"nodeType": "ExpressionStatement",
															"src": "4289:43:4"
														},
														{
															"id": 888,
															"nodeType": "UncheckedBlock",
															"src": "4380:35:4",
															"statements": [
																{
																	"expression": {
																		"id": 886,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "4401:4:4",
																		"subExpression": {
																			"id": 885,
																			"name": "_i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 869,
																			"src": "4401:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"id": 887,
																	"nodeType": "ExpressionStatement",
																	"src": "4401:4:4"
																}
															]
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 872,
														"name": "_i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "4253:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 873,
														"name": "_newCreditorLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 864,
														"src": "4258:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4253:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 890,
												"initializationExpression": {
													"assignments": [
														869
													],
													"declarations": [
														{
															"constant": false,
															"id": 869,
															"mutability": "mutable",
															"name": "_i",
															"nameLocation": "4245:2:4",
															"nodeType": "VariableDeclaration",
															"scope": 890,
															"src": "4239:8:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"typeName": {
																"id": 868,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "4239:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 871,
													"initialValue": {
														"hexValue": "30",
														"id": 870,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4250:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4239:12:4"
												},
												"nodeType": "ForStatement",
												"src": "4234:188:4"
											},
											{
												"expression": {
													"id": 893,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 891,
														"name": "creditors",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 581,
														"src": "4445:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage",
															"typeString": "contract ICreditor[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 892,
														"name": "_newCreditors",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "4457:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
															"typeString": "contract ICreditor[] memory"
														}
													},
													"src": "4445:25:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage",
														"typeString": "contract ICreditor[] storage ref"
													}
												},
												"id": 894,
												"nodeType": "ExpressionStatement",
												"src": "4445:25:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 896,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4500:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 897,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4500:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 898,
															"name": "_newCreditors",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "4512:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
																"typeString": "contract ICreditor[] memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
																"typeString": "contract ICreditor[] memory"
															}
														],
														"id": 895,
														"name": "LogSetCreditors",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 577,
														"src": "4484:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr_$returns$__$",
															"typeString": "function (address,contract ICreditor[] memory)"
														}
													},
													"id": 899,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4484:42:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 900,
												"nodeType": "EmitStatement",
												"src": "4479:47:4"
											}
										]
									},
									"documentation": {
										"id": 854,
										"nodeType": "StructuredDocumentation",
										"src": "3980:91:4",
										"text": "@notice set private automated vaults\n @param _newCreditors list of credit sources"
									},
									"functionSelector": "e7d325a1",
									"id": 902,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 861,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 860,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "4140:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "4140:9:4"
										}
									],
									"name": "setCreditors",
									"nameLocation": "4084:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 858,
												"mutability": "mutable",
												"name": "_newCreditors",
												"nameLocation": "4116:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "4097:32:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_memory_ptr",
													"typeString": "contract ICreditor[]"
												},
												"typeName": {
													"baseType": {
														"id": 856,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 855,
															"name": "ICreditor",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 983,
															"src": "4097:9:4"
														},
														"referencedDeclaration": 983,
														"src": "4097:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ICreditor_$983",
															"typeString": "contract ICreditor"
														}
													},
													"id": 857,
													"nodeType": "ArrayTypeName",
													"src": "4097:11:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ICreditor_$983_$dyn_storage_ptr",
														"typeString": "contract ICreditor[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4096:34:4"
									},
									"returnParameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4150:0:4"
									},
									"scope": 973,
									"src": "4075:457:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 919,
										"nodeType": "Block",
										"src": "4762:109:4",
										"statements": [
											{
												"expression": {
													"id": 917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 910,
																"name": "userVaultShares",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 591,
																"src": "4815:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 914,
															"indexExpression": {
																"id": 911,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 905,
																"src": "4831:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4815:22:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 915,
														"indexExpression": {
															"expression": {
																"id": 912,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4838:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 913,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4838:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4815:34:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 916,
														"name": "_shareAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 907,
														"src": "4853:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4815:50:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 918,
												"nodeType": "ExpressionStatement",
												"src": "4815:50:4"
											}
										]
									},
									"documentation": {
										"id": 903,
										"nodeType": "StructuredDocumentation",
										"src": "4538:155:4",
										"text": "@notice record user's automated vault's share from deposit\n @param _user share owner\n @param _shareAmount amount of automated vault's share"
									},
									"functionSelector": "2bf9518c",
									"id": 920,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "onDeposit",
									"nameLocation": "4706:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "4724:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "4716:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 904,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4716:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "_shareAmount",
												"nameLocation": "4739:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 920,
												"src": "4731:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 906,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4731:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4715:37:4"
									},
									"returnParameters": {
										"id": 909,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4762:0:4"
									},
									"scope": 973,
									"src": "4697:174:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 954,
										"nodeType": "Block",
										"src": "5115:170:4",
										"statements": [
											{
												"expression": {
													"id": 952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 928,
																"name": "userVaultShares",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 591,
																"src": "5122:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 932,
															"indexExpression": {
																"id": 929,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 923,
																"src": "5138:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5122:22:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 933,
														"indexExpression": {
															"expression": {
																"id": 930,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5145:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 931,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5145:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5122:34:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 941,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 934,
																		"name": "userVaultShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 591,
																		"src": "5159:15:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(address => uint256))"
																		}
																	},
																	"id": 936,
																	"indexExpression": {
																		"id": 935,
																		"name": "_user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 923,
																		"src": "5175:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5159:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 939,
																"indexExpression": {
																	"expression": {
																		"id": 937,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5182:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 938,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5182:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5159:34:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 940,
																"name": "_shareAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 925,
																"src": "5197:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5159:50:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 950,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 943,
																		"name": "userVaultShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 591,
																		"src": "5230:15:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(address => uint256))"
																		}
																	},
																	"id": 945,
																	"indexExpression": {
																		"id": 944,
																		"name": "_user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 923,
																		"src": "5246:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5230:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 948,
																"indexExpression": {
																	"expression": {
																		"id": 946,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5253:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 947,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5253:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5230:34:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 949,
																"name": "_shareAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 925,
																"src": "5267:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5230:49:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 951,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "5159:120:4",
														"trueExpression": {
															"hexValue": "30",
															"id": 942,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5219:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5122:157:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 953,
												"nodeType": "ExpressionStatement",
												"src": "5122:157:4"
											}
										]
									},
									"documentation": {
										"id": 921,
										"nodeType": "StructuredDocumentation",
										"src": "4877:168:4",
										"text": "@notice update user's automated vault's share from withdrawal\n @param _user share owner\n @param _shareAmount amount of automated vault's share withdrawn"
									},
									"functionSelector": "ccad973d",
									"id": 955,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "onWithdraw",
									"nameLocation": "5058:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "5077:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "5069:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 922,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5069:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "_shareAmount",
												"nameLocation": "5092:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "5084:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5084:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5068:37:4"
									},
									"returnParameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5115:0:4"
									},
									"scope": 973,
									"src": "5049:236:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 971,
										"nodeType": "Block",
										"src": "5498:50:4",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 965,
															"name": "userVaultShares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 591,
															"src": "5512:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 967,
														"indexExpression": {
															"id": 966,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 958,
															"src": "5528:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5512:22:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 969,
													"indexExpression": {
														"id": 968,
														"name": "_vault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 960,
														"src": "5535:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5512:30:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 964,
												"id": 970,
												"nodeType": "Return",
												"src": "5505:37:4"
											}
										]
									},
									"documentation": {
										"id": 956,
										"nodeType": "StructuredDocumentation",
										"src": "5291:112:4",
										"text": "@notice Return share of user of given vault\n @param _user share owner\n @param _vault delta vault"
									},
									"functionSelector": "c5c66d4d",
									"id": 972,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUserVaultShares",
									"nameLocation": "5416:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "5443:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "5435:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 957,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5435:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "_vault",
												"nameLocation": "5458:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "5450:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 959,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5450:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5434:31:4"
									},
									"returnParameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "5489:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 962,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5489:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5488:9:4"
									},
									"scope": 973,
									"src": "5407:141:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 974,
							"src": "624:4927:4",
							"usedErrors": []
						}
					],
					"src": "246:5307:4"
				},
				"id": 4
			},
			"contracts/interfaces/ICreditor.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/ICreditor.sol",
					"exportedSymbols": {
						"ICreditor": [
							983
						]
					},
					"id": 984,
					"license": "BUSL",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 975,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "246:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ICreditor",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 983,
							"linearizedBaseContracts": [
								983
							],
							"name": "ICreditor",
							"nameLocation": "283:9:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "dad6f0dc",
									"id": 982,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUserCredit",
									"nameLocation": "307:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 977,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "329:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "321:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 976,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "321:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "320:15:5"
									},
									"returnParameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "359:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 979,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "359:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "358:9:5"
									},
									"scope": 983,
									"src": "298:70:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 984,
							"src": "273:98:5",
							"usedErrors": []
						}
					],
					"src": "246:127:5"
				},
				"id": 5
			},
			"contracts/interfaces/IDeltaNeutralVault.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IDeltaNeutralVault.sol",
					"exportedSymbols": {
						"IDeltaNeutralVault": [
							993
						]
					},
					"id": 994,
					"license": "BUSL",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 985,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "246:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IDeltaNeutralVault",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 993,
							"linearizedBaseContracts": [
								993
							],
							"name": "IDeltaNeutralVault",
							"nameLocation": "283:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "441130d5",
									"id": 992,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "shareToValue",
									"nameLocation": "316:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "_shareAmount",
												"nameLocation": "337:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "329:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 986,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "329:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "328:22:6"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "374:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 989,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "374:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "373:9:6"
									},
									"scope": 993,
									"src": "307:76:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 994,
							"src": "273:113:6",
							"usedErrors": []
						}
					],
					"src": "246:142:6"
				},
				"id": 6
			}
		}
	}
}